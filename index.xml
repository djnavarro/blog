<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/</link>
<atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
<description>A data science blog by Danielle Navarro</description>
<image>
<url>https://blog.djnavarro.net/profile_hex.jpg</url>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/</link>
</image>
<generator>quarto-1.5.52</generator>
<lastBuildDate>Fri, 26 Sep 2025 14:00:00 GMT</lastBuildDate>
<item>
  <title>Some notes on survey weights</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-09-27_survey-weights/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>ü´Ä : Okay. So. Um. Hey babe. You know that <a href="../../posts/2025-09-07_gamlss/">GAMLSS regression post</a> we wrote? <br></p>
<p>üß† : Do you mean the monstrosity that took an entire month out of our lives, spawned an unhinged prequel post about the <a href="../../posts/2025-08-02_box-cox-power-exponential/">Box-Cox power exponential distribution</a> and then <em>another</em> unhinged prequel post about <a href="../../posts/2025-09-06_p-splines/">B-splines and P-splines</a>? The one that brought us to tears several times and made us question our entire reason for being? The one that literally gave you nightmares? The accursed one, the post we swore we were finished with and would never ever revisit upon pain of death. Is <strong>that</strong> the post you mean? <br></p>
<p>ü´Ä : Uh, yeah.<br></p>
<p>üß† : Oh yes, I remember it. What about it? <br></p>
<p>ü´Ä : I, um‚Ä¶ look‚Ä¶ I think it, uhhhhh‚Ä¶ needs a sequel post. We should talk about survey weights. I mean, I know it‚Äôs not our job to talk about all the things, but it does sort of matter right? And we‚Äôve come so far with this thing, we should finish the job properly, right? I mean, I know we‚Äôre not getting paid for this, but you <em>do</em> like to do a good job with things right? Just one more post? Please????<br></p>
<p>üß† : ‚Ä¶ <br></p>
<p>ü´Ä : ‚Ä¶ <br></p>
<p>üß† : Girl. Seriously though. What the actual fuck is wrong with you?</p>
<p><br><br></p>
<p>The worst thing about being a scientist<sup>1</sup> is the fact that no matter how hard you work and no matter how diligent you are in learning skills that fall outside your core discipline, you will on a regular basis get slammed by <a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/OutsideContextProblem">outside context problems</a>. You are trained to work within a particular framework, and you are exquisitely skilled at handling situations that fall within the scope of that framework. You are, almost by definition, a <em>specialist</em>. The days of the ‚Äúrenaissance polymath‚Äù are well and truly behind us, simply because science has advanced so far that no human mind can encompass the whole bloody thing at this point. It‚Äôs impossible.</p>
<p>This is of course a great triumph for science, but a terrible tragedy for the scientist who will <em>always</em> find themselves getting fucked over badly the moment ‚Äúthe thing I was trained for‚Äù turns out to require knowledge from ‚Äúone of the million other things I was not trained for‚Äù. The cruel reality of science is that we feel like fucking morons every single day because there are so very many traps, tripwires, and landmines strewn across the golden fields of science.</p>
<p>We all fuck up. All the time. It‚Äôs a core part of the job, actually. The trick, if you‚Äôre a newly minted scientist hoping to survive in the badlands of real research, is to remain humble in the face complexity. When ‚Äì not if ‚Äì it happens to you, and you make a mistake, the thing you have to do own it and admit you were wrong.<sup>2</sup> Nobody with a shred of integrity will think less of you for admitting a mistake.</p>
<p>And so it is in this spirit that I have to admit there‚Äôs a mistake in my <a href="../../posts/2025-09-07_gamlss/">GAMLSS post</a>. As of this exact moment of writing I don‚Äôt know for certain how bad the mistake is because I haven‚Äôt checked yet.<sup>3</sup> I have some reason to think my mistake isn‚Äôt <em>terrible</em>, but I don‚Äôt know for sure, and I‚Äôm about to find out as soon as I write the rest of this post.</p>
<p>Not gonna lie, I‚Äôm a bit nervous.</p>
<p><br></p>
<section id="survey-weights" class="level2">
<h2 class="anchored" data-anchor-id="survey-weights">Survey weights</h2>
<p>The mistake I made in that post is one that experimentalists such as myself<sup>4</sup> are particularly prone to. I took data from a structured, stratified survey ‚Äì in this case the <a href="https://www.cdc.gov/nchs/nhanes/">National Health and Nutrition Examination Survey</a> (NHANES) ‚Äì and analysed it as if it were a simple random sample, which it most certainly is not. In short, I forgot to consider <strong>survey weights.</strong> The mistake is embarrassing to me because the NHANES website has an entire <a href="https://wwwn.cdc.gov/nchs/nhanes/tutorials/sampledesign.aspx">study design tutorial</a> that talks specifically about this issue<sup>5</sup> and like an idiot<sup>6</sup> I didn‚Äôt take it into account. Siiiiiiiiiiiiiiiigh.</p>
<p>To understand the nature of my mistake, all you need to do is read the first paragraph of the NHANES tutorial discussing the design of the study:</p>
<blockquote class="blockquote">
<p>The NHANES samples are not simple random samples. Rather, a complex, multistage, probability sampling design is used to select participants representative of the civilian, non-institutionalized US population. Oversampling of certain population subgroups is also done to increase the reliability and precision of health status indicator estimates for these particular subgroups. Researchers need to take this into account in their analyses by appropriately specifying the sampling design parameters.</p>
</blockquote>
<p>Oh. Right. Yeah. Guess which bitch forgot to do that? Guess which bitch is now all of a sudden remembering that <em>lots</em> of surveys use stratified sampling, <em>lot</em> of surveys use oversampling for populations of interest, and <em>lots</em> of surveys discuss survey weights quite prominently on their websites<sup>7</sup> in the hope that researchers don‚Äôt make the exact mistake that she did, in fact, make? That‚Äôs right, this bitch.</p>
<p>Oops.</p>
<p><br></p>
</section>
<section id="what-do-survey-weights-do" class="level2">
<h2 class="anchored" data-anchor-id="what-do-survey-weights-do">What do survey weights do?</h2>
<p>So let‚Äôs start by thinking about what survey weights are supposed to do. Reduced to the simplest description I can think of, the idea is to introduce a correction factor that adjusts for whatever sampling biases are known to exist in the sample. Suppose, for example, an Australian survey were designed with an intentional 5-fold oversampling of Tasmanians. There might be reasons for doing this: the population of New South Wales is about 8,500,000 people, whereas Tasmania has only about 580,000 people or thereabouts. If we sampled Australians purely at random, our survey might not have enough Tasmanians in it to be able to say much about Tasmanian residents. Given the differences in population size, you‚Äôd expect to see about 15 residents from New South Wales in the sample for every Tasmanian. That could be a problem if we have a need to understand state-by-state differences as well as understand the overall Australian population. Yes, we‚Äôd be able to learn about Australia overall, but at the state level we‚Äôd learn a lot more about New South Wales and Victoria than we would about Tasmania and South Australia. That‚Äôs not ideal.</p>
<p>Given this concern, then, we decide to adopt a 5-fold oversampling of Tasmanians. This means that any <em>individual</em> Tasmanian resident is 5x as likely to be included in the survey than any individual resident of New South Wales. We‚Äôll still end up with more people from New South Wales (because the actual population difference is 15x not 5x), but the final sample will now only have about 3x as many folks from New South Wales as from Tasmania. It‚Äôs different, certainly, but we‚Äôll now be able to learn the things that we need to learn at the state-by-state level.</p>
<p>The drawback to oversampling Tasmanians, however, is that the sample is now unrepresentative of the nation as a whole. If you want to construct estimates of some quantity for the whole nation, we have to give each NSW resident in the sample 5x the weight that we give to each Tasmanian, in order to correct for the Tasmanian oversampling. This correction factor is the <strong>survey weight</strong>, and it needs to be taken into account when analysing data from our survey.</p>
<p>To be a little more precise about it, here‚Äôs the description that the Australian Bureau of Statistics uses to describe survey weights as they apply to the Survey of Income and Housing:</p>
<blockquote class="blockquote">
<p>Weighting is the process of adjusting results from a sample survey to infer results for the total in scope population whether that be persons or households. To do this, a weight is allocated to each sample unit (e.g.&nbsp;a person or a household). The weight is a value which indicates how many population units are represented by the sample unit. The first step in calculating weights for each unit is to assign an initial weight, which is the inverse of the probability of being selected in the survey. For example, if the probability of a household being selected in the survey was 1 in 600, then the household would have an initial weight of 600 (that is, it represents 600 households).</p>
</blockquote>
<p>Crudely put, the survey weight is a measure of ‚Äúhow many individuals in the population does this sampled row represent?‚Äù. In my hypothetical survey with Tasmanian oversampling, each surveyed person from NSW represents 5x as many Australians as each surveyed Tasmanian, and hence those data should weighted 5x as highly when making calculations about Australia as a whole.</p>
<p>So now we return to my <a href="../../posts/2025-09-07_gamlss/">GAMLSS post</a> and it‚Äôs clearer why the models I developed weren‚Äôt ideal: the NHANES data set contains survey weights (in a few different forms, actually) and I forgot to take them into account when fitting my models for population height and weight. In hindsight, it‚Äôs obvious really.</p>
<p><br></p>
</section>
<section id="how-bad-was-my-mistake" class="level2">
<h2 class="anchored" data-anchor-id="how-bad-was-my-mistake">How bad was my mistake?</h2>
<p>So let‚Äôs revisit my GAMLSS modelling for the NHANES data set. The <code>nhanes</code> data frame shown below is very similar to the one I used last time, with two substantial differences: I‚Äôve restricted it to the 10 year period 2009-2018 and added a <code>survey_wt</code> column that constructs the appropriate 10-year survey weight for these data:<sup>8</sup></p>
<div class="cell">
<details class="code-fold">
<summary>Code for NHANES data import and preprocessing</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># directories</span></span>
<span id="cb1-2">post_dir   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rprojroot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_root_file</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">criterion =</span> rprojroot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".here"</span>)</span>
<span id="cb1-4">)</span>
<span id="cb1-5">local_dir  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>)</span>
<span id="cb1-6">data_dir   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(local_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb1-7">output_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(local_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># conversion based on NHANES average</span></span>
<span id="cb1-10">length_to_height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(length_cm) {</span>
<span id="cb1-11">  length_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.06</span></span>
<span id="cb1-12">}</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all demographics and body measurement files for the 5 two-year cycles</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># spanning the decade from 2009 to 2018</span></span>
<span id="cb1-16">demo_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">regexp =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[FGHIJ]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.xpt"</span>)</span>
<span id="cb1-17">bmx_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bmx"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">regexp =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[FGHIJ]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.xpt"</span>)</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read demographics file (selected variables only)</span></span>
<span id="cb1-20">demos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> demo_files <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-21">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(xx) {</span>
<span id="cb1-22">    dd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> haven<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xpt</span>(xx) </span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WTMEC2YR"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">where =</span> dd)) dd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>WTMEC2YR <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span></span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RIDEXAGM"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">where =</span> dd)) dd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>RIDEXAGM <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span></span>
<span id="cb1-25">    dd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(dd, SEQN, RIAGENDR, RIDAGEYR, RIDAGEMN, RIDEXAGM, WTMEC2YR)</span>
<span id="cb1-26">    dd</span>
<span id="cb1-27">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-28">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file_demo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-29">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file_demo =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_file</span>(file_demo))</span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read body measurements file (selected variables only)</span></span>
<span id="cb1-32">bmxes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bmx_files <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-33">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(xx) {</span>
<span id="cb1-34">    dd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> haven<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xpt</span>(xx) </span>
<span id="cb1-35">    dd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(dd, SEQN, BMXWT, BMXHT, BMXRECUM)</span>
<span id="cb1-36">    dd</span>
<span id="cb1-37">}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-38">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file_bmx"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-39">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file_bmx =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_file</span>(file_bmx))</span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># join data sets, retaining only those rows where the</span></span>
<span id="cb1-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># required body measurements exist</span></span>
<span id="cb1-43">nhanes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bmxes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-44">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(demos, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SEQN"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-45">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(</span>
<span id="cb1-46">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id          =</span> SEQN,</span>
<span id="cb1-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_s       =</span> RIAGENDR, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sex/gender at screen (1 = M, 2 = F, . = NA)</span></span>
<span id="cb1-48">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight_kg_e =</span> BMXWT,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weight at exam</span></span>
<span id="cb1-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_cm_e =</span> BMXHT,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standing height at exam</span></span>
<span id="cb1-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_cm_e =</span> BMXRECUM, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recumbent length at exam (0-47 months only)</span></span>
<span id="cb1-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_yr_s    =</span> RIDAGEYR, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># natal age at screening (years)</span></span>
<span id="cb1-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_mn_s    =</span> RIDAGEMN, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># natal age at screening (months; 0-24 mos only)</span></span>
<span id="cb1-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_mn_e    =</span> RIDEXAGM, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># natal age at exam (months; 0-19 years only)</span></span>
<span id="cb1-54">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">survey_wt   =</span> WTMEC2YR, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2-year weight for persons with exam data </span></span>
<span id="cb1-55">    file_demo,</span>
<span id="cb1-56">    file_bmx</span>
<span id="cb1-57">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-58">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb1-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_num =</span> sex_s <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rescale to 0 = M, 1 = F</span></span>
<span id="cb1-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_fct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex_s, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>)),</span>
<span id="cb1-61">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_mn =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb1-62">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(age_mn_e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> age_mn_e, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use exam months if present</span></span>
<span id="cb1-63">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(age_mn_s) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> age_mn_s, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else use survey months</span></span>
<span id="cb1-64">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> (age_yr_s <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else use age in years</span></span>
<span id="cb1-65">    ),</span>
<span id="cb1-66">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_yr =</span> age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb1-67">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight_kg =</span> weight_kg_e,</span>
<span id="cb1-68">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_cm =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb1-69">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(height_cm_e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> height_cm_e, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use height if it was measured</span></span>
<span id="cb1-70">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(length_cm_e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length_to_height</span>(length_cm_e), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or convert length</span></span>
<span id="cb1-71">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else missing</span></span>
<span id="cb1-72">    ),</span>
<span id="cb1-73">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">survey_wt =</span> survey_wt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert from 2-year to 10-year weight</span></span>
<span id="cb1-74">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cohort =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb1-75">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX.xpt"</span>   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO.xpt"</span>   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1999-2000"</span>,</span>
<span id="cb1-76">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX_B.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_B.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2001-2002"</span>,</span>
<span id="cb1-77">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX_C.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_C.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2003-2004"</span>,</span>
<span id="cb1-78">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX_D.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_D.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2005-2006"</span>,</span>
<span id="cb1-79">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX_E.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_E.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2007-2008"</span>,</span>
<span id="cb1-80">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX_F.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_F.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2009-2010"</span>,</span>
<span id="cb1-81">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX_G.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_G.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2011-2012"</span>,</span>
<span id="cb1-82">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX_H.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_H.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2013-2014"</span>,</span>
<span id="cb1-83">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX_I.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_I.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-2016"</span>,</span>
<span id="cb1-84">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX_J.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_J.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2017-2018"</span>,</span>
<span id="cb1-85">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P_BMX.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P_DEMO.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2017-2020"</span>,</span>
<span id="cb1-86">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BMX_L.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_L.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021-2023"</span>,</span>
<span id="cb1-87">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb1-88">    ),</span>
<span id="cb1-89">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_pandemic =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb1-90">      file_bmx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P_BMX.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P_DEMO.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb1-91">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb1-92">    )</span>
<span id="cb1-93">  )</span>
<span id="cb1-94"></span>
<span id="cb1-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retain only the to-be-used columns, and only those cases for which</span></span>
<span id="cb1-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># age, weight, height, and sex are all present; filter to age &lt; 80</span></span>
<span id="cb1-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># because NHANES uses "80" to mean "80 and above" so the actual age</span></span>
<span id="cb1-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is not known</span></span>
<span id="cb1-99">ok <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)</span>
<span id="cb1-100">nhanes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-101">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(</span>
<span id="cb1-102">    id, sex_num, sex_fct, weight_kg, height_cm, </span>
<span id="cb1-103">    age_mn, age_yr, cohort, survey_wt</span>
<span id="cb1-104">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-105">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(cohort <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1999-2000"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  </span>
<span id="cb1-106">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb1-107">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(sex_num), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(weight_kg), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(height_cm), </span>
<span id="cb1-108">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(age_mn), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(survey_wt)</span>
<span id="cb1-109">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-110">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">nhanes</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 45,353 √ó 9
      id sex_num sex_fct weight_kg height_cm age_mn age_yr cohort  survey_wt
   &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;       &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;
 1 51624       0 male         87.4     165.     409  34.1  2009-2‚Ä¶    16306.
 2 51625       0 male         17       105.      49   4.08 2009-2‚Ä¶    11399.
 3 51626       0 male         72.3     181.     202  16.8  2009-2‚Ä¶     2902.
 4 51627       0 male         39.8     148.     131  10.9  2009-2‚Ä¶     2408.
 5 51628       1 female      117.      166      722  60.2  2009-2‚Ä¶     4200.
 6 51629       0 male         97.6     173      313  26.1  2009-2‚Ä¶     4527.
 7 51630       1 female       86.7     168.     596  49.7  2009-2‚Ä¶    14822.
 8 51631       1 female        9.4      74.6     12   1    2009-2‚Ä¶     4955.
 9 51632       0 male         26       140.     124  10.3  2009-2‚Ä¶     1635.
10 51634       0 male         44.7     144.     121  10.1  2009-2‚Ä¶     2047.
# ‚Ñπ 45,343 more rows</code></pre>
</div>
</div>
<p>Happily for us, the <code>gamlss::gamlss()</code> function contains a <code>weights</code> argument that we can use to take the survey weights into account during the estimation process. Noting this, let‚Äôs fit a model for height by age, similar to what I did in my GAMLSS post. This time around I‚Äôll do it in two wats, one version using the weights and another version ignoring the weights. Here‚Äôs what we get:</p>
<details class="code-fold">
<summary>Code for GAMLSS model fitting</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">height_unweighted_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height_unweighted.rds"</span>)</span>
<span id="cb4-2">height_weighted_file   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height_weighted.rds"</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4">pb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gamlss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>pb</span>
<span id="cb4-5">rerun <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span> </span>
<span id="cb4-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (rerun) {</span>
<span id="cb4-7"></span>
<span id="cb4-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unweighted model for height by age</span></span>
<span id="cb4-9">  height_unweighted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gamlss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamlss</span>(</span>
<span id="cb4-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula       =</span> height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb4-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma.formula =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb4-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu.formula    =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau.formula   =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data    =</span> nhanes,</span>
<span id="cb4-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family  =</span> gamlss.dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>BCPE</span>
<span id="cb4-16">  )</span>
<span id="cb4-17"></span>
<span id="cb4-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unweighted model for height by age</span></span>
<span id="cb4-19">  height_weighted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gamlss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamlss</span>(</span>
<span id="cb4-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula       =</span> height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb4-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma.formula =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb4-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu.formula    =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau.formula   =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data    =</span> nhanes,</span>
<span id="cb4-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> survey_wt,</span>
<span id="cb4-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family  =</span> gamlss.dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>BCPE</span>
<span id="cb4-27">  )</span>
<span id="cb4-28"></span>
<span id="cb4-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(height_unweighted, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> height_unweighted_file)</span>
<span id="cb4-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(height_weighted, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> height_weighted_file)</span>
<span id="cb4-31"></span>
<span id="cb4-32">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb4-33"></span>
<span id="cb4-34">  height_unweighted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> height_unweighted_file)</span>
<span id="cb4-35">  height_weighted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> height_weighted_file)</span>
<span id="cb4-36"></span>
<span id="cb4-37">}</span>
<span id="cb4-38"></span>
<span id="cb4-39">height_mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb4-40">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unweighted =</span> height_unweighted,</span>
<span id="cb4-41">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weighted =</span> height_weighted</span>
<span id="cb4-42">)</span>
<span id="cb4-43"></span>
<span id="cb4-44">quartose<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_tabset</span>(height_mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">unweighted</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">weighted</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<pre> 
 
Family:  c("BCPE", "Box-Cox Power Exponential")  
Fitting method: RS()  
 
Call:   
gamlss::gamlss(formula = height_cm ~ pb(age_mn), sigma.formula = ~pb(age_mn),   
    nu.formula = ~1, tau.formula = ~1, family = gamlss.dist::BCPE,   
    data = nhanes)  
 
Mu Coefficients: 
(Intercept)   pb(age_mn)   
  111.12971      0.09179   
Sigma Coefficients: 
(Intercept)   pb(age_mn)   
 -3.0519544    0.0003807   
Nu Coefficients: 
(Intercept)   
     0.3507   
Tau Coefficients: 
(Intercept)   
     0.8091   
 
 Degrees of Freedom for the fit: 32.97 Residual Deg. of Freedom   45320  
Global Deviance:     316144  
            AIC:     316210  
            SBC:     316498  
</pre>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<pre> 
 
Family:  c("BCPE", "Box-Cox Power Exponential")  
Fitting method: RS()  
 
Call:   
gamlss::gamlss(formula = height_cm ~ pb(age_mn), sigma.formula = ~pb(age_mn),   
    nu.formula = ~1, tau.formula = ~1, family = gamlss.dist::BCPE,   
    data = nhanes, weights = survey_wt)  
 
Mu Coefficients: 
(Intercept)   pb(age_mn)   
   126.1940       0.0694   
Sigma Coefficients: 
(Intercept)   pb(age_mn)   
 -3.0145454    0.0002932   
Nu Coefficients: 
(Intercept)   
     0.4874   
Tau Coefficients: 
(Intercept)   
     0.8769   
 
 Degrees of Freedom for the fit: 33.82 Residual Deg. of Freedom   45319  
Global Deviance:     2137800000  
            AIC:     2137800000  
            SBC:     2137800000  
</pre>
</div>
</div>
</div>
<p>Now let‚Äôs draw the quantile curves that come out of both versions of the model fitting exercise. Thankfully for us, they look very, very similar:</p>
<div class="cell">
<details class="code-fold">
<summary>Code to compute and plot quantiles</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">get_pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, model) {</span>
<span id="cb5-2">  pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu    =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>),</span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>),</span>
<span id="cb5-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu    =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nu"</span>),</span>
<span id="cb5-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau   =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tau"</span>),</span>
<span id="cb5-7">  )</span>
<span id="cb5-8">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(data, pars)</span>
<span id="cb5-9">}</span>
<span id="cb5-10"></span>
<span id="cb5-11">age_max_yr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span> </span>
<span id="cb5-12"></span>
<span id="cb5-13">predict_cases <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb5-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_mn  =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(age_max_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb5-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weighted =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb5-16">)</span>
<span id="cb5-17"></span>
<span id="cb5-18">predict_pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb5-19">  predict_cases <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-20">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(weighted <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-21">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>weighted) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_pars</span>(height_mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>weighted) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-23">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weighted"</span>),</span>
<span id="cb5-24">  predict_cases <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-25">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(weighted <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-26">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>weighted) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_pars</span>(height_mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>unweighted) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-28">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unweighted"</span>)</span>
<span id="cb5-29">)</span>
<span id="cb5-30"></span>
<span id="cb5-31">predict_quantiles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> predict_pars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-32">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q05 =</span> gamlss.dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb5-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q25 =</span> gamlss.dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb5-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q50 =</span> gamlss.dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb5-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q75 =</span> gamlss.dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb5-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q95 =</span> gamlss.dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb5-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_yr =</span> age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb5-39">  )</span>
<span id="cb5-40"></span>
<span id="cb5-41">predict_quantiles_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> predict_quantiles <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-42">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb5-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>),</span>
<span id="cb5-44">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quantile"</span>,</span>
<span id="cb5-45">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height_cm"</span></span>
<span id="cb5-46">  )</span>
<span id="cb5-47"></span>
<span id="cb5-48">predict_quantiles_compare <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> predict_quantiles_long <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-49">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(age_mn, age_yr, height_cm, quantile, model_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-50">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(</span>
<span id="cb5-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> model_type,</span>
<span id="cb5-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> height_cm</span>
<span id="cb5-53">  )</span>
<span id="cb5-54"></span>
<span id="cb5-55">ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-56">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb5-57">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb5-58">      dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> age_max_yr), </span>
<span id="cb5-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age_mn, height_cm),</span>
<span id="cb5-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb5-61">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-62">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb5-63">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> predict_quantiles_long,</span>
<span id="cb5-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age_mn, height_cm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> quantile)</span>
<span id="cb5-65">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-66">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>model_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-67">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-27_survey-weights/index_files/figure-html/predict-quantiles-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>To illustrate the point slightly more precisely, the graphs below plot the quantiles estimated from the weighted model directly against those estimated by from the unweighted model. When drawn like this, the two models are indistinguishable:</p>
<div class="cell">
<details class="code-fold">
<summary>Code for the replotting</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">predict_quantiles_compare <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-2">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb6-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> unweighted,</span>
<span id="cb6-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> weighted, </span>
<span id="cb6-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> quantile</span>
<span id="cb6-7">    )</span>
<span id="cb6-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-9">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slope =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-10">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-11">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>quantile)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-27_survey-weights/index_files/figure-html/predict-quantiles-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Well thank fuck.</p>
<p>Now, this is not to say that the models are literally identical. There <strong>are</strong> systematic differences between the unweighted and weighted models, which show up the moment if we plot the differences between the two versions of the model on the y-axis, but the key thing here is to pay attention to the scale of the y-axis. Even for adults, where you might worry that systematic oversampling in NHANES might start to make a difference, the differences between the two models are never larger than a 2cm discrepancy:</p>
<div class="cell">
<details class="code-fold">
<summary>Code for the residuals plot</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">predict_quantiles_compare <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-2">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb7-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> age_yr,</span>
<span id="cb7-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> unweighted <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> weighted, </span>
<span id="cb7-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> quantile</span>
<span id="cb7-7">    )</span>
<span id="cb7-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-9">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-10">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-27_survey-weights/index_files/figure-html/predict-quantiles-residuals-age-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This makes clear that I did make a mistake ‚Äì that part is still true ‚Äì but thankfully the discrepancies between what the correctly weighted model predicts and what my original unweighted model predicts are pretty small. In the context of the analyses that I described in the original <a href="../../posts/2025-09-07_gamlss/">GAMLSS post</a> and ‚Äì much more importantly ‚Äì the real world analyses in which I‚Äôve used an unweighted model when I should have used a weighted model, the scale of the discrepancy is so small that it won‚Äôt affect any of the ‚Äúdownstream‚Äù analyses. I‚Äôm not going to have to send an emergency mea culpa to anyone. The conclusions of my analyses won‚Äôt change.</p>
<p>Again, thank fuck.</p>
<p><br></p>
</section>
<section id="survey-weights-matter" class="level2">
<h2 class="anchored" data-anchor-id="survey-weights-matter">Survey weights matter</h2>
<p>üß† : So we‚Äôre done now, right? You‚Äôve made your mea culpa, you‚Äôve outlined the reasons why the specific worry doesn‚Äôt alter the inferences that would be made in the contexts we‚Äôve had to do this kind of work. Very diligent of us. Much proud. Very detail. Et cetera. We can stop now, yes? We‚Äôve done our duty admirably, thanks to your whining and panic. It can end now, yes? No more words need to be written?<br></p>
<p>ü´Ä : ‚Ä¶<br></p>
<p>ü´Ä : Okay, about that‚Ä¶<br></p>
<p><br><br></p>
<p>The truth is that I‚Äôve gotten lucky in my analyses, and so have all the other people who have used NHANES data the same way I have.<sup>9</sup> I forgot to take account of something that can matter, and I was fortunate enough that in my specific use cases it didn‚Äôt matter. But the nature of luck is that you aren‚Äôt always lucky. It just doesn‚Äôt work that way. It is not too difficult to come up with examples where the survey weights really do matter, and the rest of the post will be devoted to a one such case. My example is a little artificial, but it will suffice.</p>
<p>For the purposes of this example I‚Äôm going to focus on the data from the 2015-2018 period, corresponding to the 2-year release cycles labelled ‚ÄúI‚Äù and ‚ÄúJ‚Äù in the data files. As described in the <a href="https://www.cdc.gov/nchs/data/series/sr_02/sr02-184-508.pdf">sample design report</a> for this period, the oversampled subgroups during this period were:</p>
<blockquote class="blockquote">
<ul>
<li>Hispanic persons;</li>
<li>Non-Hispanic black persons;</li>
<li>Non-Hispanic, non-black Asian persons;</li>
<li>Non-Hispanic white persons and persons of other races and ethnicities at or below 185% of the federal poverty level; and</li>
<li>Non-Hispanic white persons and persons of other races and ethnicities aged 0‚Äì11 years or 80 years and over.</li>
</ul>
</blockquote>
<p>The language is oddly stilted, presumably because the authors of the report are being admirably cautious and have defined the groups using a set of non-overlapping categories. But if we were to be a little more informal, we‚Äôd notice that these are the oversampled demographics:</p>
<ul>
<li>Hispanic people</li>
<li>Black people</li>
<li>Asian people</li>
<li>Low-income people</li>
<li>Young people</li>
<li>Old people</li>
</ul>
<p>This makes sense for NHANES. I‚Äôm not privvy to their decision making process but I think I can guess the logic: Hispanic, Black, and Asian demographics are oversampled for the same reason that Tasmanians are oversampled in my hypothetical survey at the beginning. They are minority demographics for which we might need to boost the sample size to allow group-by-group comparisons to work. In contrast, I suspect lower-income people, younger people, and older people are all oversampled because NHANES is primarily a survey about health and nutrition, and these three groups are at higher risk of concerns than the rest of the population.</p>
<p>Noting all this, let‚Äôs construct an example that deliberately exploits the structure of this oversampling in order to show why sample weights matter. One of the questions in the NHANES demographic survey asks about country of birth. The question is (on purpose, I suspect) quite coarse-grained. It just asks if you were born in the United States or not, that‚Äôs it. Here‚Äôs a version of the NHANES data that includes a column for <code>us_born</code>:</p>
<div class="cell">
<details class="code-fold">
<summary>Code for NHANES data import and preprocessing</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># demographics files of relevance </span></span>
<span id="cb8-2">demo_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">regexp =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[IJ]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.xpt"</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read and process demographics file (selected variables only)</span></span>
<span id="cb8-5">nhanes_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> demo_files <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-6">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(xx) {</span>
<span id="cb8-7">    dd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> haven<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xpt</span>(xx) </span>
<span id="cb8-8">    dd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(dd, SEQN, RIAGENDR, RIDAGEYR, RIDEXAGM, DMDBORN4, WTINT2YR)</span>
<span id="cb8-9">    dd</span>
<span id="cb8-10">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-11">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file_demo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-12">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file_demo =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_file</span>(file_demo)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-13">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(</span>
<span id="cb8-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id          =</span> SEQN,</span>
<span id="cb8-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_s       =</span> RIAGENDR, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sex/gender at screen (1 = M, 2 = F, . = NA)</span></span>
<span id="cb8-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_yr      =</span> RIDAGEYR, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># natal age at screening (years)</span></span>
<span id="cb8-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">survey_wt   =</span> WTINT2YR, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2-year weight for persons with interview data </span></span>
<span id="cb8-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">birth_cnt   =</span> DMDBORN4, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># country of birth (1 = US, 2 = other, all other codes NA)</span></span>
<span id="cb8-19">    file_demo</span>
<span id="cb8-20">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-21">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb8-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_num =</span> sex_s <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rescale to 0 = M, 1 = F</span></span>
<span id="cb8-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_fct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex_s, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>)),</span>
<span id="cb8-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">us_born =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb8-25">      birth_cnt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb8-26">      birth_cnt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb8-27">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb8-28">    ),</span>
<span id="cb8-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">survey_wt =</span> survey_wt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert from 2-year to 4-year weight</span></span>
<span id="cb8-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cohort =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb8-31">      file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_I.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-2016"</span>,</span>
<span id="cb8-32">      file_demo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMO_J.xpt"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2017-2018"</span>,</span>
<span id="cb8-33">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb8-34">    )</span>
<span id="cb8-35">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  </span>
<span id="cb8-36">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(</span>
<span id="cb8-37">    id, sex_fct, age_yr, us_born, survey_wt</span>
<span id="cb8-38">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-39">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb8-40"></span>
<span id="cb8-41">nhanes_2</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 18,422 √ó 5
      id sex_fct age_yr us_born survey_wt
   &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt; &lt;lgl&gt;       &lt;dbl&gt;
 1 83732 male        62 TRUE       67336.
 2 83733 male        53 FALSE      12164.
 3 83734 male        78 TRUE        6200.
 4 83735 female      56 TRUE       51359.
 5 83736 female      42 TRUE        8814.
 6 83737 female      72 FALSE       5626.
 7 83738 female      11 TRUE        4982.
 8 83739 male         4 TRUE       22375.
 9 83740 male         1 TRUE        4946.
10 83741 male        22 TRUE       18522.
# ‚Ñπ 18,412 more rows</code></pre>
</div>
</div>
<p>Now, what I really ought to do here if I were being careful would be to <em>also</em> import variables corresponding to covariates of interest. I could, for example, include those variables that record race and ethnicity information for the NHANES participants. In this case that is <em>especially</em> important, because we know that oversampling is related to race and ethnicity, and we also know on the basis of commonsense that country of bith will also be related to race and ethnicity.<sup>10</sup> A well-constructed analysis of <code>us_born</code> as an outcome variable should include these as explicit covariates.</p>
<p>However.</p>
<p>I‚Äôm not going to do that. I will, on purpose and with malice aforethought, omit critical variables of interest to the substantive problem. My version of the data set includes only two variables that we might use as predictors: <code>age_yr</code> and <code>sex_fct</code>. That‚Äôs all you get. That, and the <code>survey_wt</code> variable that will turn out to be critically important because I dropped the other covariates!</p>
<p>Noting that I‚Äôve done something malicious in the construction of the data set, let‚Äôs move forward and look at what happens when we estimate the proportion of US residents who are also US born, stratified by age and sex. There are two versions of this calculation shown, one that uses the survey weights, and another that ignores them:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">birth_country <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nhanes_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(us_born)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">us_born_unweighted =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(us_born),</span>
<span id="cb10-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">us_born_weighted =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(us_born <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> survey_wt) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(survey_wt),</span>
<span id="cb10-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(age_yr, sex_fct)</span>
<span id="cb10-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-8">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(age_yr)</span>
<span id="cb10-9"></span>
<span id="cb10-10">birth_country</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 160 √ó 4
   age_yr sex_fct us_born_unweighted us_born_weighted
    &lt;dbl&gt; &lt;fct&gt;                &lt;dbl&gt;            &lt;dbl&gt;
 1      0 female               0.992            0.994
 2      0 male                 1                1    
 3      1 male                 0.982            0.979
 4      1 female               0.984            0.987
 5      2 female               0.978            0.982
 6      2 male                 0.977            0.984
 7      3 male                 0.951            0.956
 8      3 female               0.977            0.984
 9      4 male                 0.969            0.982
10      4 female               0.976            0.982
# ‚Ñπ 150 more rows</code></pre>
</div>
</div>
<p>Looking at the few rows of this table that you can see in this summary, it doesn‚Äôt <em>seem</em> like there‚Äôs much difference between the weighted and unweighted estimates. However, this is misleading because the only rows you can see here correspond to very young children, and all US-resident infants are also in fact US-born. So all the numbers are above 95% US-born. But once you start looking at every other age group, the story is going to change. And so without further ado, let‚Äôs draw a plot‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">birth_country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb12-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(us_born_unweighted, us_born_weighted),</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_born"</span>, </span>
<span id="cb12-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_born_"</span></span>
<span id="cb12-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-8">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb12-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> age_yr,</span>
<span id="cb12-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> us_born,</span>
<span id="cb12-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> method</span>
<span id="cb12-12">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-13">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(</span>
<span id="cb12-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>,</span>
<span id="cb12-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x</span>
<span id="cb12-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-17">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-18">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>sex_fct) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-19">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-27_survey-weights/index_files/figure-html/plot-birth-country-estimates-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>I‚Äôve used loess regression rather than gamlss regression because I honestly do not have the energy to fit more gamlss models, but you‚Äôll get roughly the same results with any flexible regression method.</p>
<p>Looking at the plots, you can see that some aspects to the story remain the same no matter how you analyse the data: the proportion of overseas-born US residents is highest among people aged around 40 or thereabouts. Ingoring the sample weights (red curves) doesn‚Äôt distort the correct answer (blue curves) in that respect, or at least not by very much. But that‚Äôs about the only thing it doesn‚Äôt distort. In every other respect the differences between the blue curves and the red curves are huuuuuuuuuge. The oversampling focuses on groups that are more likely to have been born outside the US, so inevitably it turns out that the sample weights make a huge difference. If you forget to look at the survey weights you‚Äôd think that only 60% of middle-aged US residents were born in the US. Taking survey weights into account, however, we see that the correct answer is closer to 80%. That‚Ä¶ yeah, that matters.</p>
<p>In short ‚Äì sometimes survey weights don‚Äôt affect your results, but sometimes they really, really do.</p>
<p><br></p>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>üß† : But seriously though, why did you make me do all this? I get that you always feel anxiety anytime you realise that there was some imperfection in something we‚Äôve done in the past, but it wasn‚Äôt too hard to convince ourselves that the imperfection in question didn‚Äôt affect anything of importance that we actually did. Doesn‚Äôt this feel like overkill to you?<br></p>
<p>ü´Ä : Maybe, I guess, but admit it‚Ä¶ you feel better knowing that we investigated properly and documented the nature of our thinking in a way that might help other people who could also be tripped up the same way. You do, don‚Äôt you? Don‚Äôt you get a sense of joy and love from doing this?<br></p>
<p>üß† : Not really? You‚Äôre the one with the heart emoji, babe. You‚Äôre the touchy-feely one who wants so desperately to help people, and who panics disproportionately at even the smallest possibility of us having made a mistake. I‚Äôm the one who actually has to do the reading and build the bloody models. This shit is exhausting.<br></p>
<p>ü´Ä : Okay I get that, but also‚Ä¶ isn‚Äôt it possible that my anxiety is the thing that motivates us both to learn new things, and my need to help others is the thing that drives us to make the blog posts that people like so much?<br></p>
<p>üß† : ‚Ä¶<br></p>
<p>üß† : I guess. But it‚Äôs not like we‚Äôre getting paid for this shit sweetie. We‚Äôre doing this almost entirely out of the goodness of your heart, not mine. I‚Äôd have preferred to spend my weekend on something else. We could have read a book, watched some TV, or‚Ä¶ you know, lived our own lives. Doesn‚Äôt that also seem worthy to you? Is anxiety and a desperate desire to be loved really a rational basis for choosing your behaviour?<br></p>
<p>ü´Ä : ‚Ä¶<br></p>
<p>ü´Ä : Fair point but‚Ä¶ would you really want to be one of those people who only does things for the love of money? Do want to be someone whose only real goal in life is to make number go up in the bank balance?<br></p>
<p>üß† : I‚Ä¶ suppose not. But like‚Ä¶ could you possibly just chill the fuck out sometimes? The anxiety is a bit over the top my dear, and it‚Äôs not that pleasant to live with.<br></p>
<p>ü´Ä : ‚Ä¶<br></p>
<p>ü´Ä : ‚Ä¶<br></p>
<p>ü´Ä : Maybe? Look, I‚Äôll try, okay? No promises.<br></p>
<p>üß† : Sigh.<br></p>
<p><br></p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>For a post like this one, where I don‚Äôt have strong expertise of my own and am writing it with the primary goal of improving my skills, I‚Äôm a little wary about suggesting references for others. But for what it‚Äôs worth, here‚Äôs some open access resources I relied on while writing this post:</p>
<ul>
<li><p>The <a href="https://wwwn.cdc.gov/nchs/nhanes/tutorials/sampledesign.aspx">NHANES study design tutorial</a> provides a helpful overview of how to work with the sample weights that come supplied with the NHANES data. Along similar lines, I found it helpful to compare their notes with the <a href="https://www.abs.gov.au/statistics/detailed-methodology-information/concepts-sources-methods/survey-income-and-housing-user-guide-australia/2019-20/weights">weights page</a> on the Australian <a href="https://www.abs.gov.au/statistics/detailed-methodology-information/concepts-sources-methods/survey-income-and-housing-user-guide-australia/2019-20">Survey of Income and Housing</a> website.</p></li>
<li><p>There‚Äôs a nice page on the Pew Research Center website containing notes by Andrew Mercer, Arnold Lau, and Courtney Kennedy on <a href="https://www.pewresearch.org/methods/2018/01/26/how-different-weighting-methods-work/">how different weighting methods work</a>. If you read it on its own it‚Äôs brief and helpful, is a nice entry point if you‚Äôre an inveterate experimentalist at heart and survey data isn‚Äôt your strength. Better yet, it‚Äôs not a standalone document, it‚Äôs acutally part of a much more comprehensive report on <a href="https://www.pewresearch.org/methods/2018/01/26/for-weighting-online-opt-in-samples-what-matters-most/">weighting online opt-in samples</a>, so it gives you ample opportunity to branch out.</p></li>
<li><p>One field in which I know these issues arise often is epidemiology, so it came as little surprise to me to discover that there is a useful chapter on <a href="https://epirhandbook.com/en/new_pages/survey_analysis.html">survey analysis</a> chapter contained within <a href="https://epirhandbook.com/en/">The Epidemiologist R Handbook</a>.</p></li>
<li><p>Another resource I found useful is this online book on <a href="https://bookdown.org/jespasareig/Book_How_to_weight_a_survey/">how to weight a survey</a> by Josep Espasa Reig. One nice thing about this one is that it‚Äôs an informal walkthrough using examples in R, and it‚Äôs intended to be readable by social scientists without any much expertise in the area.</p></li>
<li><p>On the software side, here are a few tools I started investigating: the <a href="https://cran.r-project.org/package=survey">survey</a> R package by Thomas Lumley, and the <a href="http://gdfe.co/srvyr/">srvyr</a> package that provides a <a href="https://dplyr.tidyverse.org/">dplyr</a>-like syntax for it.</p></li>
</ul>
<p>In addition, after I shared this post on social media several people suggested additional reading material to look at.</p>
<ul>
<li><a href="https://www.linkedin.com/in/david-okunlola-2687a239/">David Okunlola</a> pointed me to <a href="https://journals.sagepub.com/doi/pdf/10.1177/1536867X0800800404">this paper on subpopulation analysis</a></li>
<li><a href="https://carljpearson.com/ux-research-blog/">Carl Pearson</a> pointed me to some good discussion on <a href="https://stats.stackexchange.com/questions/57107/use-of-weights-in-svyglm-vs-glm">statsexchange</a>, and to another useful blog post on [different kinds of weights] by Thomas Lumley</li>
<li><a href="https://www.linkedin.com/in/samer-mouksassi-pharm-d-phd-fcp-571555b/">Samer Mouksassi</a> pointed me to some work that he‚Äôs done with <a href="https://www.page-meeting.org/pdf_assets/2208-HBGDki-PAGEPoster_v20160520-02Mouksassi.pdf">longitudinal weights</a></li>
<li><a href="https://www.umich.edu/~bwest">Brady West</a> pointed me to this annual review article <a href="https://www.annualreviews.org/content/journals/10.1146/annurev-statistics-011516-012958">‚ÄúAre survey weights needed‚Äù</a></li>
<li><a href="https://www.practicalsignificance.com/">Ben Schneider</a> mentioned Andrew Gelman‚Äôs <a href="https://sites.stat.columbia.edu/gelman/research/published/STS226.pdf">‚Äústruggles with survey weights‚Äù</a> paper and this <a href="https://projecteuclid.org/journals/statistical-science/volume-22/issue-2/Comment-Struggles-with-Survey-Weighting-and-Regression-Modeling/10.1214/088342307000000195.pdf">reply</a>.</li>
</ul>
<p><a href="https://staskolenikov.net/">Stas Kolenikov</a> very kindly shared a treasure trove of great links:</p>
<ul>
<li><a href="https://journals.sagepub.com/doi/10.1177/096228029600500303">Pfeffermann 1996</a></li>
<li><a href="https://onlinelibrary.wiley.com/doi/10.1002/0470867205.ch3">Binder and Roberts 2003</a></li>
<li><a href="https://smponline.isr.umich.edu/applied-survey-data-analysis/">Heeringa, West, and Berglund</a></li>
<li><a href="https://content.govdelivery.com/attachments/fancy_images/MNHENNE/2023/01/7078801/picture1_original.jpg">A photo of what an NHANES MEC unit looks like</a></li>
</ul>
<p>So‚Ä¶ I suppose I have more reading to do</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Aside from, oh idk, just a lil hypothetical here, an authoritarian government gutting science funding, branding scientists as traitors for researching the wrong topics, threatening researchers, and gluing the cobblestones on the road to fascism in place using the blood and tears of those scientists that have the gall to care about human beings that aren‚Äôt themselves.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>I am currently giving very serious side eye at <a href="https://datacolada.org/129">Uri Simonsohn</a> in this regard. Stop being a dick, dude. You fucked up because you ventured outside your area of expertise, and you‚Äôve been gently corrected in the literature by people who know this stuff better than you do. And that‚Äôs okay, as long as you stop doubling down on the mistake. Just a thought from a girl who no longer has skin in that particular game.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>I suppose if you really want to check you can take a look at the git log on the blog repo and confirm that yep, I‚Äôm writing this introductory section <em>before</em> writing any of the code to investigate the mistake. The anxiety is real.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>I mean, it‚Äôs now been about 5 years since the last time I actually <em>ran</em> an experiment of my very own. I‚Äôm a data analyst by trade now, and unlike my old discipline of mathematical psychology where analysts tend to also run their own experiments, pharmacometricians tend not to conduct the studies they analyse themselves. Nevertheless, both disciplines are built atop a foundation of experimental science, and I notice that pharmacometricians tend to think in ways I find very familiar as a former math psych girl.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>My sincere thanks to <a href="https://www.linkedin.com/in/benjaminrichphd/">Benjamin Rich</a> and <a href="https://profiles.auckland.ac.nz/t-lumley">Thomas Lumley</a> who, in different contexts, both found very gentle ways to point me in the right direction. I mean, I did sort of know I had to think about this but I just‚Ä¶ didn‚Äôt.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>In my defence, I was not an idiot. I was an analyst operating under time pressure, and I missed a detail that in hindsight I should have paid more attention to. Sigh. But it happens to us all, and in an attempt to practice what I preach, I‚Äôm admitting it openly.‚Ü©Ô∏é</p></li>
<li id="fn7"><p>As another example, here‚Äôs the Australian <a href="https://www.abs.gov.au/statistics/detailed-methodology-information/concepts-sources-methods/survey-income-and-housing-user-guide-australia/2019-20">Survey of Income and Housing</a>, and lo and behold it has a page explicitly discussing <a href="https://www.abs.gov.au/statistics/detailed-methodology-information/concepts-sources-methods/survey-income-and-housing-user-guide-australia/2019-20/weights">survey weights</a> for the study.‚Ü©Ô∏é</p></li>
<li id="fn8"><p>You can inspect the code to see the actual calculations but in short, I used the ‚ÄúMEC‚Äù weights (weights associated with the data collected via the mobile examination centre) and - noting that the weights are commensurate over this period, constructed the 10-year weight by dividing the 2-year weight by 5 when the data for 5 2-year cycles are aggregated. The <a href="https://wwwn.cdc.gov/nchs/nhanes/tutorials/sampledesign.aspx">NHANES study design tutorial</a> goes into details on this.‚Ü©Ô∏é</p></li>
<li id="fn9"><p>You know who you are. We‚Äôve all made this mistake once or twice ‚ò∫Ô∏è. ‚ÄôTis the nature of the beast if you‚Äôre working as an applied data analyst at the coalface. You get slammed with client requests that come in faster than you can handle, always with an externally-imposed deadline that you cannot change. You do the best you can in the limited timeframe that is permitted. That‚Äôs all you can do.‚Ü©Ô∏é</p></li>
<li id="fn10"><p>Amusing side-note. It‚Äôs always worth remembering that race and ethnicity categories aren‚Äôt ‚Äúnatural categories‚Äù in the sense that they map onto true and unyielding permanent categories in the world. When I work for Japanese clients, for example, their data set use race and ethnicity categories that are defined completely differently to how American clients define these things. Australian data sets define these things differently from American data sets also. The somewhat artificial nature of these categories means you should be careful when working with them in data sets, but also (and more entertainingly) lead to hilarious side effects. The formal definition of ‚ÄúHispanic‚Äù as used in a lot of US surveys is constructed around family ancestry, and usually around whether you or your parents were born in a Spanish-speaking country. Hilariously, to my mind, Spain is <em>not</em> excluded from the list of countries. So if your family comes from Spain (as mine does on one side) you are ‚Äútechnically‚Äù Hispanic, but not if your family comes from Portugal. Yes this is absurd. It means that the US considers me Hispanic. By any common sense understanding of what ‚ÄúHispanic‚Äù refers to, I am not Hispanic. But that is the nature of administrative categories: they are crude.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {Some Notes on Survey Weights},
  date = {2025-09-27},
  url = {https://blog.djnavarro.net/posts/2025-09-27_survey-weights/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúSome Notes on Survey Weights.‚Äù</span>
September 27, 2025. <a href="https://blog.djnavarro.net/posts/2025-09-27_survey-weights/">https://blog.djnavarro.net/posts/2025-09-27_survey-weights/</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Surveys</category>
  <guid>https://blog.djnavarro.net/posts/2025-09-27_survey-weights/</guid>
  <pubDate>Fri, 26 Sep 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-09-27_survey-weights/samuel-girven-CeJuNGDjHAM-unsplash.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Some notes on probability judgement</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/</link>
  <description><![CDATA[ 





<!--------------- post begins here ----------------->
<p>There is a statistic that is <a href="https://bsky.app/profile/junlper.beer/post/3lz77zawz5s2f">currently going viral on bluesky</a>. It is not the first time this statistic has gone viral. It has happened several times before, and every time it happens I get really angry because the statistic is false. The claim is this: ‚ÄúAmericans are so unhinged about trans people that they actually think 1 in 5 people are trans‚Äù, and it‚Äôs always delivered with a strong undercurrent of ‚Äúhaha aren‚Äôt they stupid?‚Äù It‚Äôs posts like this that I‚Äôm talking about:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/polling_usa_tweet.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="A tweet by 'PollingUSA'. The text reads: 'If you had to guess what percentage of American adults are transgender..'. Survey guess: 21%. Actual share of the US population: less than 1%. (The tweet attributes this to YouGov)" width="400"></p>
</figure>
</div>
<p>Haha those stupid Americans aren‚Äôt they so stupid? They think 1 in 5 people is trans!!!! It‚Äôs only 1%<sup>1</sup> you idiots. Hahahaha. You r dumb. Et cetera. Et cetera. It‚Äôs so utterly absurd to think that 21% of the population is trans, so of course posts like the PollingUSA one go viral. Because, hey, it‚Äôs funny to laugh at how stupid other people are.</p>
<p>Sigh.</p>
<p>Now let‚Äôs be clear here. I am an Australian, and as an Australian one of my national passtimes is making fun of Americans. It is part of our national identity: we laugh at America endlessly. America is an absurd country, and I‚Äôve no compunction whatsoever about making fun of it. However, in this case it is simply not warranted. The average American <em><strong>does not believe this</strong></em>, and it‚Äôs frankly absurd to think that they do. I don‚Äôt care one bit what YouGov or PollingUSA has to say on the topic, dear reader, and if you will permit me my full range of expression‚Ä¶.</p>
<p><strong>FOR FUCKS SAKE NOBODY THINKS THAT 21% OF PEOPLE ARE TRANSGENDER.</strong></p>
<p>And yet there it is. The number is there, in the tweet, and it comes with the imprimatur of YouGov, a professional polling company who wouldn‚Äôt just make shit up (and, no, they don‚Äôt). So there must be data behind it, right? Proper honest-to-god scientific data, right? And‚Ä¶ well‚Ä¶ yes, actually, there is. There is real data behind this number, and that data is (as far as I can tell) entirely legitimate. Nevertheless. The claim is wrong. Obviously, demonstrably wrong. You should not believe it.</p>
<p>My goal in this post is to explain why, in the hope that next time you see a bullshit claim like this one, you will be able to call it bullshit and explain why it is, in fact, bullshit.</p>
<p>So‚Ä¶ let‚Äôs rewind, shall we?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scales)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(forcats)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggrepel)</span></code></pre></div>
</div>
<section id="where-does-the-number-come-from" class="level2">
<h2 class="anchored" data-anchor-id="where-does-the-number-come-from">Where does the number come from?</h2>
<p>The origin of the myth comes from a <a href="https://today.yougov.com/politics/articles/41556-americans-misestimate-small-subgroups-population">survey performed by YouGov in 2022</a>, and I‚Äôll start by reassuring you that the sampling methods ‚Äì i.e., how they recruited participants ‚Äì looks pretty decent to me, and the sample size is also fine. At the bottom of the article you‚Äôll see the following description of their methodology:</p>
<blockquote class="blockquote">
<p>This article includes findings from two U.S. News surveys conducted by YouGov on two nationally representative samples of 1,000 U.S. adult citizens interviewed online from January 14-20, 2022. The first survey included questions on groups involving race, education, income, family, gender, and sexuality, while the second survey included questions on religion, politics, and other miscellaneous groups. The samples were weighted according to gender, age, race, and education based on the 2018 American Community Survey, conducted by the U.S. Census Bureau, as well as 2016 and 2020 Presidential votes (or non-votes). Respondents were selected from YouGov‚Äôs opt-in panel to be representative of all U.S. citizens. Real proportions were taken from a variety of sources, including the U.S. Census Bureau, the Bureau of Labor Statistics, YouGov‚Äôs internal poll results, and the results of other well-established polling firms. Most estimates were collected within the past three years; the oldest is from 2009. Because the real estimates presented cover a range of time periods, they may differ from actual population sizes at the time our survey was conducted.</p>
</blockquote>
<p>Blah blah blah. Whatever.</p>
<p>I mean, this is all perfectly sensible and none of it strikes me as a problem. If I‚Äôm honest, having done a <em>lot</em> of psychological studies looking at how people answer questions like this one, the YouGov survey has much better sampling methodology than you‚Äôll see in a typical academic paper on this subject. So we can dispense with one possible worry at the outset: the sample size is adequate and the sampling methodology is good. Let‚Äôs move on.</p>
<p>So, what did the survey involve? Well, actually, that PollingUSA tweet that made me so angry is basically correct. They recruited a whooooole bunch of people and asked a series of questions like these..</p>
<blockquote class="blockquote">
<ul>
<li>If you had to guess, what proportion of American adults are transgender?</li>
<li>If you had to guess, what proportion of American adults have a passport?</li>
<li>If you had to guess, what proportion of American adults own a car?</li>
</ul>
</blockquote>
<p>Et cetera, et cetera. You get the idea.</p>
<p>Now, one of the fun things about having spent 20 years of my life as a mathematical psychologist<sup>2</sup> is that just from looking at the questions I can tell you something about what the responses will look like. It is entirely predictable that people will <strong>massively</strong> overestimate the answer for the trans question, <strong>massively</strong> underestimate the answer for the car question, and will probably do okay(-ish) on the passport question.</p>
<p>Why do I know this with utter certainty? Because it‚Äôs a trick. Stage magic, if you will, except using human psychology to do it. I have seen this parlour trick before. I know it well. In my academic days it is a trick I pulled off countless times in undergrad lectures, along with a variety of others. As the post unfolds I‚Äôll show you how the trick works and why it works, but let‚Äôs start by taking a look at the data, which YouGov have kindly provided in their article and I have translated into a <a href="./yougov_survey.csv">csv file</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">survey <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yougov_survey.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-2">survey</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 45 √ó 4
   category                                 true est_mean est_median
   &lt;chr&gt;                                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;
 1 Have a household income over $1 million  0        0.2        0.1 
 2 Are transgender                          0.01     0.21       0.12
 3 Have a household income over $500,000    0.01     0.26       0.19
 4 Are Muslim                               0.01     0.27       0.2 
 5 Are Native American                      0.01     0.27       0.2 
 6 Are Jewish                               0.02     0.3        0.25
 7 Live in New York City                    0.03     0.3        0.22
 8 Are gay or lesbian                       0.03     0.3        0.24
 9 Are atheists                             0.03     0.33       0.28
10 Are bisexual                             0.04     0.29       0.24
# ‚Ñπ 35 more rows</code></pre>
</div>
</div>
<p>This isn‚Äôt the raw data, obviously, it‚Äôs just a summary:</p>
<ul>
<li>the <code>category</code> column indicates which question was being asked</li>
<li>the <code>true</code> column gives you the actual proportion (i.e., the correct answer)</li>
<li>the <code>est_mean</code> column is the <em>average</em> response people gave when asked the question</li>
<li>the <code>est_median</code> column is the <em>median</em> response people gave when asked the question</li>
</ul>
<p>Fair enough. Here‚Äôs a recreation of the first plot that appears in the YouGov article. Look, I‚Äôll even show you the code used to create it‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">percent <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">accuracy =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-2">survey <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(category, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>true),</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lbl_true =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(true <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> est_mean, true <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, true <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lbl_est =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(true <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> est_mean, est_mean <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, est_mean <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-7">  )  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> category)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> true, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> est_mean), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey70"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> true), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick3"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> est_mean), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deepskyblue4"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> lbl_true, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">percent</span>(true)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick3"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> lbl_est, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">percent</span>(est_mean)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deepskyblue4"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>())</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/index_files/figure-html/yougov-style-plot-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>It‚Äôs not quite as pretty as the version on the YouGov page, but you get the idea. The dots and numbers in red show the correct answer for each category, and those in blue show the average response given by the participants in the survey. The one thing I‚Äôve added to the plot is the dashed line at 50%.</p>
</section>
<section id="are-people-really-that-stupid" class="level2">
<h2 class="anchored" data-anchor-id="are-people-really-that-stupid">Are people really that stupid?</h2>
<p>Okay, so now we understand where the data come from and as a side benefit we even have a pretty little picture that we‚Äôve drawn all on our very own. Yay us. But what are the data actually saying.</p>
<p>Well, when you look at the plot there is a clear pattern, and that pattern is so obvious that it feels condescending and silly to actually say it. Nevertheless, I will do my duty and say the words out loud: <strong>the human responses are squashed</strong>. The blue dots are always closer to the dashed line at the magic ‚Äú50%‚Äù number than the red dots. The blue does aren‚Äôt randomly located ‚Äì they‚Äôre approximately in the right order ‚Äì but they‚Äôre noisy and they are ‚Äúsquashed‚Äù. Compared to the red dots, the human responses in blu get draaaaaged as if by some kind of statistical magnet towards the middle. But the ordering stays the same. (More or less)</p>
<p>This is the absolutely critical thing to pay attention to. People <em>do</em> know which categories are more common than other categories, we‚Äôre just really shit at coming up with the numbers. To highlight this, notice that the blue dot for the ‚Äúvegetarian‚Äù question sits at 30%, and the blue dot for the ‚Äútransgender‚Äù question sits at 21%. Both of these numbers are grossly incorrect ‚Äì they should be 5% and 1% respectively ‚Äì but the ordering is correct. People are actually very good at noticing that <em>‚Äúwell yeah duh <strong>of course</strong> there are more vegetarians than transsexuals<sup>3</sup> omg how stupid do you think I am????‚Äù</em> Humans<sup>4</sup> aren‚Äôt stupid. We do in fact know which things are common and which things are rare.<sup>5</sup></p>
<p>This is so blindingly fucking obvious that it hurts me to have to write it.</p>
<p>I mean, at the risk of boring you all to death, I will draw another goddamn plot using the same data. Each dot will represent one of the categories. On the x-axis I‚Äôll show the true percentage (the correct answer), and on the y-axis I‚Äôll show the average guess made by the lovely folks who participated in that YouGov survey. Hell, I‚Äôll even label some of the dots for you. Here it is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(survey, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> true, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> est_mean)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slope =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magenta4"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_label_repel</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> category), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.overlaps =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The true percentage"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The average guess by humans"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/index_files/figure-html/calibration-curve-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Purple line. She go up. People truly honest-to-dog know which things are more common than other things. They are not stupid.</p>
<p>Fucking duh.</p>
</section>
<section id="okay-people-not-stupid-but-why-line-so-flat" class="level2">
<h2 class="anchored" data-anchor-id="okay-people-not-stupid-but-why-line-so-flat">Okay, people not stupid but why line so flat?</h2>
<p>Now that we‚Äôve established that (a) alas, despite our desperate wish to make fun of them, Americans are not stupid and they do know which things are more common than the other things, and (b) we have a nice pretty purple line proving this, but it‚Äôs flatter than it should be. So we are naturally led to ask ourselves (c) why she so flat, and also, wtaf? why is dot for transes at 21? when should be at 1??</p>
<p>Despite my childish phrasing, these are excellent scientific questions, and happily for us they‚Äôre scientific questions that have been studied quite thoroughly since the 1970s or thereabouts. The ‚Äúclassic‚Äù paper that every undergrad psychology class starts with is a short article on <a href="https://doi.org/10.1126/science.185.4157.1124">heuristics and biases</a> by Amos Tversky and Daniel Kahneman from 1974. It‚Äôs a fabulous paper,<sup>6</sup> and one that shaped a lot of the scientific research in the field that later became known as ‚Äúbehavioural economics‚Äù. The key insight in the paper is alarmingly ‚Äì and deceptively ‚Äì simple. When you ask people to make a choice or a judgement about something they‚Äôve never thought about before, we don‚Äôt consult a magic oracle in our heads that gives us an answer. Instead, what we do is find something kinda similar to that question that we do know something about and answer that question instead. We rely on <strong>heuristics</strong> that help us find an approximate answer.</p>
<p>Again, duh. What the fuck else are we going to do? But it‚Äôs the details that matter. What <em>specific</em> heuristics do people use in order to answer questions like this? That part is harder. The thing that made that Tversky and Kahneman paper so enticing is that they proposed a lot of specific ‚Äútricks‚Äù that people rely on when we are confronted by these sorts of questions. Over the years psychologists have explored many different ideas in this respect, and this blog post isn‚Äôt the right place to talk about all the details. I don‚Äôt agree with all the claims that they made back in 1974, and over the years I‚Äôve written a lot of academic <a href="https://papers.djnavarro.net">papers</a> in which I‚Äôve agreed with some bits and disagreed with others. But whatever. The little academic nuances aren‚Äôt important for this post‚Ä¶ we‚Äôre talking big picture stuff here, so I‚Äôm going to gloss over the details.<sup>7</sup></p>
<p>So let‚Äôs go back to the YouGov survey. That purple line is often called a <strong>calibration function</strong> in psychology<sup>8</sup>. It plots the relationship between the true probability, and the average answer people give when asked to guess the true probability. It <em>always</em> looks like this. That ‚Äúsquashed‚Äù pattern that we see with our purple line is so predictable that I‚Äôve relied on it in lectures. The calibration function will almost always trend in the right direction (because people do know something about the topic), but it will be kind of flat (because we also make mistakes). When the true probability is very small, people‚Äôs answers will (on average) always be too high; and when the true probability is very high, people‚Äôs answers on average will be too low. It happens every time.</p>
<p>To illustrate why it‚Äôs so predictable, let‚Äôs try a simple theory, one that is too silly to be real and easily disproved by data,<sup>9</sup> but one that helps us refine our thinking. Let‚Äôs suppose that half of the time people ‚Äì somehow, miraculously ‚Äì know the <em>exact</em> true number, and they respond by telling us the right answer. But if they don‚Äôt know the answer, or just don‚Äôt care enough to answer the question, they guess <em>completely at random</em> by picking a number between 0% and 100%. What might the YouGov data look like if people were doing that?</p>
<p>Well, the wonderful thing about computers is that I can find out with just a few lines of code. The code below is not very efficient (deliberately), but it does the job. It cycles over all the questions in the YouGov survey, simulates a ‚Äútruth or wild guess‚Äù process, and then calculates what the average response would look like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">random_error <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(truth) {</span>
<span id="cb6-2">  error_rate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb6-3">  sample_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb6-4">  n_questions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(truth)</span>
<span id="cb6-5">  mean_response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> n_questions)</span>
<span id="cb6-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (q <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n_questions) {</span>
<span id="cb6-7">    is_wrong <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(sample_size) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> error_rate</span>
<span id="cb6-8">    n_wrong <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(is_wrong)</span>
<span id="cb6-9">    response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(truth[q], sample_size)</span>
<span id="cb6-10">    response[is_wrong] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n_wrong)</span>
<span id="cb6-11">    mean_response[q] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(response)</span>
<span id="cb6-12">  }</span>
<span id="cb6-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(mean_response)</span>
<span id="cb6-14">}</span></code></pre></div>
</div>
<p>So let‚Äôs apply this <code>random_error()</code> model to the data and see what that looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">simulated_survey <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> survey <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">est_sim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_error</span>(true))</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(simulated_survey, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> true, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> est_sim)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slope =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magenta4"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_label_repel</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> category), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.overlaps =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The true percentage"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The average guess made by our model"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/index_files/figure-html/random-error-model-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Okay, this already gets us part of the way there. A simple theory that says ‚Äúpeople know the exact answer half the time, and guess completely at random the other half of the time‚Äù is‚Ä¶ actually not that far off? It‚Äôs pretty obvious just by looking at the differences between the real plot and the simulated plot that this is not the real story, but it‚Äôs enough to answer our first question: <strong>whenever people can make mistakes, the purple line will be squished</strong>. More than that, the ‚Äúsquishing‚Äù effect will be strongest at the extremes. If the true answer is 1%, random errors will have a huuuuuuuge effect in pulling the average upwards. If the true answer is 50%, random errors will tend to cancel each other out.</p>
<p>In other words, the single most important reason why people grossly overestimate the proportion of the population that is transgender has absolutely nothing to do with bigotry, with stereotypes, or even to do with trans people. It looks like that because the correct answer is so small. That‚Äôs it. That is the single most important factor in play. On a bounded scale (i.e., the true answer must be a number between 0% and 100%) random mistakes will <em>always</em> drag the small numbers upwards, and the big numbers downwards. <strong>Being transgender is rare, and answering a question incorrectly is possible.</strong> Those two facts <em>alone</em> are enough to explain why the average answer to the YouGov question about trans people is so grossly distorted. You don‚Äôt need to make any fancier assumptions than those to explain the ‚Äúwtaf why 21% trans‚Äù part of the YouGov survey.</p>
</section>
<section id="okay-line-so-flat-but-why-dots-so-scattered" class="level2">
<h2 class="anchored" data-anchor-id="okay-line-so-flat-but-why-dots-so-scattered">Okay, line so flat but why dots so scattered?</h2>
<p>One problem with the simple ‚Äúrandom error‚Äù theory that I proposed in the last section is that while it does produce a flattend calibration curve, it doesn‚Äôt produce enough variability: all the black dots sit pretty close to the purple line. Random error isn‚Äôt sufficient to explain why the human judgments don‚Äôt all sit on a straight line. There must be something else going on. So‚Ä¶ perhaps some questions are harder to answer than others? Let‚Äôs say some questions are easy: 75% of people know the correct answer and provide that answer in the survey. Other questions are harder, and only 25% of people know the correct answer. Everyone else guesses completely at random. What might the YouGov survey look like under those assumptions? Here‚Äôs a quick and dirty simulation:</p>
<div class="cell">
<details class="code-fold">
<summary>Code for the variable difficulty model</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3">variable_difficulty <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(truth) {</span>
<span id="cb8-4">  sample_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb8-5">  n_questions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(truth)</span>
<span id="cb8-6">  difficulty <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n_questions, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb8-7">  mean_response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> n_questions)</span>
<span id="cb8-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (q <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n_questions) {</span>
<span id="cb8-9">    is_wrong <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(sample_size) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> difficulty[q]</span>
<span id="cb8-10">    n_wrong <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(is_wrong)</span>
<span id="cb8-11">    response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(truth[q], sample_size)</span>
<span id="cb8-12">    response[is_wrong] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n_wrong)</span>
<span id="cb8-13">    mean_response[q] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(response)</span>
<span id="cb8-14">  }</span>
<span id="cb8-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(mean_response)</span>
<span id="cb8-16">}</span>
<span id="cb8-17"></span>
<span id="cb8-18">simulated_survey <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> survey <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">est_sim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">variable_difficulty</span>(true))</span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(simulated_survey, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> true, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> est_sim)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slope =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magenta4"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb8-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_label_repel</span>(</span>
<span id="cb8-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> category), </span>
<span id="cb8-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.overlaps =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, </span>
<span id="cb8-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">force =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb8-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">force_pull =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-29">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb8-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The true percentage"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The average guess made by our model"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/index_files/figure-html/variable-difficulty-model-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Weirdly, despite the simplicity of the model, the basic ‚Äúlook and feel‚Äù of this plot is about right. I mean, obviously it‚Äôs not literally predicting the results of the YouGov survey correctly, but it gets the ‚Äúbig picture‚Äù aspects correct. The purple line has the right slope, and the variability of the black dots around the purple line is also about right. Again, I should stress that this model is not true. I don‚Äôt have access to the raw data from the YouGov survey, but I have seen dozens of data sets just like it and I can guarantee you that if we did have access to the raw data and started digging into the answers given by individual people, you‚Äôd see wild discrepancies between what they actually say and what this model predicts.<sup>10</sup> But for the moment let‚Äôs not worry about that and just focus on the fact that we can reproduce something very much like the YouGov survey pattern by making two very boring assumptions:</p>
<ul>
<li>Sometimes people make mistakes</li>
<li>Some questions are harder than others</li>
</ul>
<p>Those two factors alone are sufficient to ensure that <em>every</em> survey that asks human beings to guess how rare or how common different things are ‚Äì or, to use the slightly more technical term, every survey that collects data from human probability judgments ‚Äì will have this approximate pattern. You will <strong>always</strong> observe a flattened calibration curve, and you will <strong>always</strong> observe some scattering around the calibration curve. In this respect, the survey data will be as predictable as the tides.</p>
</section>
<section id="yeah-but-thats-not-the-whole-story-is-it" class="level2">
<h2 class="anchored" data-anchor-id="yeah-but-thats-not-the-whole-story-is-it">Yeah but that‚Äôs not the whole story, is it?</h2>
<p>Okay, so let‚Äôs take a moment to think about what we‚Äôve worked out. If we were designing something like the YouGov survey and we‚Äôd taken an undergrad psychology class that covered human judgement and decision making, we would already know what to expect in advance. We expect that the calibration curve will be squished, and we expect that there will be some variability around that calibration curve. It would be <em>bizarre</em> if our survey were to produce anything else. But‚Ä¶ what things about the data <em>can‚Äôt</em> be predicted in advance solely on the basis of a psychology 101 class? One obvious answer to this is that we don‚Äôt know <em>which</em> of the black dots (questions) will fall a long way from the calibration curve (purple line). To answer that question, we actually have to analyse the data!</p>
<p>In real life, analysing probability judgement data properly can be a delicate affair, especially if you want to truly appreciate the nuances or if you want to find out whether some of your participants are better calibrated than others. It gets especially messy when you start asking questions about what the shape of the calibration curve should look like.<sup>11</sup> But for the purposes of this blog post I‚Äôm not going to be concerned with those sorts of details. All I‚Äôm going to do is fit a linear regression model to the data (i.e., estimate the purple line), and then pull out those questions where people‚Äôs responses deviate substantially from the calibration curve. Here they are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(est_mean <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> true, survey)</span>
<span id="cb9-2"></span>
<span id="cb9-3">survey <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(mod)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> est_mean) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">085</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 √ó 5
  category                                 true est_mean est_median  pred
  &lt;chr&gt;                                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;
1 Have a household income over $1 million  0        0.2        0.1  0.292
2 Are transgender                          0.01     0.21       0.12 0.296
3 Own a gun                                0.32     0.54       0.52 0.430
4 Are obese                                0.42     0.56       0.56 0.473
5 Have read a book in the past year        0.77     0.5        0.5  0.625
6 Own a smartphone                         0.85     0.76       0.8  0.659</code></pre>
</div>
</div>
<p>Now we are finally getting somewhere! <em>These</em> are the questions where people‚Äôs answers are surprising, and we might need to ask <em>why</em> the answers are surprising.</p>
<p>So let‚Äôs now redraw the YouGov plot with the red dots (true probabilities) and the blue dots (average responses). But this time we‚Äôll also add some purple dots‚Ä¶ the purple dots show the answers that we would expect to observe if the data sat perfectly on the calibration curve. Here‚Äôs what <em>that</em> looks like:</p>
<div class="cell">
<details class="code-fold">
<summary>Plotting code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">predictions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> survey <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(mod),</span>
<span id="cb11-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(category, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pred),</span>
<span id="cb11-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lbl_pred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> est_mean, pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">06</span>, pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">06</span>),</span>
<span id="cb11-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lbl_est =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> est_mean, est_mean <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">06</span>, est_mean <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">06</span>)</span>
<span id="cb11-7">  )</span>
<span id="cb11-8">surprises <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> predictions <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(pred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> est_mean) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">085</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(predictions, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> category)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb11-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> pred, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> est_mean), </span>
<span id="cb11-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb11-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey70"</span></span>
<span id="cb11-15">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> true), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick3"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> pred), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magenta4"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> est_mean), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deepskyblue4"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb11-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> surprises, </span>
<span id="cb11-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> lbl_pred, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">percent</span>(pred)), </span>
<span id="cb11-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magenta4"</span></span>
<span id="cb11-23">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb11-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> surprises, </span>
<span id="cb11-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> lbl_est, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">percent</span>(est_mean)), </span>
<span id="cb11-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deepskyblue4"</span></span>
<span id="cb11-28">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(</span>
<span id="cb11-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb11-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb11-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()</span>
<span id="cb11-33">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb11-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb11-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb11-38">  )</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/index_files/figure-html/residuals-plot-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Ahhhhh‚Ä¶ now things are starting to make a lot more sense. For three of the ‚Äúpossibly surprising‚Äù questions, people‚Äôs responses are only ‚Äúsurprising‚Äù in the sense that they‚Äôre <em>more accurate</em> than the calibration curve predicts. Those questions are:</p>
<ul>
<li>what proportion of people are transgender?</li>
<li>what proportion of households have income over $1 million?</li>
<li>what proportion of people own a smartphone?</li>
</ul>
<p>For these three ‚Äúsurprises‚Äù, the only thing that might be surprising is that people do better at answering the questions than we might otherwise expect! These aren‚Äôt ‚Äúbiases‚Äù in the usual sense, all of these are cases where people are actually <em>better</em> informed than usual. There‚Äôs no need to puzzle over these, at least not in the sense of asking why people get it wrong because they‚Äôre <em>not</em> getting it surprisingly wrong, they‚Äôre getting it surprisingly right!</p>
<p>To the extent that we should be surprised by the YouGov data, the ones that should be truly puzzling to us are these three, because these are the cases in which the deviations from the calibration curve <strong>push people even farther from the truth</strong> than we would expect on the basis of basic human psychology:</p>
<ul>
<li>people drastically <strong>overestimate</strong> gun ownership</li>
<li>people drastically <strong>overestimate</strong> obesity rates</li>
<li>people drastically <strong>underestimate</strong> how often we read books</li>
</ul>
<p>These are the only three questions for which the YouGov data provides concrete evidence that people might be systematically ill-informed. Everything else we can account for very easily, using nothing fancier than a minimal knowledge of human psychology and basic statistics. But even there, one of those three we can ignore immediately ‚Äì specifically, the obesity rates question. The problem with this question is that ‚Äúobesity‚Äù is an inherently subjective judgement. What you and I think of as ‚Äúobese‚Äù might be quite different from the formal medical definition. In other words, for that question the answer might be as boring as ‚Äúmedical definitions are different from everyday meanings of words‚Äù. Again, no special pleading is required here.</p>
<p>That leaves us with a mere two cases that <em>actually</em> require an explanation: owning guns and reading books. These are both objective categories, and people are strangely misinformed about both. We overestimate how many people own guns, and we underestimate how many people read books. That‚Äôs it. Those are the only two things in the YouGov data that you ought to find peculiar.</p>
<p>As to why those two questions might be special‚Ä¶ well, personally I think it‚Äôs pretty obvious what makes those questions different from the others, but I‚Äôll leave that part as an exercise for the reader.</p>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>One of the most confusing things about doing psychological research is that it‚Äôs something that feels easy but is actually very hard. When you do a survey like the YouGov one and don‚Äôt think too hard about what it means, you can very quickly find yourself in trouble. Over and over I have seen smart researchers collect data like this and come to the conclusion that ‚Äúpeople are stupid‚Äù. And look, sometimes we are stupid. That‚Äôs part of human nature too. But oftentimes, the answer isn‚Äôt so much that ‚Äúpeople are stupid‚Äù as it is ‚Äúthe question is weird‚Äù.</p>
<p>The idea of quantifying uncertainty using numerical probability is comparatively recent. It‚Äôs something we‚Äôve only been doing as a species for a few hundred years. In contrast, ‚Äúremembering that this thing is common and this other thing is rare‚Äù is something we (and the species from which we evolved) have been doing for <em>millions</em> of years. So it should not come as a surprise to learn that people are actually pretty good at noticing which thing is more common than the other thing; the only thing we‚Äôre not good at is translating that knowledge into a <em>number</em>.</p>
<p>In fact, there‚Äôs a whole separate line of work known as the ‚Äúdecisions from experience‚Äù literature that tries to sidestep that last part. Instead of asking people to estimate a number, what those studies do is allow people to make ordinary decisions (e.g., choose the thing that is more common) and then use those decisions to work out what knowledge people implicitly possess. When you design the studies that way, the data you get look veeerrrrrry different. Sometimes the direction of the apparent miscalibration reverses entirely: in a lot of those studies it looks like people <strong>underestimate</strong> the frequency of rare categories, not overestimate it. Of course, that might not be an error either: the logic of those tasks is very different to the logic of a probability judgment task, and to unpack the patterns we see in those experiments would be a whole separate blog post.</p>
<p>Psychology, it turns out, is hard.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/message.jpg" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>Source: <a href="https://bookgun.com/">bookgun.com</a></figcaption>
</figure>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I mean‚Ä¶ look, estimates of this vary quite substantially, and it depends a lot on the on methodology, and dear lord it really hard to quantify that sort of thing but as a ballpark figure, yes, 1% is pretty reasonable. Let‚Äôs just accept it as true‚Ü©Ô∏é</p></li>
<li id="fn2"><p>Before my rather bizarre pivot to become a pharmacometrician, that is‚Ü©Ô∏é</p></li>
<li id="fn3"><p>On the off chance that this post is read by people outside my circles and someone wants to tell me off for using the word ‚Äùtrannnnnsssexual‚Äù‚Ä¶ I‚Äôm a trans woman, I‚Äôve been publicly out as a trans woman for well over a decade now, and I use the term ‚Äùtranssexuals‚Äù with love. It is a self-deprecating in-joke that we trannies use sometimes when talking about ourselves. Calm the fuck down.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>Yes, even Americans.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>As always there is some nuance here, and this blog post is not the place to go into it. But I will point folks towards this lovely paper by <a href="https://doi.org/10.1073/pnas.2413064122">Guay et al (2024)</a> that does start to unpack the nuances.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>Amos Tversky in particular is one of my scientific idols. The largest part of my PhD thesis involved me picking a fight with <em>one</em> equation he wrote in the Appendix to a paper in 1977 (the year I was born): I think his core insight was correct but he framed it the wrong way, but he did so in such a precise way that it was possible for me to carefully quibble with him many years after his death. Amazing scientist. One of the finest minds psychology has been blessed with.‚Ü©Ô∏é</p></li>
<li id="fn7"><p>Seriously, if you even <em>think</em> of coming at me to talk about Prelec weight functions I will <em>cut</em> you.‚Ü©Ô∏é</p></li>
<li id="fn8"><p>Though it goes by a few different names‚Ü©Ô∏é</p></li>
<li id="fn9"><p>I mean, I personally have dozens of data sets buried in my academic archive that would let me tear this one to shreds, but I won‚Äôt need to break them out because the YouGov data is already rich enough to disprove this theory.‚Ü©Ô∏é</p></li>
<li id="fn10"><p>For one thing, the model doesn‚Äôt account for the fact that people don‚Äôt use numbers ‚Äúliterally‚Äù in these sorts of surveys. It is vanishingly rare for someone to respond with something like ‚Äú22.3%‚Äù. People use numbers like ‚Äú50%‚Äù and ‚Äú20%‚Äù, and when they do that the numbers aren‚Äôt literally intended to be interpreted as proportions: when someone says ‚Äú50%‚Äù what they actually mean is often ‚ÄúI have no idea whatsoever‚Äù, and when they say ‚Äú20%‚Äù what they mean is ‚ÄúI don‚Äôt know but I think it‚Äôs small‚Äù. Once you start digging into these sorts of data at the individual response level, these patterns really do start to matter. I‚Äôm not going to talk about that in this post though.‚Ü©Ô∏é</p></li>
<li id="fn11"><p>Throughout this post I‚Äôm assuming that the calibration function is linear, but there are very good reasons to expect a nonlinear shape to emerge in some kinds of data ‚Äì in a lot of cases what you actually see in the wild is that when the probability gets extremely close to 0% or 100% the curve bends back and people are perfectly calibrated at the endpoints. This happens when you start including questions like ‚Äúwhat proportion of the human population is taller than 6m?‚Äù The correct answer to that question is 0% and <strong>everybody</strong> gets that one correct. The only way people make errors is if they accidentally press the wrong button or if they deliberately lie. In general, calibration is perfect whenever everyone knows ‚Äúimpossible thing is impossible‚Äù or ‚Äúcertain thing is certain‚Äù. That phenomenon alone creates nonlinearities. But the YouGov survey doesn‚Äôt cover those kinds of cases, and for our purposes it will be sufficient to ignore the nuances and just pretend that the calibration function is linear.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {Some Notes on Probability Judgement},
  date = {2025-09-21},
  url = {https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúSome Notes on Probability
Judgement.‚Äù</span> September 21, 2025. <a href="https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/">https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Psychology</category>
  <guid>https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/</guid>
  <pubDate>Sat, 20 Sep 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-09-21_probability-judgement/message.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Linear cosine palettes</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>So. Looking back at my history on this blog I have noticed that I, ummmmmm, tend to write long posts. It is a character flaw of which I am acutely aware. When I want to understand a thing I feel a kind of psychological compulsion to delve too deeply into the darkness, dive into to as many of the specifics as I possibly can, organise my thoughts around those specifics, and then drag the whole cursed mess into the daylight so that my long-suffering readers can look on in horror at the grotesquerie of my inner world.</p>
<p>I am aware that this is perhaps unwise.</p>
<p>Reflecting on this as a personal weakness, I have set myself a challenge this fine Sunday: is it even possible for me to write a simple blog post? Like, is it even possible for a mediocre bitch to write a short goddamn article without turning it into some macabre monograph? Given my past form, it is not at all obvious that I‚Äôm capable of this level of self-restraint. Let‚Äôs see if I can do it?</p>
<section id="linear-cosine-palettes" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="linear-cosine-palettes">Linear cosine palettes</h2>
<p>The motivation came from this <a href="https://fosstodon.org/@coolbutuseless/115173701685084866">mastodon post</a> by Mike Cheng proposing a simple method for randomly generating continuous colour palettes in R. The original idea comes from a blog post by Inigo Quilez on <a href="https://iquilezles.org/articles/palettes/">simple procedural palettes</a>, and the idea is painfully simple. Let‚Äôs say we have length-3 vectors <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Ba%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bb%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bc%7D">, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bd%7D"> representing four ‚Äúbase‚Äù colours from which a continous palette is to be generated. In R we could choose these base colours using the <code>colors()</code> function. Once these are selected we can define a smooth palette using the following function</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(t)%20=%20%5Cmathbf%7Ba%7D%20+%20%5Cmathbf%7Bb%7D%20%5C%20%5Ccos(2%20%5Cpi(%5Cmathbf%7Bc%7D%20t%20+%20%5Cmathbf%7Bd%7D))%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?t"> is varied from 0 to 1. The nice thing about this paletting rule is that it can be very fast, especially since ‚Äì I am told by people who understand such things ‚Äì there are a <em>lot</em> of optimisations in modern CPUs and GPUs to make cosine evaluation fast. Admittedly, speed is not something I care about much in my generative art work because palette generation is not even close to being a bottleneck in my code and also I‚Äôm lazy.</p>
<p>Okay, so here‚Äôs an R function that implements a very minor tweak on Mike‚Äôs implementation of Inigo Quilez‚Äô cosine palettes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">cosine_palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(base)) base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colors</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">distinct =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-4">  a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-5">  b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(base, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col2rgb</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb1-6">  c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(base, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col2rgb</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb1-7">  d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(base, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col2rgb</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb1-8">  pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb1-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n), </span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(t) a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d)), </span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-12">  )</span>
<span id="cb1-13">  pal[pal <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(pal)))</span>
<span id="cb1-15">}</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cosine_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "#7F1616" "#6F1A17" "#362A20" "#22442F" "#8A6642" "#F18A5A" "#FFAD74"
 [8] "#FFCB8F" "#FFE0A9" "#FFE9C0" "#FFE6D3" "#AAD6E1" "#40BDE8" "#1F9CE9"
[15] "#6377E3" "#7F54D6"</code></pre>
</div>
</div>
<p>That‚Äôs nice, but as my visual cortex is not optimised for the interpretation of hexadecimal RGB colour codes, I find it convenient to show palettes using‚Ä¶ check notes‚Ä¶ images? Yes. Yes, that sounds right. To that end I‚Äôll use this <code>shade_strip()</code> that I sometimes use to display a continuously varying palette as a strip:</p>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">shade_strip <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(cols) {</span>
<span id="cb3-2">  withr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_par</span>(</span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)),</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(cols), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> cols, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb3-5">  )</span>
<span id="cb3-6">}</span>
<span id="cb3-7"></span>
<span id="cb3-8">seeds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span></span>
<span id="cb3-9">seeds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-10">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(s) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cosine_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> s)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-11">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(shade_strip)</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="4">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-1.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-2.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-3.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-4.png" class="img-fluid" width="768"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-5.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-6.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-7.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-8.png" class="img-fluid" width="768"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-9.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-10.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-11.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/palette-examples-12.png" class="img-fluid" width="768"></p>
</div>
</div>
</div>
<p>I wanted to get a sense of how well these palettes might behave if applied in a generative art system, so I chose 12 sequential seeds. The sequence starts at <code>seed = 11</code> because I happened to like the first piece that was generated using that palette, but apart from that minor intervention I haven‚Äôt tried to ‚Äúhack‚Äù the seed to bias the outputs.</p>
</section>
<section id="application-to-generative-art" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="application-to-generative-art">Application to generative art</h2>
<p>To get a feel for how these palettes behave when used in generative art, here are some pieces created using them. These pieces are created using the <code>subdivision()</code> system that I wrote about as part of the <a href="../../posts/2024-12-23_art-from-code-6/">art from code</a> workshop I gave a few years ago.</p>
<div class="cell">
<details class="code-fold">
<summary>Code for subdivision()</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">choose_rectangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(blocks) {</span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(blocks), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> blocks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>area)</span>
<span id="cb4-3">}</span>
<span id="cb4-4"></span>
<span id="cb4-5">choose_break <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(lower, upper) {</span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>((upper <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lower) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-7">}</span>
<span id="cb4-8"></span>
<span id="cb4-9">create_rectangles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(left, right, bottom, top, value) {</span>
<span id="cb4-10">  tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">left =</span> left,</span>
<span id="cb4-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">right =</span> right,</span>
<span id="cb4-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bottom =</span> bottom,</span>
<span id="cb4-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top =</span> top,</span>
<span id="cb4-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> right <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> left,</span>
<span id="cb4-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> top <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bottom,</span>
<span id="cb4-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">area =</span> width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> height,</span>
<span id="cb4-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> value</span>
<span id="cb4-19">  )</span>
<span id="cb4-20">}</span>
<span id="cb4-21"></span>
<span id="cb4-22">split_rectangle_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, new_value) {</span>
<span id="cb4-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(rectangle, {</span>
<span id="cb4-24">    split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_break</span>(left, right)</span>
<span id="cb4-25">    new_left  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(left, left <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split)</span>
<span id="cb4-26">    new_right <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(left <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split, right)</span>
<span id="cb4-27">    new_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(value, new_value)</span>
<span id="cb4-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(new_left, new_right, bottom, top, new_value)</span>
<span id="cb4-29">  })</span>
<span id="cb4-30">}</span>
<span id="cb4-31"></span>
<span id="cb4-32">split_rectangle_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, new_value) {</span>
<span id="cb4-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(rectangle, {</span>
<span id="cb4-34">    split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_break</span>(bottom, top)</span>
<span id="cb4-35">    new_bottom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(bottom, bottom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split)</span>
<span id="cb4-36">    new_top <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(bottom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split, top)</span>
<span id="cb4-37">    new_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(value, new_value)</span>
<span id="cb4-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(left, right, new_bottom, new_top, new_value)</span>
<span id="cb4-39">  })</span>
<span id="cb4-40">}</span>
<span id="cb4-41"></span>
<span id="cb4-42">split_rectangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, value) {</span>
<span id="cb4-43">  split_fn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, split_rectangle_x, split_rectangle_y)</span>
<span id="cb4-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_fn</span>(rectangle, value)</span>
<span id="cb4-45">}</span>
<span id="cb4-46"></span>
<span id="cb4-47">split_block <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(blocks, value) {</span>
<span id="cb4-48">  old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_rectangle</span>(blocks) </span>
<span id="cb4-49">  new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle</span>(blocks[old, ], value)</span>
<span id="cb4-50">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(blocks[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>old, ], new)</span>
<span id="cb4-51">}</span>
<span id="cb4-52"></span>
<span id="cb4-53">subdivision <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb4-54">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb4-55">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,</span>
<span id="cb4-56">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, </span>
<span id="cb4-57">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb4-58">  </span>
<span id="cb4-59">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb4-60"></span>
<span id="cb4-61">  pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cosine_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed)</span>
<span id="cb4-62"></span>
<span id="cb4-63">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(border)) border <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pal[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>]</span>
<span id="cb4-64"></span>
<span id="cb4-65">  rct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(</span>
<span id="cb4-66">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">left =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb4-67">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">right =</span> ncol, </span>
<span id="cb4-68">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bottom =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb4-69">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top =</span> nrow, </span>
<span id="cb4-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-71">  )</span>
<span id="cb4-72"></span>
<span id="cb4-73">  div <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>(</span>
<span id="cb4-74">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nsplits, </span>
<span id="cb4-75">    split_block, </span>
<span id="cb4-76">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> rct</span>
<span id="cb4-77">  )</span>
<span id="cb4-78"></span>
<span id="cb4-79">  plt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> div <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-80">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb4-81">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> left, </span>
<span id="cb4-82">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> right, </span>
<span id="cb4-83">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> bottom, </span>
<span id="cb4-84">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> top,</span>
<span id="cb4-85">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> value</span>
<span id="cb4-86">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-87">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rect</span>(</span>
<span id="cb4-88">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb4-89">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> border,</span>
<span id="cb4-90">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-91">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-92">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> pal) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-93">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mult =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-94">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mult =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-95">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-96">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-97">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(</span>
<span id="cb4-98">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> border,</span>
<span id="cb4-99">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> border</span>
<span id="cb4-100">    ))</span>
<span id="cb4-101"></span>
<span id="cb4-102">  plt</span>
<span id="cb4-103">}</span></code></pre></div>
</details>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">seeds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(\(s) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subdivision</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> s)))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="4">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-1.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-2.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-3.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-4.png" class="img-fluid" width="768"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-5.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-6.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-7.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-8.png" class="img-fluid" width="768"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-9.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-10.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-11.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/subdivision-examples-12.png" class="img-fluid" width="768"></p>
</div>
</div>
</div>
<p>Not too bad at all. Some of the pieces are pretty awful, a few of them are lovely, and most are okay. Given that I‚Äôve made no attempt at all to optimise the way that palette aligns with the structure of the pieces, that‚Äôs not a bad outcome at all.</p>
<p>As a second example, here‚Äôs a series of pieces based on the <a href="https://art.djnavarro.net/gallery/lissajous/">lissajous</a> system, all using the same palettes:</p>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">seeds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(\(s) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lissajous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> s))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="4">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-1.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-2.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-3.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-4.png" class="img-fluid" width="768"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-5.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-6.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-7.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-8.png" class="img-fluid" width="768"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-9.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-10.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-11.png" class="img-fluid" width="768"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/index_files/figure-html/lissajous-examples-12.png" class="img-fluid" width="768"></p>
</div>
</div>
</div>
<p>Also pretty tolerable. In any specific application I‚Äôd probably want to tinker a bit and adapt to the specific aesthetic that the system is targeting, but I‚Äôm not displeased at all. For something so simple it works better than I expected. Okay, all good. We‚Äôre done now. Post completed, nothing else to add. Somehow I have managed to write a <em>short</em> blog post without turning it into a computational novella, and the whole exercise only took a few hours from beginning to end. üéâ</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {Linear Cosine Palettes},
  date = {2025-09-14},
  url = {https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúLinear Cosine Palettes.‚Äù</span>
September 14, 2025. <a href="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/">https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/</guid>
  <pubDate>Sat, 13 Sep 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-09-14_cosine-palettes/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>GAMLSS, NHANES, and my own personal hell</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-09-07_gamlss/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Okay, so <a href="../../posts/2025-08-02_box-cox-power-exponential/">two posts ago</a> I was whining about the Box-Cox power exponential distribution, and promising that it would be followed by a new post whining about the <a href="https://en.wikipedia.org/wiki/Generalized_additive_model_for_location,_scale_and_shape">generalised additive model for location, shape and scale</a> (GAMLSS). It turns out I was lying because I had to set time aside and write a separate whiny <a href="../../posts/2025-09-06_p-splines/">post about penalized splines</a> and promising it would be followed by a post whining about GAMLSS.</p>
<p>This is that post.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-07_gamlss/agnes-enid.jpg" class="img-fluid figure-img"></p>
<figcaption>Frankly, I deserve applause for simply getting this post finished. Whether it is any good is entirely an ancillary matter, one that we shall not be concerned with in these pages.</figcaption>
</figure>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>My introduction to GAMLSS models came from a problem that is easy to state, and strangely difficult to solve. If you know a person‚Äôs age <img src="https://latex.codecogs.com/png.latex?a"> and their sex <img src="https://latex.codecogs.com/png.latex?s">, describe (and sample from) the joint distribution over height <img src="https://latex.codecogs.com/png.latex?h"> and weight <img src="https://latex.codecogs.com/png.latex?w"> for people of that age and sex. That is, estimate the following distribution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(h,%20w%20%7C%20a,%20s)%0A"></p>
<p>If you don‚Äôt think very hard this doesn‚Äôt seem like it should be very difficult. Data sets containing age, sex, height and weight are not too difficult to find. The question doesn‚Äôt ask for any fancy longitudinal modelling: all we‚Äôre being asked to do is estimate a probability distribution. Not difficult at all. It‚Äôs a problem I‚Äôve encountered several times in my pharmacometric work ‚Äì very commonly, we have to run simulations to explore the expected distribution of drug exposures among a population of patients that varies in weight, height, age, and sex ‚Äì so it‚Äôs one I‚Äôve had to think about a few times now, and it‚Äôs a trickier than it looks. Typically we have to rely on fairly large population survey data sets (e.g.&nbsp;NHANES) and sophisticated regression models (e.g.&nbsp;GAMLSS), and I will confess that neither of these two things were covered in my undergraduate classes.</p>
<p>It‚Äôs been a rather steep learning curve, and in keeping with my usual habit, I decided it might be wise to write up some notes. I know with a dread certainty that I‚Äôll have to use this knowledge again in a few months, and given how awful my memory is these days I‚Äôd prefer not to have to relearn the whole thing from the beginning next time.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(fs)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(haven)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gamlss)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(quartose)</span></code></pre></div>
</div>
</section>
<section id="the-nhanes-data" class="level2">
<h2 class="anchored" data-anchor-id="the-nhanes-data">The NHANES data</h2>
<p>The data set I‚Äôll look at in this post comes from the <a href="https://www.cdc.gov/nchs/nhanes/">National Health and Nutrition Examination Survey</a> (NHANES), a large ongoing study conducted under the auspices of the United States <a href="https://www.cdc.gov/nchs/nhanes/">Center for Disease Control</a> (CDC). The program started in the 1960s, but the data set that is conventionally called ‚Äúthe NHANES data set‚Äù refers to the <em>continuous</em> data set that has been collected since 1999, with updates released every couple of years with approximately 5000 participants added each year. The data collection process is quite extensive. As described on the website, it includes:</p>
<blockquote class="blockquote">
<ul>
<li>Interviews about health, diet, and personal, social, and economic characteristics</li>
<li>Visits to our mobile exam center for dental exams and health and body measurements</li>
<li>Laboratory tests by highly trained medical professionals</li>
</ul>
</blockquote>
<p>For any given participant, records are split across several data files. For instance, the <a href="https://wwwn.cdc.gov/nchs/nhanes/search/datapage.aspx?Component=Examination">body measurements</a> table contains very typical measurements such as height and weight, but also includes variables like waist circumference, thigh circumference, and so on. The <a href="https://wwwn.cdc.gov/nchs/nhanes/search/datapage.aspx?Component=Demographics">demographics</a> table data includes information like age, sex, and so forth. These are the only two tables I‚Äôll use in this post, but there are a great many others also: you can find blood pressure data, audiometry data, various clinical measurements, and so on. It‚Äôs a very handy data set used for a variety of purposes, not least of which is the fact that NHANES data are used to build the <a href="https://www.cdc.gov/growthcharts">CDC growth charts</a> that are themselves used for a wide range of scientific and medical purposes. In my own work as a newly-minted pharmacometrician I‚Äôve needed to rely on the NHANES data and/or CDC growth charts in several projects over the last couple of years, and for that reason I‚Äôve found it useful to dive into the data set quite a few times.</p>
<p>As of the most recent release, the summaries below list the file names the body measurement (BMX) and demographics (DEMO) tables:</p>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">metadata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>( </span>
<span id="cb2-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">BMX  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bmx-summary.csv"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>),</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DEMO =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo-summary.csv"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) </span>
<span id="cb2-4">)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_tabset</span>(metadata, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">BMX</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">DEMO</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<pre> 
# A tibble: 12 √ó 3 
   file_bmx  cohort    description   
   <chr>     <chr>     <chr>         
 1 BMX.xpt   1999-2000 body measures 
 2 BMX_B.xpt 2001-2002 body measures 
 3 BMX_C.xpt 2003-2004 body measures 
 4 BMX_D.xpt 2005-2006 body measures 
 5 BMX_E.xpt 2007-2008 body measures 
 6 BMX_F.xpt 2009-2010 body measures 
 7 BMX_G.xpt 2011-2012 body measures 
 8 BMX_H.xpt 2013-2014 body measures 
 9 BMX_I.xpt 2015-2016 body measures 
10 BMX_J.xpt 2017-2018 body measures 
11 BMX_L.xpt 2021-2023 body measures 
12 P_BMX.xpt 2017-2020 body measures 
</chr></chr></chr></pre>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<pre> 
# A tibble: 12 √ó 3 
   file_demo  cohort    description                     
   <chr>      <chr>     <chr>                           
 1 DEMO.xpt   1999-2000 demographics and sample weights 
 2 DEMO_B.xpt 2001-2002 demographics and sample weights 
 3 DEMO_C.xpt 2003-2004 demographics and sample weights 
 4 DEMO_D.xpt 2005-2006 demographics and sample weights 
 5 DEMO_E.xpt 2007-2008 demographics and sample weights 
 6 DEMO_F.xpt 2009-2010 demographics and sample weights 
 7 DEMO_G.xpt 2011-2012 demographics and sample weights 
 8 DEMO_H.xpt 2013-2014 demographics and sample weights 
 9 DEMO_I.xpt 2015-2016 demographics and sample weights 
10 DEMO_J.xpt 2017-2018 demographics and sample weights 
11 DEMO_L.xpt 2021-2023 demographics and sample weights 
12 P_DEMO.xpt 2017-2020 demographics and sample weights 
</chr></chr></chr></pre>
</div>
</div>
</div>
<p>As you can see from the summaries, the data sets are released as SAS transport (i.e., XPT) files, with letters used to represent each data cut. In principle these should go from ‚ÄúA‚Äù (data from the 1999-2000 cohort) through to ‚ÄúL‚Äù (data from the 2021-2023 cohort), but that‚Äôs not precisely what happens. The original release (which ostensibly should be the ‚ÄúA‚Äù data cut) doesn‚Äôt have a label, and the ‚ÄúK‚Äù data cut is missing entirely due to the COVID-19 pandemic. In its place there is a ‚ÄúP‚Äù version of data set that breaks the file naming scheme, presumably short for ‚Äúpandemic‚Äù, and labelled differently to highlight that data from that release might be a little strange I suppose.</p>
<section id="importing-the-data" class="level3">
<h3 class="anchored" data-anchor-id="importing-the-data">Importing the data</h3>
<p>To explore the NHANES data, we can download all these files and load them into R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all demographics and body measurement files</span></span>
<span id="cb3-2">demo_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo"</span>))</span>
<span id="cb3-3">bmx_files  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bmx"</span>))</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read demographics file (selected variables only)</span></span>
<span id="cb3-6">demos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> demo_files <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(xx) {</span>
<span id="cb3-8">    dd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xpt</span>(xx) </span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RIDEXAGM"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">where =</span> dd)) dd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>RIDEXAGM <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span></span>
<span id="cb3-10">    dd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(dd, SEQN, RIAGENDR, RIDAGEYR, RIDAGEMN, RIDEXAGM)</span>
<span id="cb3-11">    dd</span>
<span id="cb3-12">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file_demo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file_demo =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_file</span>(file_demo)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(metadata<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DEMO, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file_demo"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>description)</span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read body measurements file (selected variables only)</span></span>
<span id="cb3-19">bmxes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bmx_files <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(xx) {</span>
<span id="cb3-21">    dd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xpt</span>(xx) </span>
<span id="cb3-22">    dd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(dd, SEQN, BMXWT, BMXHT, BMXRECUM)</span>
<span id="cb3-23">    dd</span>
<span id="cb3-24">}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file_bmx"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file_bmx =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_file</span>(file_bmx)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(metadata<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>BMX, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file_bmx"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>description)</span></code></pre></div>
</div>
<p>Looking at the code above, you can see that I haven‚Äôt included <em>all</em> the columns from the BMX and DEMO tables, only the ones that are most relevant to my purposes. My <code>demos</code> and <code>bmxes</code> data frames are considerably smaller than they would be if I included everything. Importantly for our purposes the <code>SEQN</code> column serves as an id variable, and we can use it to join the tables. In the code below I‚Äôm using <code>left_join(bmxes, demos)</code> to do the work because I‚Äôm only really interested in those cases where the body measurement data exists, and I‚Äôm tidying the column names a little for the sake of my sanity:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">nhanes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bmxes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(demos, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SEQN"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cohort"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id          =</span> SEQN,</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_s       =</span> RIAGENDR, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sex/gender at screen (1 = M, 2 = F, . = NA)</span></span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight_kg_e =</span> BMXWT,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weight at exam</span></span>
<span id="cb4-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_cm_e =</span> BMXHT,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standing height at exam</span></span>
<span id="cb4-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length_cm_e =</span> BMXRECUM, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recumbent length at exam (0-47 months only)</span></span>
<span id="cb4-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_yr_s    =</span> RIDAGEYR, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># natal age at screening (years)</span></span>
<span id="cb4-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_mn_s    =</span> RIDAGEMN, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># natal age at screening (months; 0-24 mos only)</span></span>
<span id="cb4-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_mn_e    =</span> RIDEXAGM, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># natal age at exam (months; 0-19 years only)</span></span>
<span id="cb4-12">    cohort</span>
<span id="cb4-13">  )</span>
<span id="cb4-14"></span>
<span id="cb4-15"> nhanes</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 119,926 √ó 9
      id sex_s weight_kg_e height_cm_e length_cm_e age_yr_s age_mn_s
   &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1     1     2        12.5        91.6        93.2        2       29
 2     2     1        75.4       174          NA         77      926
 3     3     2        32.9       137.         NA         10      125
 4     4     1        13.3        NA          87.1        1       22
 5     5     1        92.5       178.         NA         49      597
 6     6     2        59.2       162          NA         19      230
 7     7     2        78         163.         NA         59      712
 8     8     1        40.7       162          NA         13      159
 9     9     2        45.5       157.         NA         11      133
10    10     1       112.        190.         NA         43      518
# ‚Ñπ 119,916 more rows
# ‚Ñπ 2 more variables: age_mn_e &lt;dbl&gt;, cohort &lt;chr&gt;</code></pre>
</div>
</div>
<p>Very nice indeed.</p>
</section>
<section id="preprocessing-choices" class="level3">
<h3 class="anchored" data-anchor-id="preprocessing-choices">Preprocessing choices</h3>
<p>Even with the small snippet shown above you can see hints of nuances that arise when working with the NHANES data, especially if pediatric age ranges are of interest (as they very often are for me). Suppose one of the variables of interest in your analysis is height. On row 4 we have data from a 22 month old boy: there is no height measurement for him. That‚Äôs very often the case for young infants, most obviously because very young infants can‚Äôt stand up so you can‚Äôt measure standing height. What you <em>can</em> do for those infants is take a related measurement: recumbent length. Okay that makes sense: you measure height for adults, and length for babies. Except‚Ä¶ there are some kids in the age range where it makes sense to take <em>both</em> measurements. Row 1 contains data from a 29 month old girl, who was measured as 91.6cm in height and‚Ä¶ 93.2cm in length.</p>
<p>Ah.</p>
<p>Right. The height of a standing human and the length of the same human lying down don‚Äôt have to be the same, and the differences between the two won‚Äôt be random measurement error, because gravity and posture are real things that exist! The NHANES data itself illustrates that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">ok <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)</span>
<span id="cb6-2">nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(height_cm_e), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(length_cm_e)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb6-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_diff =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(length_cm_e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> height_cm_e),</span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd_diff =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(length_cm_e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> height_cm_e)</span>
<span id="cb6-7">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 √ó 2
  mean_diff sd_diff
      &lt;dbl&gt;   &lt;dbl&gt;
1      1.06   0.998</code></pre>
</div>
</div>
<p>So, when considering what <em>height</em> to use for the boy in row 4, it‚Äôs not necessarily a good idea to substitute his <em>length</em>, because those probably aren‚Äôt the same. An imputation procedure of some kind is needed. I won‚Äôt go into it in this post, but I played around with a few possible models for predicting length from height in the process of writing it, and in the end concluded that nothing fancy is needed here. A simple adjustment will suffice:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">length_to_height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(length_cm) {</span>
<span id="cb8-2">  length_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.06</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adjust based on average difference in NHANES</span></span>
<span id="cb8-3">}</span></code></pre></div>
</div>
<p>It feels a bit silly writing a function for this conversion, but it‚Äôs helpful from a documentation purpose: creating a dummy function to use (rather than just subtracting 1.06 later in the code) makes it clear to the reader that I <em>am</em> using some kind of explicit conversion when I transform length to height, and the comment provides a little extra detail on how I chose the conversion rule.</p>
<p>Similar nuances for other measurements exist. There are three different measurements that record age, and they don‚Äôt have to be in agreement: the <em>survey</em> takes place at a different point in time to the <em>exam</em>, so it‚Äôs possible that the (now relabelled) <code>age_mn_e</code> and <code>age_mn_s</code> variables are different. Age in years at the time of the survey <code>age_yr_s</code> should presumably be consistent with the age in months at the time of the survey, but data aren‚Äôt always straightforward. Given all this, the preprocessing steps used to create measurements of age and height look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">nhanes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb9-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_num =</span> sex_s <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rescale to 0 = M, 1 = F</span></span>
<span id="cb9-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_fct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex_s, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>)),</span>
<span id="cb9-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_mn =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb9-6">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(age_mn_e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> age_mn_e, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use exam months if present</span></span>
<span id="cb9-7">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(age_mn_s) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> age_mn_s, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else use survey months</span></span>
<span id="cb9-8">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> (age_yr_s <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else use age in years</span></span>
<span id="cb9-9">    ),</span>
<span id="cb9-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_yr    =</span> age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb9-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight_kg =</span> weight_kg_e,</span>
<span id="cb9-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_cm =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb9-13">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(height_cm_e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> height_cm_e, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use height if it was measured</span></span>
<span id="cb9-14">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(length_cm_e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length_to_height</span>(length_cm_e), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or convert length</span></span>
<span id="cb9-15">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else missing</span></span>
<span id="cb9-16">    )</span>
<span id="cb9-17">  )</span></code></pre></div>
</div>
<p>The NHANES data set doesn‚Äôt include information about transgender status or intersex status (at least not in the demographics and body measurements tables), and so for the purposes of NHANES-based analyses sex is a treated as binary variable, and doesn‚Äôt require any extra steps beyond tidying and attaching nice labels. A similar story holds for weight: we have one measurement, the weight at time of exam, and that‚Äôs what we‚Äôll use.</p>
<p>At this point the unwary might fall into the trap of thinking that we‚Äôre done, but ‚Äì alas ‚Äì we aren‚Äôt quite there yet. There‚Äôs one more detail to consider regarding the age data. In the NHANES data set the age values stop at 80, but that value doesn‚Äôt literally mean ‚Äú80 years‚Äù it means ‚Äú80 years or older‚Äù. Because of that, you need to take some care in how you work with data for older participants. As it happens, I‚Äôve never had to deal with this in the wild because my projects have used NHANES data in the pediatric setting. Given that, I‚Äôll keep it simple here and just drop all cases with age recorded as ‚Äú80+‚Äù years. Not a problem if your application is pediatric, but you wouldn‚Äôt want to do this in situations where you‚Äôre interested in older populations.</p>
<p>In any case, having noted this I can finally complete the preprocessing and arrive at my <code>nhanes</code> data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">nhanes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, sex_num, sex_fct, weight_kg, height_cm, age_mn, age_yr, cohort) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(sex_num), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(weight_kg), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(height_cm), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ok</span>(age_mn)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6">nhanes</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 113,319 √ó 8
      id sex_num sex_fct weight_kg height_cm age_mn age_yr cohort   
   &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;       &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;    
 1     1       1 female       12.5      91.6     29   2.42 1999-2000
 2     2       0 male         75.4     174      926  77.2  1999-2000
 3     3       1 female       32.9     137.     125  10.4  1999-2000
 4     4       0 male         13.3      86.0     22   1.83 1999-2000
 5     5       0 male         92.5     178.     597  49.8  1999-2000
 6     6       1 female       59.2     162      230  19.2  1999-2000
 7     7       1 female       78       163.     712  59.3  1999-2000
 8     8       0 male         40.7     162      159  13.2  1999-2000
 9     9       1 female       45.5     157.     133  11.1  1999-2000
10    10       0 male        112.      190.     518  43.2  1999-2000
# ‚Ñπ 113,309 more rows</code></pre>
</div>
</div>
<p>A small slice through a very large data set, but one that contains the four variables that I need almost every time I have to use NHANES data in a pharmacometric analysis: <code>age_mn</code> (<img src="https://latex.codecogs.com/png.latex?a">), <code>sex_fct</code> (<img src="https://latex.codecogs.com/png.latex?s">), <code>height_cm</code> (<img src="https://latex.codecogs.com/png.latex?h">), and <code>weight_kg</code> (<img src="https://latex.codecogs.com/png.latex?w">). I can now turn to the substantive statistical problem: estimating the joint conditional density <img src="https://latex.codecogs.com/png.latex?p(h,%20w%20%7C%20a,%20s)">.</p>
<p>Before I move on though, I do want to add one note of caution, one that I forgot to include in the original version of this post: the NHANES study isn‚Äôt a simple random sample, and the sampling design is complicated. As such, care is required in how the data are used and this often requires taking the sample weights into account. I haven‚Äôt done so here, because this post is already exhaustingly long and the topic is nuanced enough that it deserves to be its own post, but I‚Äôll mention that <a href="https://wwwn.cdc.gov/nchs/nhanes/tutorials/sampledesign.aspx">accounting for study design</a> is discussed on the NHANES website. (Also, thanks to both Thomas Lumley and Benjamin Rich for asking about this issue, which reminded me that I hadn‚Äôt actually talked about this and prompted me to add this paragraph!)</p>
</section>
</section>
<section id="the-gamlss-framework" class="level2">
<h2 class="anchored" data-anchor-id="the-gamlss-framework">The GAMLSS framework</h2>
<section id="structural-model" class="level3">
<h3 class="anchored" data-anchor-id="structural-model">Structural model</h3>
<p>Let <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7By%7D_i%20=%20E%5By_i%7Cx_%7Bi1%7D,%20%5Cldots,%20x_%7Bip%7D%5D"> denote the expected value of (the <img src="https://latex.codecogs.com/png.latex?i">-th observation of) the outcome variable <img src="https://latex.codecogs.com/png.latex?y">, conditioned on knowing the values of <img src="https://latex.codecogs.com/png.latex?p"> predictor variables <img src="https://latex.codecogs.com/png.latex?x_%7B1%7D,%20%5Cldots,%20x_%7Bp%7D">. In linear regression we propose that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctilde%7By%7D_i%20=%20%5Cbeta_0%20+%20%5Csum_%7Bk=1%7D%5Ep%20%5Cbeta_k%20%5C%20x_%7Bik%7D%0A"></p>
<p>Often we would rewrite this in matrix notation and express it as <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7B%5Cmathbf%7By%7D%7D%20=%20%5Cmathbf%7BX%7D%20%5Cmathbf%7B%5Cbeta%7D"> to make it look pretty, but I honestly don‚Äôt think it adds much in this context. There are two different paths you could pursue when extending this framework: you could change something on the left hand side, or you could change something on the right hand side. For example, the <a href="https://en.wikipedia.org/wiki/Generalized_linear_model">generalised linear model</a> introduced by <a href="https://www.jstor.org/stable/2344614">Nelder and Wedderburn (1972)</a> modifies the linear model by supplying a ‚Äúlink function‚Äù <img src="https://latex.codecogs.com/png.latex?g()"> that transforms <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7By%7D">,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag(%5Ctilde%7By%7D_i)%20=%20%5Cbeta_0%20+%20%5Csum_%7Bk=1%7D%5Ep%20%5Cbeta_k%20%5C%20x_%7Bik%7D%0A"></p>
<p>Crudely put, the GLM applies a linear model to a transformed <strong>outcome</strong> variable (i.e., <img src="https://latex.codecogs.com/png.latex?y">). On the other hand, in the <a href="https://en.wikipedia.org/wiki/Additive_model">additive model</a> proposed by <a href="https://www.tandfonline.com/doi/abs/10.1080/01621459.1981.10477729">Friedman and Stuetzle (1981)</a>, transformation functions <img src="https://latex.codecogs.com/png.latex?f()"> ‚Äì sometimes called ‚Äúsmoothing functions‚Äù ‚Äì are applied to the <strong>predictor</strong> variables (i.e., <img src="https://latex.codecogs.com/png.latex?x">):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctilde%7By%7D_i%20=%20%5Cbeta_0%20+%20%5Csum_%7Bk=1%7D%5Ep%20f_k(x_%7Bik%7D)%0A"></p>
<p>I‚Äôll talk more about the choice of smoothing function <img src="https://latex.codecogs.com/png.latex?f()"> later in the post, but for now the key thing to note is that the functions used for this purpose usually have free parameters that need to be estimated from the data. Because of this, fitting an additive model is a little more complicated than a simple ‚Äútransform the predictors first and then fit a linear regression later‚Äù procedure.</p>
<p>In any case, having noted that <strong>generalised</strong> linear models introduce the link function <img src="https://latex.codecogs.com/png.latex?g()"> and <strong>additive</strong> models introduce the smoothing functions <img src="https://latex.codecogs.com/png.latex?f()">, it seems natural to consider a modelling framework that uses both of these things. That framework exists: it is called the <a href="https://en.wikipedia.org/wiki/Generalized_additive_model">generalised additive model</a> (GAM), introduced by <a href="https://www.jstor.org/stable/2245459">Hastie and Tibshirani (1990)</a>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag(%5Ctilde%7By%7D_i)%20=%20%5Cbeta_0%20+%20%5Csum_%7Bk=1%7D%5Ep%20f_k(x_%7Bik%7D)%0A"></p>
</section>
<section id="measurement-model" class="level3">
<h3 class="anchored" data-anchor-id="measurement-model">Measurement model</h3>
<p>In linear model with homogeneity of variance, we normally write this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20=%20%5Ctilde%7By%7D_i%20+%20%5Cepsilon_i%0A"></p>
<p>where the measurement error terms <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i"> are assumed to be normally distributed with mean fixed at 0 and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma"> estimated from the data. Another way to express the same idea would be to say that the outcome variable <img src="https://latex.codecogs.com/png.latex?y_i"> is normally distributed with mean <img src="https://latex.codecogs.com/png.latex?%5Cmu_i%20=%20%5Ctilde%7By%7D_i">, and a constant standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%20=%20%5Csigma">. Taking this line of reasoning a little further, we could rewrite the model in terms of <em>two</em> regression models: a linear model for the mean <img src="https://latex.codecogs.com/png.latex?%5Cmu">, and another linear model for the standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmu_i%20&amp;=&amp;%20%5Cbeta_%7B%5Cmu%200%7D%20+%20%5Csum_k%20%5Cbeta_%7B%5Cmu%20k%7D%20%5C%20x_%7Bik%7D%20%5C%5C%0A%5Csigma_i%20&amp;=&amp;%20%5Cbeta_%7B%5Csigma%200%7D%20%5C%5C%20%5C%5C%0Ay_i%20&amp;%5Csim&amp;%20%5Cmbox%7BNormal%7D(%5Cmu_i,%20%5Csigma_i)%0A%5Cend%7Barray%7D%0A"></p>
<p>The only way in which this framing of the model differs from the usual form is that I‚Äôve used <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B%5Csigma%200%7D"> to refer to the to-be-estimated <img src="https://latex.codecogs.com/png.latex?%5Csigma"> parameter. The difference is purely notational, but it reflects a slight shift in mindset: it signals that we‚Äôre now considering the possibility that we <em>could</em> have chosen to develop a richer regression model that allows each observation to have its <img src="https://latex.codecogs.com/png.latex?%5Csigma_i">, rather than use an ‚Äúintercept only‚Äù model for the variance. Indeed when expressed this way, the ‚Äúhomogeneity of variance‚Äù assumption in linear regression now corresponds to the special case in which no covariates (predictors) are included in the model for <img src="https://latex.codecogs.com/png.latex?%5Csigma">. Moreover, it makes clear that there‚Äôs no inherent reason to limit ourselves in this way. Relaxing homogeneity of variance allows us to specify regression models for both <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">, giving us the following framework for linear regression:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmu_i%20&amp;=&amp;%20%5Cbeta_%7B%5Cmu%200%7D%20+%20%5Csum_k%20%5Cbeta_%7B%5Cmu%20k%7D%20%5C%20x_%7Bik%7D%20%5C%5C%0A%5Csigma_i%20&amp;=&amp;%20%5Cbeta_%7B%5Csigma%200%7D%20%20+%20%5Csum_k%20%5Cbeta_%7B%5Csigma%20k%7D%20%5C%20x_%7Bik%7D%20%5C%5C%20%5C%5C%0Ay_i%20&amp;%5Csim&amp;%20%5Cmbox%7BNormal%7D(%5Cmu_i,%20%5Csigma_i)%0A%5Cend%7Barray%7D%0A"></p>
<p>Having made this conceptual shift, it‚Äôs not too hard to see that we can repeat the line of reasoning from the previous section that took us from linear models to generalised additive models. To wit, if we replace the regression coefficients <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B%5Cmu%20k%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B%5Csigma%20k%7D"> with smooth functions <img src="https://latex.codecogs.com/png.latex?f_%7B%5Cmu%20k%7D()"> and <img src="https://latex.codecogs.com/png.latex?f_%7B%5Csigma%20k%7D()"> and use these to transform the predictors, we have an additive regression model for the mean and the standard deviation‚Ä¶</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmu_i%20&amp;=&amp;%20%5Cbeta_%7B%5Cmu%200%7D%20+%20%5Csum_k%20f_%7B%5Cmu%20k%7D(x_%7Bik%7D)%20%5C%5C%0A%5Csigma_i%20&amp;=&amp;%20%5Cbeta_%7B%5Csigma%200%7D%20+%20%5Csum_k%20f_%7B%5Csigma%20k%7D(x_%7Bik%7D)%20%5C%5C%20%5C%5C%0Ay_i%20&amp;%5Csim&amp;%20%5Cmbox%7BNormal%7D(%5Cmu_i,%20%5Csigma_i)%0A%5Cend%7Barray%7D%0A"></p>
<p>Adding link functions <img src="https://latex.codecogs.com/png.latex?g()"> to connect the additive predictor to the parameters gives a generalised additive regression on the mean and the standard deviation‚Ä¶</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ag_%5Cmu(%5Cmu_i)%20&amp;=&amp;%20%5Cbeta_%7B%5Cmu%200%7D%20+%20%5Csum_k%20f_%7B%5Cmu%20k%7D(x_%7Bik%7D)%20%5C%5C%0Ag_%5Csigma(%5Csigma_i)%20&amp;=&amp;%20%5Cbeta_%7B%5Csigma%200%7D%20+%20%5Csum_k%20f_%7B%5Csigma%20k%7D(x_%7Bik%7D)%20%5C%5C%20%5C%5C%0Ay_i%20&amp;%5Csim&amp;%20%5Cmbox%7BNormal%7D(%5Cmu_i,%20%5Csigma_i)%0A%5Cend%7Barray%7D%0A"></p>
<p>Finally, we recognise that the normal distribution is not the only choice of measurement model. Like many other distributions it can be described as a distribution that contains one parameter for the <strong>location</strong> (i.e., <img src="https://latex.codecogs.com/png.latex?%5Cmu">) and <strong>scale</strong> (i.e., <img src="https://latex.codecogs.com/png.latex?%5Csigma">). More generally though, we might want to use distributions described by one parameter for location, one parameter for scale, and one or more parameters for the <strong>shape</strong>. If we instead choose the <a href="../../posts/2025-08-02_box-cox-power-exponential/">Box-Cox power exponential</a> (BCPE) ‚Äì in which <img src="https://latex.codecogs.com/png.latex?%5Cmu"> is a location parameter, <img src="https://latex.codecogs.com/png.latex?%5Csigma"> is a scale parameter, and <img src="https://latex.codecogs.com/png.latex?%5Cnu"> and <img src="https://latex.codecogs.com/png.latex?%5Ctau"> together control the shape ‚Äì the statistical model now looks like this‚Ä¶</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ag_%5Cmu(%5Cmu_i)%20&amp;=&amp;%20%5Cbeta_%7B%5Cmu%200%7D%20+%20%5Csum_k%20f_%7B%5Cmu%20k%7D(x_%7Bik%7D)%20%5C%5C%0Ag_%5Csigma(%5Csigma_i)%20&amp;=&amp;%20%5Cbeta_%7B%5Csigma%200%7D%20+%20%5Csum_k%20f_%7B%5Csigma%20k%7D(x_%7Bik%7D)%20%5C%5C%0Ag_%5Cnu(%5Cnu_i)%20&amp;=&amp;%20%5Cbeta_%7B%5Cnu%200%7D%20+%20%5Csum_k%20f_%7B%5Cnu%20k%7D(x_%7Bik%7D)%20%5C%5C%0Ag_%5Ctau(%5Ctau_i)%20&amp;=&amp;%20%5Cbeta_%7B%5Ctau%200%7D%20+%20%5Csum_k%20f_%7B%5Ctau%20k%7D(x_%7Bik%7D)%20%5C%5C%20%5C%5C%0Ay_i%20&amp;%5Csim&amp;%20%5Cmbox%7BBCPE%7D(%5Cmu_i,%20%5Csigma_i,%20%5Cnu_i,%20%5Ctau_i)%0A%5Cend%7Barray%7D%0A"></p>
<p>and we now have an example of a <strong>generalised additive model for location, scale, and shape</strong> (GAMLSS), noting of course you don‚Äôt have to use the BCPE specifically. The key requirement here is that the distributional family be flexible enough that you can separately model location, scale, and shape. There are a lot of distributions that satisfy this property, though for the purposes of this post I am just going to stick with BCPE.<sup>1</sup></p>
</section>
<section id="model-fitting" class="level3">
<h3 class="anchored" data-anchor-id="model-fitting">Model fitting</h3>
<p>Okay, so that‚Äôs the basic idea. How do we go about building a model? It‚Äôs not entirely straightforward: because the GAMLSS framework is so flexible, there are a lot of different possibilities. My approach to the problem was heavily influenced by the <a href="https://github.com/smouksassi/nhanesgamlss">nhanesgamlss</a> R package developed by my former colleague, the always-wonderful Samer Mouksassi. In fact, the first few times I fit a GAMLSS model all I did was use the <code>nhanesgamlss::simwtage()</code> function his package provides, and to be perfectly honest I probably wouldn‚Äôt have bothered to dive any deeper than this except for the fact that twice this year I‚Äôve collided with a real world modelling problem that needed something that Samer hadn‚Äôt already solved for me! Specifically, the <strong>nhanesgamlss</strong> package is concerned with estimating and sampling from the distribution of weight conditional on age and sex, <img src="https://latex.codecogs.com/png.latex?p(w%20%7C%20a,%20s)"> and unfortunately for me, the problems I‚Äôve worked on lately have needed me to sample height <em>and</em> weight. The density I need is <img src="https://latex.codecogs.com/png.latex?p(h,%20w%20%7C%20a,%20s)">. The NHANES data set and the GAMLSS modelling framework are both well suited to estimating this density, of course, but it‚Äôs a different density to the one that <code>nhanesgamlss::simwtage()</code> is designed for. And so it was with a great deal of sadness I discovered that this time I would have to do my own work and not rely on Samer to have already done it for me. Curses.</p>
<p>The approach I‚Äôve taken when tackling this problem is split it into two distinct parts. Rather than try to build a multivariate model with <img src="https://latex.codecogs.com/png.latex?(h,%20w)"> as the outcome vector, I use exchangeability to factorise the joint density as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(h,%20w%20%7C%20a,%20s)%20=%20p(w%20%7C%20h,%20a,%20s)%20p(h%20%7C%20a,%20s)%0A"></p>
<p>More precisely, the goal is to fit four GAMLSS models one for each of the following densities:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bl%7D%0Ap(h%20%7C%20a,%20s%20=%20%5Cmbox%7Bmale%7D)%20%5C%5C%0Ap(h%20%7C%20a,%20s%20=%20%5Cmbox%7Bfemale%7D)%20%5C%5C%0Ap(w%20%7C%20h,%20a,%20s%20=%20%5Cmbox%7Bmale%7D)%20%5C%5C%0Ap(w%20%7C%20h,%20a,%20s%20=%20%5Cmbox%7Bfemale%7D)%0A%5Cend%7Barray%7D%0A"></p>
<p>To get started, there are a few tiresome preliminaries to take care of. First, noting that the age range of most interest in the problems I‚Äôve worked on is the pediatric range, I made a pragmatic decision to restrict the training data to participants aged 40 years or less, and split the NHANES data into two data sets: <code>nhanes_m</code> contains data for male participants, and <code>nhanes_f</code> contains data from female participants.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">age_max_yr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb12-2">nhanes_m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male"</span>, age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> age_max_yr)</span>
<span id="cb12-3">nhanes_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>, age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> age_max_yr)</span></code></pre></div>
</div>
<p>Second, noting that I‚Äôm about to use the <a href="https://gamlss.org/">gamlss</a> R package to do the estimation, I‚Äôll define some settings for the optimisation routine using <code>gamlss::gamlss.control()</code>. As it happens, these settings turned out not to matter much for the models I ended up building, but during the process I‚Äôd tried out a few different settings and decided to stick with these:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">opt_control <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamlss.control</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c.crit =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.cyc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)</span></code></pre></div>
</div>
<section id="estimating-phas" class="level4">
<h4 class="anchored" data-anchor-id="estimating-phas">Estimating <img src="https://latex.codecogs.com/png.latex?p(h%7Ca,s)"></h4>
<p>Let‚Äôs start with the simpler models. When estimating <img src="https://latex.codecogs.com/png.latex?p(h%20%7C%20a,%20s%20=%20%5Cmbox%7Bmale%7D)"> and <img src="https://latex.codecogs.com/png.latex?p(h%20%7C%20a,%20s%20=%20%5Cmbox%7Bfemale%7D)"> there is only a single predictor that varies within the data set (i,e., age), so we don‚Äôt have to think about headache inducing questions like what interaction terms to include. Here‚Äôs the code I used to fit these two models:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">ht_m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamlss</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula       =</span> height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma.formula =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu.formula    =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau.formula   =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data    =</span> nhanes_m,</span>
<span id="cb14-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family  =</span> BCPE,</span>
<span id="cb14-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">control =</span> opt_control</span>
<span id="cb14-9">)</span>
<span id="cb14-10"></span>
<span id="cb14-11">ht_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamlss</span>(</span>
<span id="cb14-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula       =</span> height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb14-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma.formula =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb14-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu.formula    =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau.formula   =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data    =</span> nhanes_f,</span>
<span id="cb14-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family  =</span> BCPE,</span>
<span id="cb14-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">control =</span> opt_control</span>
<span id="cb14-19">)</span></code></pre></div>
</div>
<p>For the most part, the code here is fairly straightforward. I‚Äôve chosen to use the Box-Cox power exponential distribution as my measurement model, so I‚Äôve set <code>family = BCPE</code>. Calling <code>BCPE()</code> returns a ‚Äúgamlss.family‚Äù object that does two things: it indicates that the Box-Cox power exponential distribution should be used, and it specifies the link functions to be used. Under the default settings for <code>BCPE()</code>, the link functions <img src="https://latex.codecogs.com/png.latex?g_%7B%5Cmu%7D()"> and <img src="https://latex.codecogs.com/png.latex?g_%7B%5Cnu%7D()"> are the identity-link, whereas <img src="https://latex.codecogs.com/png.latex?g_%7B%5Csigma%7D()"> and <img src="https://latex.codecogs.com/png.latex?g_%7B%5Ctau%7D()"> are both log-link:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BCPE</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
GAMLSS Family: BCPE Box-Cox Power Exponential 
Link function for mu   : identity 
Link function for sigma: log 
Link function for nu   : identity 
Link function for tau  : log </code></pre>
</div>
</div>
<p>Since we‚Äôre using the BCPE distribution, we need to pass four formula arguments, one for each parameter. After trying out a few different possibilities, I decided to keep things simple for the shape parameters. For <img src="https://latex.codecogs.com/png.latex?%5Cnu"> and <img src="https://latex.codecogs.com/png.latex?%5Ctau"> I specified an intercept-only model. The <code>nu.formula</code> and <code>tau.formula</code> arguments both accept a one-sided formula, and in this case I‚Äôve gone with the simplest possibility:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">nu.formula   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-2">tau.formula  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>In other words, while the location and scale of the height distribution can change over the lifespan, the model assumes the shape of the distribution remains the same. Straightforward enough. The formulas for the location parameter <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and the scale parameter <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are a little more complex. As with <code>nu.formula</code> and <code>tau.formula</code>, the <code>sigma.formula</code> argument accepts a one-sided formula. Because we‚Äôre expecting the variability of height<sup>2</sup> to change as age increases, <code>age_mn</code> is included as a predictor here. Similarly, it‚Äôs pretty obvious that we‚Äôd expect the average height to change with age, I‚Äôll also include <code>age_mn</code> as a predictor for <img src="https://latex.codecogs.com/png.latex?%5Cmu">. The code looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">formula       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb18-2">sigma.formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span></code></pre></div>
</div>
<p>Note that the <code>formula</code> argument takes a two-sided formula as its argument: the outcome variable <code>height_cm</code> is passed on the left hand side of the formula.</p>
<p>Okay, yes Danielle that‚Äôs all well and good, but what‚Äôs the story with the <code>pb()</code> function? As you‚Äôve probably guessed, this is where we specify the smoothing functions <img src="https://latex.codecogs.com/png.latex?f()"> in the additive model. The <code>pb()</code> function is used specify P-spline smoothing (<a href="https://www.jstor.org/stable/2246049">Eilers &amp; Marx, 1996</a>, <a href="https://www.researchgate.net/publication/290086196_Twenty_years_of_P-splines">Eilers, Marx &amp; Durb√°n 2016</a>), and I absolutely do not have any desire to delve into the formalism for P-splines because that is <em>literally</em> what I did in the <a href="../../posts/2025-09-06_p-splines/">post about P-splines</a>. For my current purposes it‚Äôs sufficient to note that <code>pb()</code> implements uses penalised B-splines as a tool to fit a smoothed function to the data. The details don‚Äôt matter too much right now.</p>
<p>When this code is executed, the output looks something like this:</p>
<pre><code>GAMLSS-RS iteration 1: Global Deviance = 251100.2 
GAMLSS-RS iteration 2: Global Deviance = 245961 
GAMLSS-RS iteration 3: Global Deviance = 245664.8 
GAMLSS-RS iteration 4: Global Deviance = 245645 
GAMLSS-RS iteration 5: Global Deviance = 245643.9 
GAMLSS-RS iteration 6: Global Deviance = 245643.9 
GAMLSS-RS iteration 7: Global Deviance = 245643.9 
GAMLSS-RS iteration 8: Global Deviance = 245643.8 
GAMLSS-RS iteration 9: Global Deviance = 245643.8 </code></pre>
<p>It can sometimes be a slow process, but the more recent implementation of <code>pb()</code> is much more efficient than other spline functions like <code>cs()</code>, and has the advantage that the user doesn‚Äôt need to fiddle around with hyperparameters.</p>
</section>
<section id="estimating-pwhas" class="level4">
<h4 class="anchored" data-anchor-id="estimating-pwhas">Estimating <img src="https://latex.codecogs.com/png.latex?p(w%7Ch,a,s)"></h4>
<p>Turning now to the second part of the problem, we need to estimate the distributions <img src="https://latex.codecogs.com/png.latex?p(w%20%7C%20h,%20a,%20s%20=%20%5Cmbox%7Bmale%7D)"> and <img src="https://latex.codecogs.com/png.latex?p(w%20%7C%20h,%20a,%20s%20=%20%5Cmbox%7Bfemale%7D)">. The GAMLSS models I implemented for these distributions are shown below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">wt_htm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamlss</span>(</span>
<span id="cb20-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula       =</span> weight_kg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>height_cm,</span>
<span id="cb20-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma.formula =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb20-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu.formula    =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb20-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau.formula   =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb20-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data    =</span> nhanes_m,</span>
<span id="cb20-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family  =</span> BCPE,</span>
<span id="cb20-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">control =</span> opt_control</span>
<span id="cb20-9">)</span>
<span id="cb20-10"></span>
<span id="cb20-11">wt_htf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamlss</span>(</span>
<span id="cb20-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula       =</span> weight_kg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>height_cm,</span>
<span id="cb20-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma.formula =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pb</span>(age_mn),</span>
<span id="cb20-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu.formula    =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb20-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau.formula   =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb20-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data    =</span> nhanes_f,</span>
<span id="cb20-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family  =</span> BCPE,</span>
<span id="cb20-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">control =</span> opt_control</span>
<span id="cb20-19">)</span></code></pre></div>
</div>
<p>The models for <img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cnu"> and <img src="https://latex.codecogs.com/png.latex?%5Ctau"> haven‚Äôt changed from before, but the model for <img src="https://latex.codecogs.com/png.latex?%5Cmu"> is substantially different. I suspect that there are many different ways you could do this, but the approach I took was to use penalised splines for age, but treat height as a linear predictor. You can see from the code that I also allowed an age-by-height interaction term.<sup>3</sup></p>
<p>In any case, I‚Äôm not so foolish as to actually run the GAMLSS-fitting code inside this blog post. Instead, I fit the models in another script, and saved the resulting model objects to RDS files. So now I can load these objects and take a look at the objects:</p>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">ht_m   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ht-m.rds"</span>))</span>
<span id="cb21-2">ht_f   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ht-f.rds"</span>))</span>
<span id="cb21-3">wt_htm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt-htm.rds"</span>))</span>
<span id="cb21-4">wt_htf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(post_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt-htf.rds"</span>))</span>
<span id="cb21-5"></span>
<span id="cb21-6">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb21-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ht_m =</span> ht_m,</span>
<span id="cb21-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ht_f =</span> ht_f,</span>
<span id="cb21-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wt_htm =</span> wt_htm,</span>
<span id="cb21-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wt_htf =</span> wt_htf</span>
<span id="cb21-11">)</span>
<span id="cb21-12"></span>
<span id="cb21-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_tabset</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">ht_m</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">ht_f</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">wt_htm</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">wt_htf</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<pre> 
 
Family:  c("BCPE", "Box-Cox Power Exponential")  
Fitting method: RS()  
 
Call:   
gamlss(formula = height_cm ~ pb(age_mn), sigma.formula = ~pb(age_mn),   
    nu.formula = ~1, tau.formula = ~1, family = BCPE,   
    data = nhanes_m, control = opt_control)  
 
Mu Coefficients: 
(Intercept)   pb(age_mn)   
    91.8664       0.2703   
Sigma Coefficients: 
(Intercept)   pb(age_mn)   
 -3.087e+00   -1.098e-05   
Nu Coefficients: 
(Intercept)   
     0.7608   
Tau Coefficients: 
(Intercept)   
      0.587   
 
 Degrees of Freedom for the fit: 40.41 Residual Deg. of Freedom   36764  
Global Deviance:     239756  
            AIC:     239837  
            SBC:     240181  
</pre>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<pre> 
 
Family:  c("BCPE", "Box-Cox Power Exponential")  
Fitting method: RS()  
 
Call:   
gamlss(formula = height_cm ~ pb(age_mn), sigma.formula = ~pb(age_mn),   
    nu.formula = ~1, tau.formula = ~1, family = BCPE,   
    data = nhanes_f, control = opt_control)  
 
Mu Coefficients: 
(Intercept)   pb(age_mn)   
    93.4863       0.2205   
Sigma Coefficients: 
(Intercept)   pb(age_mn)   
 -3.0928135   -0.0001298   
Nu Coefficients: 
(Intercept)   
     0.5832   
Tau Coefficients: 
(Intercept)   
      0.608   
 
 Degrees of Freedom for the fit: 39.65 Residual Deg. of Freedom   37603  
Global Deviance:     240867  
            AIC:     240946  
            SBC:     241285  
</pre>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<pre> 
 
Family:  c("BCPE", "Box-Cox Power Exponential")  
Fitting method: RS()  
 
Call:  gamlss(formula = weight_kg ~ pb(age_mn) + height_cm +   
    pb(age_mn):height_cm, sigma.formula = ~pb(age_mn),   
    nu.formula = ~1, tau.formula = ~1, family = gamlss.dist::BCPE,   
    data = nhanes_m, control = opt_control)  
 
Mu Coefficients: 
         (Intercept)            pb(age_mn)             height_cm   
          -10.526575             -0.326806              0.268436   
pb(age_mn):height_cm   
            0.002829   
Sigma Coefficients: 
(Intercept)   pb(age_mn)   
  -2.156377     0.001858   
Nu Coefficients: 
(Intercept)   
     -1.217   
Tau Coefficients: 
(Intercept)   
     0.5824   
 
 Degrees of Freedom for the fit: 37.53 Residual Deg. of Freedom   36766  
Global Deviance:     245644  
            AIC:     245719  
            SBC:     246038  
</pre>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<pre> 
 
Family:  c("BCPE", "Box-Cox Power Exponential")  
Fitting method: RS()  
 
Call:  gamlss(formula = weight_kg ~ pb(age_mn) + height_cm +   
    pb(age_mn):height_cm, sigma.formula = ~pb(age_mn),   
    nu.formula = ~1, tau.formula = ~1, family = BCPE,   
    data = nhanes_f, control = opt_control)  
 
Mu Coefficients: 
         (Intercept)            pb(age_mn)             height_cm   
          -10.642828             -0.271211              0.257454   
pb(age_mn):height_cm   
            0.002598   
Sigma Coefficients: 
(Intercept)   pb(age_mn)   
  -2.129442     0.002198   
Nu Coefficients: 
(Intercept)   
     -1.009   
Tau Coefficients: 
(Intercept)   
     0.7359   
 
 Degrees of Freedom for the fit: 37.29 Residual Deg. of Freedom   37606  
Global Deviance:     256606  
            AIC:     256680  
            SBC:     256998  
</pre>
</div>
</div>
</div>
<p>Oh yes. Those are certainly model objects: I would recognise anywhere that characteristic impenetrable wall of jargon that accompanies every statistical object print method in R. Le sigh.</p>
</section>
</section>
</section>
<section id="using-the-gamlss-models" class="level2">
<h2 class="anchored" data-anchor-id="using-the-gamlss-models">Using the GAMLSS models</h2>
<section id="quantile-estimation" class="level3">
<h3 class="anchored" data-anchor-id="quantile-estimation">Quantile estimation</h3>
<p>Now that I have the models I‚Äôve worked so hard to construct, I suppose I should do something with them. The first application uses the <img src="https://latex.codecogs.com/png.latex?p(h%7Ca,s)"> models to construct quantile curves for height by age and sex. In essence, I‚Äôll build my own version of the CDC growth charts. To that end I‚Äôll write a little wrapper function <code>get_pars()</code> to extract the specific values of <img src="https://latex.codecogs.com/png.latex?%5Cmu">, <img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Ctau">, and <img src="https://latex.codecogs.com/png.latex?%5Cnu"> that describe the distribution of heights, conditional on knowing the age and sex of the person:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">get_pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, model) {</span>
<span id="cb22-2">  pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb22-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu    =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>),</span>
<span id="cb22-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>),</span>
<span id="cb22-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu    =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nu"</span>),</span>
<span id="cb22-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau   =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">what =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tau"</span>),</span>
<span id="cb22-7">  )</span>
<span id="cb22-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(data, pars)</span>
<span id="cb22-9">}</span></code></pre></div>
</div>
<p>In all honesty I probably didn‚Äôt need to do this, because in addition to supplying a <code>predict()</code> method for gamlss objects, the <strong>gamlss</strong> package provides a <code>predictAll()</code> function that does essentially the same thing. But it‚Äôs done now, and I prefer my syntax anyways. I can now calculate the desired quantiles by passing the parameter estimates to <code>qBCPE()</code>. The code below computes the 5th, 25th, 50th, 75th, and 95th percentiles for height, conditional on age and sex:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">predict_cases_ht <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb23-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_mn  =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(age_max_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb23-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_fct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>))</span>
<span id="cb23-4">)</span>
<span id="cb23-5"></span>
<span id="cb23-6">predict_pars_ht <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb23-7">  predict_cases_ht <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_pars</span>(ht_m),</span>
<span id="cb23-8">  predict_cases_ht <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_pars</span>(ht_f)</span>
<span id="cb23-9">)</span>
<span id="cb23-10"></span>
<span id="cb23-11">predict_quantiles_ht <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> predict_pars_ht <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb23-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q05 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb23-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q25 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb23-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q50 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb23-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q75 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb23-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q95 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau)</span>
<span id="cb23-18">  )</span>
<span id="cb23-19"></span>
<span id="cb23-20">predict_quantiles_ht</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 960 √ó 11
   age_mn sex_fct    mu  sigma    nu   tau   q05   q25   q50   q75   q95
    &lt;int&gt; &lt;fct&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1      1 male     56.8 0.0470 0.761  1.80  52.5  55.1  56.8  58.6  61.3
 2      2 male     59.1 0.0465 0.761  1.80  54.6  57.3  59.1  60.9  63.7
 3      3 male     61.3 0.0459 0.761  1.80  56.7  59.5  61.3  63.1  66.0
 4      4 male     63.3 0.0454 0.761  1.80  58.6  61.5  63.3  65.2  68.1
 5      5 male     65.3 0.0449 0.761  1.80  60.5  63.4  65.3  67.2  70.1
 6      6 male     67.1 0.0445 0.761  1.80  62.2  65.1  67.1  69.0  72.0
 7      7 male     68.8 0.0441 0.761  1.80  63.8  66.8  68.8  70.7  73.8
 8      8 male     70.3 0.0437 0.761  1.80  65.3  68.4  70.3  72.3  75.4
 9      9 male     71.8 0.0433 0.761  1.80  66.8  69.8  71.8  73.9  77.0
10     10 male     73.2 0.0429 0.761  1.80  68.1  71.2  73.2  75.3  78.5
# ‚Ñπ 950 more rows</code></pre>
</div>
</div>
<p>This is all well and good, Danielle, but since nobody loves looking at tables of numbers, shall we instead draw a pretty picture to display these quantile curves? Why yes, Other Danielle, we shall.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb25-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> age_max_yr), </span>
<span id="cb25-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age_mn, height_cm),</span>
<span id="cb25-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb25-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb25-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> predict_quantiles_ht <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb25-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>),</span>
<span id="cb25-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quantile"</span>,</span>
<span id="cb25-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height_cm"</span></span>
<span id="cb25-13">      ),</span>
<span id="cb25-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age_mn, height_cm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> quantile)</span>
<span id="cb25-15">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>sex_fct) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-07_gamlss/index_files/figure-html/height-quantiles-plot-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Very pretty.</p>
</section>
<section id="even-more-quantile-estimation" class="level3">
<h3 class="anchored" data-anchor-id="even-more-quantile-estimation">Even more quantile estimation</h3>
<p>Okay, that‚Äôs nice but you might argue that the GAMLSS modelling is overkill here. The distribution of heights conditional on age and sex is fairly close to normal, and in any case we have about 100k rows in the data set spanning the full range of ages. While it is certainly true that a well-tuned GAMLSS model supplies slightly cleaner curves, and this would <em>absolutely</em> matter if I were working for the CDC and tasked with the job of producing official growth curves, this is a side project on a personal blog and I am not the CDC.</p>
<p>With that in mind, can we think of a case where even a data set as rich as NHANES starts to become awfully sparse and the modelling becomes much more important? Of course we can, Original Danielle, what a silly question. It is indeed trivially easy to find such a case if we start looking for one.</p>
<p>Here is an example. Suppose we had a research question that was focused on some intervention (medication, diet, exercise, whatever) that might have an impact on weight, and moreover there was a particular concern or interest in how the intervention affects people at the extremes. In point of fact I <em>don‚Äôt</em> have any such research question on my desk, but it‚Äôs not entirely outlandish to imagine that there would be scenarios in which we have a specific interest in the distribution of weights associated with very tall or very short people. For the sake of argument, let‚Äôs operationally define a ‚Äúvery tall‚Äù person to be someone at the 99th height percentile for their age and sex. Similarly we could say that a ‚Äúvery short‚Äù person is someone at the 1st percentile. Unless your data set is extremely large ‚Äì on a scale that not even NHANES can aspire to ‚Äì the data are going to be very sparse at the extremes. The moment we ask questions like this we should be resigned to the fact that we‚Äôll be taking <em>veeeeeery</em> thin slices through the tails of the distributions.</p>
<p>Let‚Äôs take a look. As before, I‚Äôll construct the quantiles curves predicted by the GAMLSS model. It‚Äôs slightly more involved than last time because I‚Äôm conditioning on a height percentile first and then constructing quantiles for weight, but the core logic is the same. These are the height percentiles:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">predict_cases_wt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> predict_pars_ht <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb26-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">very_tall  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb26-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">very_short =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau)</span>
<span id="cb26-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb26-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb26-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(very_tall, very_short),</span>
<span id="cb26-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height_fct"</span>, </span>
<span id="cb26-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height_cm"</span></span>
<span id="cb26-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb26-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_fct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(height_fct)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb26-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(age_mn, sex_fct, height_fct, height_cm)</span>
<span id="cb26-13"></span>
<span id="cb26-14">predict_cases_wt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,920 √ó 4
   age_mn sex_fct height_fct height_cm
    &lt;int&gt; &lt;fct&gt;   &lt;fct&gt;          &lt;dbl&gt;
 1      1 male    very_tall       63.3
 2      1 male    very_short      50.5
 3      2 male    very_tall       65.8
 4      2 male    very_short      52.7
 5      3 male    very_tall       68.1
 6      3 male    very_short      54.7
 7      4 male    very_tall       70.3
 8      4 male    very_short      56.6
 9      5 male    very_tall       72.3
10      5 male    very_short      58.4
# ‚Ñπ 1,910 more rows</code></pre>
</div>
</div>
<p>So now we have a collection of age/sex/height cases for which we need to compute weight quantiles. Here‚Äôs the code for that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">predict_pars_wt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb28-2">  predict_cases_wt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>height_fct) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_pars</span>(wt_htm),</span>
<span id="cb28-3">  predict_cases_wt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>height_fct) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_pars</span>(wt_htf)</span>
<span id="cb28-4">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(predict_cases_wt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(age_mn, sex_fct, height_cm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relocate</span>(height_fct, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.before =</span> height_cm)</span>
<span id="cb28-7"></span>
<span id="cb28-8">predict_quantiles_wt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> predict_pars_wt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb28-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q05 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb28-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q25 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb28-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q50 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb28-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q75 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau),</span>
<span id="cb28-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q95 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau)</span>
<span id="cb28-15">  )</span>
<span id="cb28-16"></span>
<span id="cb28-17">predict_quantiles_wt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,920 √ó 13
   age_mn sex_fct height_fct height_cm    mu  sigma    nu   tau   q05   q25
    &lt;int&gt; &lt;fct&gt;   &lt;fct&gt;          &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1      1 male    very_tall       63.3  7.29 0.101  -1.22  1.79  6.26  6.84
 2      1 male    very_short      50.5  3.83 0.101  -1.22  1.79  3.29  3.59
 3      2 male    very_tall       65.8  7.99 0.100  -1.22  1.79  6.87  7.51
 4      2 male    very_short      52.7  4.39 0.100  -1.22  1.79  3.78  4.13
 5      3 male    very_tall       68.1  8.64 0.0987 -1.22  1.79  7.45  8.13
 6      3 male    very_short      54.7  4.92 0.0987 -1.22  1.79  4.24  4.63
 7      4 male    very_tall       70.3  9.25 0.0975 -1.22  1.79  7.99  8.70
 8      4 male    very_short      56.6  5.41 0.0975 -1.22  1.79  4.67  5.09
 9      5 male    very_tall       72.3  9.82 0.0963 -1.22  1.79  8.49  9.24
10      5 male    very_short      58.4  5.86 0.0963 -1.22  1.79  5.07  5.52
# ‚Ñπ 1,910 more rows
# ‚Ñπ 3 more variables: q50 &lt;dbl&gt;, q75 &lt;dbl&gt;, q95 &lt;dbl&gt;</code></pre>
</div>
</div>
<p>So far, so good. However, now we turn to the data itself. That‚Äôs the point at which it becomes a little trickier When working with continuous data, you won‚Äôt find a single person who sits exactly at the 99th or 1st percentile. I mean, the whole reason probability densities even exist as a mathematical formalism is because continous data are inconvenient that way. To the GAMLSS model this isn‚Äôt a problem at all, but for the NHANES data itself it‚Äôs terribly awkward. For the current purposes, I‚Äôll allow a little slack and extract the subset of the NHANES data where the participant is <em>near</em> the 99th or 1st percentile. Here‚Äôs the code doing that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">permitted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> predict_cases_wt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb30-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_cm_lo =</span> height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>, </span>
<span id="cb30-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_cm_hi =</span> height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.01</span></span>
<span id="cb30-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb30-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(age_mn, sex_fct, height_fct, height_cm_lo, height_cm_hi)</span>
<span id="cb30-7"></span>
<span id="cb30-8">match_rules <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(</span>
<span id="cb30-9">  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sex_fct, </span>
<span id="cb30-10">  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age_mn, </span>
<span id="cb30-11">  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height_cm_lo, </span>
<span id="cb30-12">  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height_cm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height_cm_hi</span>
<span id="cb30-13">)</span>
<span id="cb30-14"></span>
<span id="cb30-15">nhanes_very_short <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">semi_join</span>(</span>
<span id="cb30-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> nhanes, </span>
<span id="cb30-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> permitted <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(height_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"very_short"</span>),</span>
<span id="cb30-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> match_rules</span>
<span id="cb30-19">)</span>
<span id="cb30-20"></span>
<span id="cb30-21">nhanes_very_tall <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">semi_join</span>(</span>
<span id="cb30-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> nhanes, </span>
<span id="cb30-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> permitted <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(height_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"very_tall"</span>),</span>
<span id="cb30-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> match_rules</span>
<span id="cb30-25">)</span>
<span id="cb30-26"></span>
<span id="cb30-27">nhanes_partial <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb30-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">very_short =</span> nhanes_very_short,</span>
<span id="cb30-29">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">very_tall =</span> nhanes_very_tall,</span>
<span id="cb30-30">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height_fct"</span></span>
<span id="cb30-31">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_fct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(height_fct))</span>
<span id="cb30-32"></span>
<span id="cb30-33">nhanes_partial</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,513 √ó 9
   height_fct    id sex_num sex_fct weight_kg height_cm age_mn age_yr cohort
   &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;       &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 very_short   106       0 male         71.8      157.    479   39.9 1999-‚Ä¶
 2 very_short   181       0 male         50.8      153.    177   14.8 1999-‚Ä¶
 3 very_short   186       0 male         57.7      158.    220   18.3 1999-‚Ä¶
 4 very_short   590       1 female       46.5      146.    186   15.5 1999-‚Ä¶
 5 very_short   599       0 male         42.2      143.    162   13.5 1999-‚Ä¶
 6 very_short   708       1 female       73.8      146.    313   26.1 1999-‚Ä¶
 7 very_short   849       0 male         35.7      150.    172   14.3 1999-‚Ä¶
 8 very_short   941       1 female       57.1      146.    262   21.8 1999-‚Ä¶
 9 very_short  1012       0 male         38        141.    158   13.2 1999-‚Ä¶
10 very_short  1075       0 male         54.6      156.    237   19.8 1999-‚Ä¶
# ‚Ñπ 1,503 more rows</code></pre>
</div>
</div>
<p>It‚Äôs not exciting reading, but I will confess it was fun to write. I very rarely have to implement semi joins or rolling joins in my day to day life, so it was kind of nice to have an opportunity to remember how they work. Notably though, our filtered NHANES data that contains only very tall and very short people is now much smaller. We have only 1513 subjects, and the effect of this subsetting becomes noticeable when we plot the data, and plot those data against the GAMLSS estimated quantile curves:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb32-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> nhanes_partial, </span>
<span id="cb32-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age_mn, weight_kg),</span>
<span id="cb32-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb32-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb32-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> predict_quantiles_wt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb32-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb32-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>),</span>
<span id="cb32-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quantile"</span>,</span>
<span id="cb32-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight_kg"</span></span>
<span id="cb32-13">      ),</span>
<span id="cb32-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age_mn, weight_kg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> quantile),</span>
<span id="cb32-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb32-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(height_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sex_fct) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-07_gamlss/index_files/figure-html/weight-quantiles-plot-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Huh. It works better than I would have expected it to, actually. It‚Äôs not perfect, and the model does seem to underestimate the uppermost weight quantiles for very tall people, but in fairness I set it a very hard task: estimating the 95th quantile for weight by age and sex, conditional on being at the 99th percentile for height? This is not something I‚Äôd have dared attempt in the past, and I‚Äôm mildly surprised it works as well as it does. The curves aren‚Äôt smooth as I‚Äôd like, I suppose, and had I known in advance I was going to make this plot I might have tailored the GAMLSS fitting to enforce smoothness a little more, but honestly I‚Äôm not complaining. This is pretty good!</p>
</section>
<section id="model-based-sampling" class="level3">
<h3 class="anchored" data-anchor-id="model-based-sampling">Model-based sampling</h3>
<p>Time to switch gears. While quantile estimation is the statistical problem for which GAMLSS models are best known, the use case I‚Äôm more likely to encounter in my own work is model-based sampling. It is grossly typical of pediatric pharmacometric simulations, in fact. We very often want to simulate the expected drug exposure across a particular subpopulation defined by an age band, stratified by sex, or something along these lines. Performing these simulations is a somewhat complicated affair, and this post is not the right place to dive deep on that topic, but for many of these simulations we need to sample from the full joint conditional distribution <img src="https://latex.codecogs.com/png.latex?p(h,%20w%20%7C%20a,%20s)">.<sup>4</sup></p>
<p>Let‚Äôs have a go at doing this.</p>
<p>The code below defines a function <code>sample_hw()</code> that takes a vector of ages, a vector of sexes, and a list of GAMLSS models as input, and returns a data frame that samples heights and weights for each case with the assistance of the appropriate GAMLSS model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">sample_hw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(age_mn, sex_fct, mod) {</span>
<span id="cb33-2"></span>
<span id="cb33-3">  rTBCPE <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n, mu, sigma, nu, tau, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trim =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0025</span>) {</span>
<span id="cb33-4">    p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> trim, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> trim)</span>
<span id="cb33-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(mu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) mu[mu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1E-6</span></span>
<span id="cb33-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) sigma[sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1E-6</span></span>
<span id="cb33-7">    r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qBCPE</span>(p, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> mu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau)</span>
<span id="cb33-8">    r</span>
<span id="cb33-9">  }</span>
<span id="cb33-10">  sample_h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(age_mn, ht_mod) {</span>
<span id="cb33-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(age_mn) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_pars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> ht_mod) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(mu, sigma, nu, tau) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dbl</span>(\(mu, sigma, nu, tau) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rTBCPE</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mu, sigma, nu, tau))</span>
<span id="cb33-15">  }</span>
<span id="cb33-16">  sample_w <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(age_mn, height_cm, wt_mod) {</span>
<span id="cb33-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(age_mn, height_cm) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_pars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> wt_mod) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-19">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(mu, sigma, nu, tau) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dbl</span>(\(mu, sigma, nu, tau) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rTBCPE</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mu, sigma, nu, tau))</span>
<span id="cb33-21">  }</span>
<span id="cb33-22"></span>
<span id="cb33-23">  height_cm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> weight_kg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(age_mn))</span>
<span id="cb33-24">  mm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male"</span></span>
<span id="cb33-25">  ff <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span></span>
<span id="cb33-26"></span>
<span id="cb33-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(mm)) height_cm[mm] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_h</span>(age_mn[mm], mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ht_m)</span>
<span id="cb33-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(ff)) height_cm[ff] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_h</span>(age_mn[ff], mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ht_f)  </span>
<span id="cb33-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(mm)) weight_kg[mm] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_w</span>(age_mn[mm], height_cm[mm], mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wt_htm)</span>
<span id="cb33-30">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(ff)) weight_kg[ff] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_w</span>(age_mn[ff], height_cm[ff], mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wt_htf)</span>
<span id="cb33-31">  </span>
<span id="cb33-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(age_mn, sex_fct, height_cm, weight_kg)</span>
<span id="cb33-33">}</span></code></pre></div>
</div>
<p>One feature worth noting here is the use of a <em>trimmed</em> Box-Cox power-exponential for the sampling. This is somewhat important in practice becase even with <img src="https://latex.codecogs.com/png.latex?%5Cnu"> and <img src="https://latex.codecogs.com/png.latex?%5Ctau"> parameters to control the shape (and thereby make the model less prone to sampling absurd values), the BCPE distribution has limits. It is not equipped with a detailed knowledge of human physiology, and even when fit to a data set as large as the whole of NHANES, the resulting distributions still have support on non-biological values and will ‚Äì in any sufficiently large simulation ‚Äì generate a few outliers that are biologically impossible. To that end, the sampling function quietly truncates the very ends of the distribution. The default trim in my code above is to remove 0.25% of the distribution on either side, which is quite a bit smaller than the 3% default used in the <code>nhanesgamlss::simwtage()</code> function that my former colleague Samer developed. The reason for the difference is uninteresting: my GAMLSS models are trained on a much larger data set than the ones supplied by the <strong>nhanesgamlss</strong> package, and I use a slightly different method to construct the model, and one side effect is that the BCPE densities in my version of the GAMLSS model have lighter tails than the ones that you‚Äôll get if you apply <code>nhanesgamlss::simwtage()</code> to the GAMLSS code provided in the package documentation.</p>
<p>In any case, now that I have the <code>sample_hw()</code> function written down, I can use it as the basis for a simulation. For the first example, I‚Äôll keep the exact same set of age and sex values from the NHANES data that were used to train the GAMLSS model, and sample new heights and weights for each case. In the process, I‚Äôll also classify into a set of ‚Äúage bands‚Äù. In real life these bands would be chosen based on the needs of the simulation, but for this example I don‚Äôt have a specific application in mind so I just went with something pretty representative of the bands that I often need.</p>
<p>Here‚Äôs what happens:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">nhanes_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(nhanes_m, nhanes_f) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(age_mn)</span>
<span id="cb34-2"></span>
<span id="cb34-3">age_band <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(age_mn) {</span>
<span id="cb34-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(</span>
<span id="cb34-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb34-6">      age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>                 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb34-7">      age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb34-8">      age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">72</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb34-9">      age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">72</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb34-10">      age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">216</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb34-11">      age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">216</span>                 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb34-12">    ),</span>
<span id="cb34-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb34-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb34-15">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;1 year"</span>,</span>
<span id="cb34-16">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1-2 years"</span>,</span>
<span id="cb34-17">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2-6 years"</span>,</span>
<span id="cb34-18">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6-12 years"</span>,</span>
<span id="cb34-19">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12-18 years"</span>,</span>
<span id="cb34-20">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;18 years"</span></span>
<span id="cb34-21">    )</span>
<span id="cb34-22">  )</span>
<span id="cb34-23">}</span>
<span id="cb34-24"></span>
<span id="cb34-25">pop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb34-26">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gamlss =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_hw</span>(nhanes_fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age_mn, nhanes_fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sex_fct, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mod =</span> mod),</span>
<span id="cb34-27">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nhanes =</span> nhanes_fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(age_mn, sex_fct, height_cm, weight_kg),</span>
<span id="cb34-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span></span>
<span id="cb34-29">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_band_fct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">age_band</span>(age_mn))</span>
<span id="cb34-30"></span>
<span id="cb34-31">pop</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 148,894 √ó 6
   source age_mn sex_fct height_cm weight_kg age_band_fct
   &lt;chr&gt;   &lt;dbl&gt; &lt;fct&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;       
 1 gamlss      0 male         55.3      5.87 &lt;1 year     
 2 gamlss      0 male         57.3      5.36 &lt;1 year     
 3 gamlss      0 male         56.3      4.86 &lt;1 year     
 4 gamlss      0 male         56.5      5.54 &lt;1 year     
 5 gamlss      0 male         54.1      5.03 &lt;1 year     
 6 gamlss      0 male         53.8      5.23 &lt;1 year     
 7 gamlss      0 male         56.6      4.89 &lt;1 year     
 8 gamlss      0 male         55.0      5.20 &lt;1 year     
 9 gamlss      0 male         55.4      4.98 &lt;1 year     
10 gamlss      0 male         53.4      4.38 &lt;1 year     
# ‚Ñπ 148,884 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">pop <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(height_cm, weight_kg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex_fct)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb36-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(age_band_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> source, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-07_gamlss/index_files/figure-html/height-weight-age-band-scatterplot-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>So, so pretty. When I do a pediatric simulation in my work I almost always create a plot similar to this one. It‚Äôs not the final product or indeed the point of the simulations, but it‚Äôs a important validation check. You really want to make sure that the distributions that you‚Äôre sampling from actually make sense and look about right when compared to the known data! Also, they‚Äôre preeeeeeeettttttty.</p>
</section>
<section id="even-more-sampling" class="level3">
<h3 class="anchored" data-anchor-id="even-more-sampling">Even more sampling</h3>
<p>Once again this is a neat example, but it‚Äôs mostly a validation of the GAMLSS model: it shows us the model does allow us to sample from the joint conditional density <img src="https://latex.codecogs.com/png.latex?p(h,%20w%20%7C%20a,%20s)">. But by design the GAMLSS samples in <code>pop</code> are matched to the NHANES data on age and sex. Anything that we could do with the GAMLSS samples in the previous example is also something that we could have done with the NHANES samples directly. So, once again, we ask the question: is there something we can do with the GAMLSS model-based sampling that we wouldn‚Äôt be able to do with the NHANES data?</p>
<p>Of course there is, dear reader, and as you might guess I‚Äôll again look to ‚Äúextreme cases‚Äù like I did in the quantile estimation discussion earlier. This time though I‚Äôll focus on age, and more specifically, I‚Äôll look at body surface area (BSA) simulations for very young infants.</p>
<p>I‚Äôll motivate the example with a little snippet of code that I keep handy in my everyday life. It‚Äôs a <code>compute_bsa()</code> function that calculates a person‚Äôs approximate BSA based on their height and weight. By it‚Äôs very nature this calculation has to be approximate: bodies come in all shapes and sizes so any function that approximates BSA based on two simpler measurements is going to have some limitations. It should therefore be unsurprising to note that there are <em>lots</em> of different formulae we can use for this purpose:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">compute_bsa <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(height, weight, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dubois"</span>) {</span>
<span id="cb37-2"></span>
<span id="cb37-3">  w <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> weight <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numeric (kg)</span></span>
<span id="cb37-4">  h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> height <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numeric (cm)</span></span>
<span id="cb37-5"></span>
<span id="cb37-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Du Bois D, Du Bois EF (Jun 1916). "A formula to estimate the approximate</span></span>
<span id="cb37-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># surface area if height and weight be known". Archives of Internal Medicine</span></span>
<span id="cb37-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 17 (6): 863-71. PMID 2520314.</span></span>
<span id="cb37-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dubois"</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.007184</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.425</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.725</span>)</span>
<span id="cb37-10"></span>
<span id="cb37-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mosteller RD. "Simplified calculation of body-surface area". N Engl J Med</span></span>
<span id="cb37-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1987; 317:1098. PMID 3657876.</span></span>
<span id="cb37-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mosteller"</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.016667</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb37-14"></span>
<span id="cb37-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Haycock GB, Schwartz GJ, Wisotsky DH "Geometric method for measuring body</span></span>
<span id="cb37-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># surface area: A height-weight formula validated in infants, children and</span></span>
<span id="cb37-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adults" J Pediatr 1978, 93:62-66.</span></span>
<span id="cb37-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haycock"</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.024265</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5378</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3964</span>)</span>
<span id="cb37-19"></span>
<span id="cb37-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gehan EA, George SL, Cancer Chemother Rep 1970, 54:225-235</span></span>
<span id="cb37-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gehan"</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0235</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.51456</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.42246</span>)</span>
<span id="cb37-22"></span>
<span id="cb37-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Boyd, Edith (1935). The Growth of the Surface Area of the Human Body.</span></span>
<span id="cb37-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># University of Minnesota. The Institute of Child Welfare, Monograph Series,</span></span>
<span id="cb37-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No. x. London: Oxford University Press</span></span>
<span id="cb37-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boyd"</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03330</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6157</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0188</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log10</span>(w)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb37-27"></span>
<span id="cb37-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fujimoto S, Watanabe T, Sakamoto A, Yukawa K, Morimoto K. Studies on the</span></span>
<span id="cb37-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># physical surface area of Japanese. 18. Calculation formulae in three stages</span></span>
<span id="cb37-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># over all ages. Nippon Eiseigaku Zasshi 1968;5:443-50.</span></span>
<span id="cb37-31">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fujimoto"</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.008883</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.444</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.663</span>)</span>
<span id="cb37-32"></span>
<span id="cb37-33">  rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unknown BSA method"</span>)</span>
<span id="cb37-34">}</span></code></pre></div>
</div>
<p>The six formulae I‚Äôve implemented in my <code>compute_bsa()</code> are by no means exhaustive, and while browsing the literature on the topic I found several other approaches that I haven‚Äôt gotten around to implementing. However, this will be more than sufficient for my example.</p>
<p>Looking at the code above, you might wonder why I‚Äôve chosen a formula from 1916 to be the default. The choice wasn‚Äôt arbitrary: in my experience the Dubois formula is almost <em>always</em> the default method used in BSA calculation code, and the single most important thing when doing simulations of this kind is consistency. None of these formulae will be perfect, but to the extent that they‚Äôre a little inexact the idiosyncracies can be accommodated ‚Äúupstream‚Äù when estimating parameters of a pharmacokinetic (PK) model. So from my perspective as the person implementing simulations that <em>use</em> these PK models, the most important thing is that I use the same formula that was used upstream. Almost always that means I use Dubois.</p>
<p>Nevertheless, a girl gets curious from time to time. The world has changed a lot since 1916, as have nutrition and exercise patterns. Similarly, a formula developed for the entire population might have different characteristics to something like the Haycock method that was developed more recently<sup>5</sup> and specifically validated in infants and children.</p>
<p>Let‚Äôs take a look. The visualisation below plots the height-weight values that map to an estimated body surface area of 0.5 m<sup>2</sup>. The solid line depicts the Dubois-constructed curve, and the dashed line corresponds to the Haycock formula. There‚Äôs a clear difference between the two, but it‚Äôs unclear if this matters much. In the plots below, I‚Äôve plotted the data <em>only</em> for those cases that exceed the Dubois threshold. For example, if we had a drug that could only be administered to infants with a BSA above 0.5 m<sup>2</sup>, these are the infants and young children who would be allowed to take the medication:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">bsa_cutoff <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb38-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_cm =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>,</span>
<span id="cb38-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dubois  =</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.007184</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (height_cm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.725</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.425</span>),</span>
<span id="cb38-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">haycock =</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.024265</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (height_cm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3964</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5378</span>)</span>
<span id="cb38-5">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb38-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(dubois, haycock),</span>
<span id="cb38-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>,</span>
<span id="cb38-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight_kg"</span></span>
<span id="cb38-10">  )</span>
<span id="cb38-11"></span>
<span id="cb38-12">bsa_pop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pop <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(age_mn, age_band_fct, height_cm, weight_kg, sex_fct, source) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_mn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">72</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb38-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bsa_m2_dubois  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_bsa</span>(height_cm, weight_kg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dubois"</span>),</span>
<span id="cb38-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bsa_m2_haycock =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_bsa</span>(height_cm, weight_kg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haycock"</span>)</span>
<span id="cb38-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(bsa_m2_dubois <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) </span>
<span id="cb38-20"> </span>
<span id="cb38-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb38-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb38-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> bsa_pop,</span>
<span id="cb38-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(height_cm, weight_kg), </span>
<span id="cb38-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb38-26">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb38-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> bsa_cutoff,</span>
<span id="cb38-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(height_cm, weight_kg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> method)</span>
<span id="cb38-30">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(age_band_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> source, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-07_gamlss/index_files/figure-html/height-weight-bsa-scatterplot-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Hm. Okay, so in the region of height/weight space that is relevant to human populations, there is a tendency for the Haycock formula to estimate lower BSA values than Dubois. Moreover, the difference is not merely a shift of the curve up or down: the Dubois formula relies more on weight than the Haycock formula, leading to an ‚Äúambiguous triangle‚Äù in the plots where an infant might meet the threshold according to Haycock, but not according to Dubois. It‚Äôs also very clear that the issue <em>only</em> pertains to infants. Looking at the bottom row of plots, it‚Äôs clear that both the raw NHANES data and the GAMLSS model agree that the vast majority of 2-6 year olds will exceed the threshold regardless of which formula is used. The issue is only relevant for infants, and ‚Äì irritatingly ‚Äì even the NHANES data set is a bit sparse when we focus on infants. It becomes even moreso if we want a detailed month-by-month breakdown.</p>
<p>If only we had a <em>model</em> we could use to generate a large data set in the exact age range of interest‚Ä¶</p>
<p>Oh.</p>
<p>Right.</p>
<p>We do.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">cases <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb39-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_mn  =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>,</span>
<span id="cb39-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_fct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>))</span>
<span id="cb39-4">)</span>
<span id="cb39-5"></span>
<span id="cb39-6">bsa_pop_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_hw</span>(</span>
<span id="cb39-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_mn  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(cases<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age_mn, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>),</span>
<span id="cb39-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex_fct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(cases<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sex_fct, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>),</span>
<span id="cb39-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mod =</span> mod </span>
<span id="cb39-10">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb39-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb39-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(),</span>
<span id="cb39-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bsa_m2_dubois  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_bsa</span>(height_cm, weight_kg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dubois"</span>),</span>
<span id="cb39-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bsa_m2_haycock =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_bsa</span>(height_cm, weight_kg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haycock"</span>),</span>
<span id="cb39-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">threshold =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb39-16">      bsa_m2_dubois <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> bsa_m2_haycock <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"above both"</span>,</span>
<span id="cb39-17">      bsa_m2_dubois <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> bsa_m2_haycock <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"above dubois only"</span>,</span>
<span id="cb39-18">      bsa_m2_dubois <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> bsa_m2_haycock <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>  .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"above haycock only"</span>,</span>
<span id="cb39-19">      bsa_m2_dubois <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> bsa_m2_haycock <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"below both"</span>,</span>
<span id="cb39-20">    )</span>
<span id="cb39-21">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb39-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relocate</span>(id, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb39-23"></span>
<span id="cb39-24">bsa_pop_2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 480,000 √ó 8
      id age_mn sex_fct height_cm weight_kg bsa_m2_dubois bsa_m2_haycock
   &lt;int&gt;  &lt;int&gt; &lt;fct&gt;       &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;
 1     1      1 male         58.1      5.70         0.286          0.310
 2     2      1 female       55.0      4.37         0.246          0.263
 3     3      2 male         62.2      6.58         0.319          0.343
 4     4      2 female       56.5      4.52         0.254          0.270
 5     5      3 male         59.6      6.41         0.307          0.333
 6     6      3 female       63.6      7.08         0.335          0.361
 7     7      4 male         64.4      6.87         0.334          0.356
 8     8      4 female       63.8      6.34         0.321          0.340
 9     9      5 male         65.9      7.42         0.351          0.375
10    10      5 female       64.5      8.19         0.360          0.392
# ‚Ñπ 479,990 more rows
# ‚Ñπ 1 more variable: threshold &lt;chr&gt;</code></pre>
</div>
</div>
<p>So now ‚Äì thanks to the modern marvel that is the GAMLSS regression framework ‚Äì we have a large data set simulated to have the correct height/weight distribution, focused on the precise age range of interest. We can now do a ‚Äúmonth by month‚Äù plot showing how the height/weight distribution shifts over the first 24 months of life, and see what happens as this distribution ‚Äúpushes‚Äù above the 0.5 m<sup>2</sup> threshold.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb41-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb41-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> bsa_pop_2,</span>
<span id="cb41-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(height_cm, weight_kg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> threshold), </span>
<span id="cb41-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, </span>
<span id="cb41-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>,</span>
<span id="cb41-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb41-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb41-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb41-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> bsa_cutoff,</span>
<span id="cb41-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(height_cm, weight_kg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> method)</span>
<span id="cb41-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb41-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> age_mn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb41-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-07_gamlss/index_files/figure-html/height-weight-bsa-scatterplot-detailed-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>In the plots above the density is coloured in blue in the region below both thresholds, and red when it is above both threshold. The ‚Äúambiguity triangle‚Äù region is shown in green. For very young infants there are almost no ambiguous cases at the 0.5 m<sup>2</sup> threshold, and by the time we‚Äôd start using the word ‚Äúchild‚Äù rather than ‚Äúinfant‚Äù the ambiguity is also largely irrelevant to any practical situation.</p>
<p>We can push this slightly further and plot the proportion of infants that exceed the Dubois threshold and the Haycock threshold as a function of their age; and plot this separately for three different choices of threshold value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">bsa_pop_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb42-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dubois_0.4  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bsa_m2_dubois <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>),</span>
<span id="cb42-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dubois_0.5  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bsa_m2_dubois <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb42-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dubois_0.6  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bsa_m2_dubois <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>),</span>
<span id="cb42-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">haycock_0.4 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bsa_m2_haycock <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>),</span>
<span id="cb42-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">haycock_0.5 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bsa_m2_haycock <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb42-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">haycock_0.6 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(bsa_m2_haycock <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>),</span>
<span id="cb42-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> age_mn</span>
<span id="cb42-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb42-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb42-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dubois"</span>), </span>
<span id="cb42-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haycock"</span>)</span>
<span id="cb42-15">    ),</span>
<span id="cb42-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>,</span>
<span id="cb42-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"percent_above_threshold"</span></span>
<span id="cb42-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(</span>
<span id="cb42-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> group, </span>
<span id="cb42-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">into =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"method"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"threshold"</span>), </span>
<span id="cb42-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span></span>
<span id="cb42-23">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">threshold =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BSA &gt;"</span>, threshold, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m^2"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb42-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> age_mn, </span>
<span id="cb42-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> percent_above_threshold, </span>
<span id="cb42-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> method, </span>
<span id="cb42-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> method</span>
<span id="cb42-30">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>threshold) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-36">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-07_gamlss/index_files/figure-html/bsa-method-comparison-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Neat. In practice I think this is pretty reassuring because it suggests that when we look at it solely as a proportion of infants above and below the threshold as a function of their age, the main thing that happens if we switch from Dubois to Haycock is that the curve shifts slightly left, and that‚Äôs pretty easy to adjust for: you just modify the threshold slightly if you want to! The ‚Äúambiguity triangle‚Äù I showed above would only start to matter <em>if</em> there was some possible adverse effect that varies systematically by weight but not height (or vice versa), <em>and</em> said adverse effect was specifically relevant in the age range over which the Dubois and Haycock formulae differ. I imagine that it‚Äôs possible that this could happen, but I‚Äôve not yet seen anything like that in the wild.</p>
</section>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>This has been a long post. Painfully long, if we acknowledge that I wrote <a href="../../posts/2025-09-06_p-splines/">the last post</a> and <a href="../../posts/2025-08-02_box-cox-power-exponential/">the one before that</a> in service of making this one work. They are, in effect, the appendices to this post. This post, she looooooooong. Yet in truth there‚Äôs a lot I haven‚Äôt talked about. Fitting a GAMLSS model to the NHANES data is a handy thing to do, but the framework becomes much more powerful when we start trying to work with data sets that are smaller and sparser, or seek to build models to account for a more diverse population. For example, there‚Äôs a nice paper by <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4339962/pdf/BLT.14.139113.pdf">Hayes et al (2014)</a> that provides detailed regional weight-for-age charts based on GAMLSS models that covers parts of the world that are <em>not</em> in North America, and as one of the literally dozens of people who live in a country that is not the United States, and who knows people who live in countries that aren‚Äôt well described by NHANES and ‚Äì <em>gasp</em> ‚Äì cares about those people even if she doesn‚Äôt know them, I love the fact that people take this stuff seriously enough to do this kind of work.</p>
<p>That seems like a fitting note upon which to end. I‚Äôm done, I‚Äôm finished, and like Lana I‚Äôm off to the races babes.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>One thing I will note as an aside, however, is that this stipulation is one of the key ways in which GAMLSS models extend GAM regressions and GLM analyses. In the GAM and GLM frameworks, the probabilistic component is assumed to be a distribution in the <a href="https://en.wikipedia.org/wiki/Exponential_family">exponential family</a>. The GAMLSS framework relaxes that considerably, insofar as location/scale/shape encompasses many distributions that fall outside the exponential family.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>More precisely, for the BCPE distribution the scale parameter <img src="https://latex.codecogs.com/png.latex?%5Csigma"> roughly maps onto the coefficient of variation.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>The <strong>gamlss</strong> package documentation notes there is nothing sophisticated about how the interactions are implemented for spline predictors; it literally multiplies the two terms.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>A good example of this would be a drug where the approved dosing depends both on weight and body surface area. That happens sometimes, and since body surface area is approximated by a formula based one weight and height (and occasionally sex, depending on which formula you‚Äôre using), we need the full joint conditional distribution in those cases.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>I mean, I don‚Äôt know that 1978 counts as ‚Äúrecent‚Äù by any stretch of the imagination, but since I <em>was</em> an infant in 1978 I think I‚Äôll let that one slide.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {GAMLSS, {NHANES,} and My Own Personal Hell},
  date = {2025-09-07},
  url = {https://blog.djnavarro.net/posts/2025-09-07_gamlss/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúGAMLSS, NHANES, and My Own Personal
Hell.‚Äù</span> September 7, 2025. <a href="https://blog.djnavarro.net/posts/2025-09-07_gamlss/">https://blog.djnavarro.net/posts/2025-09-07_gamlss/</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2025-09-07_gamlss/</guid>
  <pubDate>Sat, 06 Sep 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-09-07_gamlss/agnes-enid.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Splines, B-splines, P-splines, and a disapproving kitten</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-09-06_p-splines/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span></code></pre></div>
</div>
<p>This is a post about splines. It‚Äôs also a post about ‚Äúbasis splines‚Äù and ‚Äúpenalised splines‚Äù, a fact that does not endear it to me greatly. Indeed, let‚Äôs be brutally honest here, dear reader: I do not care for penalised splines any more than I care for the <a href="../../posts/2025-08-02_box-cox-power-exponential/">Box-Cox power exponential distribution</a> that I wittered on about in the last post. I did not care about the BCPE then and I do not care about P-splines now. Unfortunately, in much the same way that I had to learn about the BCPE distribution in order to understand the <a href="https://en.wikipedia.org/wiki/Generalized_additive_model_for_location,_scale_and_shape">GAMLSS regression</a> framework that I‚Äôm going to talk about in the <a href="../../posts/2025-09-07_gamlss/">next post</a> ‚Äì so much so that my BCPE notes became their own sad and sorry post ‚Äì I have fallen prey to my vices and again found myself through the looking glass, shaving an unhappy yak, and writing about a topic very different to the one I originally intended to.</p>
<p>Oh well.</p>
<section id="splines" class="level2">
<h2 class="anchored" data-anchor-id="splines">Splines</h2>
<p>A <a href="https://en.wikipedia.org/wiki/Spline_(mathematics)">spline</a> is just a piecewise polynomial, and for the sake of my sanity I‚Äôm only going to consider polynomials in a single variable <img src="https://latex.codecogs.com/png.latex?x">, and consider a spline function <img src="https://latex.codecogs.com/png.latex?f(x)"> defined over the interval <img src="https://latex.codecogs.com/png.latex?%5Ba,%20b%5D">. To build the spline, we partition the interval <img src="https://latex.codecogs.com/png.latex?%5Ba,%20b%5D"> into <img src="https://latex.codecogs.com/png.latex?m"> disjoint regions <img src="https://latex.codecogs.com/png.latex?r_1,%20r_2,%20%5Cldots,%20r_m">, whose edges are defined by a vector of <strong>knot</strong> points <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bk%7D%20=%20(k_0,%20k_1,%20%5Cldots,%20k_m)">.<sup>1</sup> If we order the knot points such that <img src="https://latex.codecogs.com/png.latex?k_i%20%5Cleq%20k_%7Bi+1%7D"> and set <img src="https://latex.codecogs.com/png.latex?k_0%20=%20a"> and <img src="https://latex.codecogs.com/png.latex?k_m%20=%20b">, then the <img src="https://latex.codecogs.com/png.latex?i">-th region corresponds to the interval <img src="https://latex.codecogs.com/png.latex?%5Bk_%7Bi-1%7D,%20k_i%5D"> between two successive knots.<sup>2</sup> Given this partition we can then define a continuous spline function in terms of <img src="https://latex.codecogs.com/png.latex?m"> distinct polynomial functions <img src="https://latex.codecogs.com/png.latex?p_1(x),%20p_2(x),%20%5Cldots%20p_m(x)">, one for each subinterval. Our spline function is just a fancy if-then rule. If the point <img src="https://latex.codecogs.com/png.latex?x"> lies within region <img src="https://latex.codecogs.com/png.latex?r_i">, use the polynomial <img src="https://latex.codecogs.com/png.latex?p_i(x)">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%0A%5Cleft%5C%7B%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ap_1(x)%20&amp;%5Cmbox%7Bif%7D&amp;%20x%20%5Cin%20r_1%20%5C%5C%0Ap_2(x)%20&amp;%5Cmbox%7Bif%7D&amp;%20x%20%5Cin%20r_2%20%5C%5C%0A%5Cldots%20%5C%5C%0Ap_k(x)%20&amp;%5Cmbox%7Bif%7D&amp;%20x%20%5Cin%20r_k%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright.%0A"></p>
<p>To ensure that the resulting spline function <img src="https://latex.codecogs.com/png.latex?f(x)"> is continuous, the polynomials must be constrained so the polynomials on either side of the knot point have the same value at the knot point that connects them.<sup>3</sup> To help get a feel for how splines work, I wrote <code>piecewise()</code> function that takes knot vector and a list of functions as inputs, and returns the corresponding piecewise polynomial function <code>f</code>. The source for <code>piecewise()</code> isn‚Äôt very interesting but for what it‚Äôs worth it‚Äôs hidden below the fold here:</p>
<div class="cell">
<details class="code-fold">
<summary>Code for piecewise()</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">piecewise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(knots, funs) { </span>
<span id="cb2-2">  f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb2-3">    k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(funs)</span>
<span id="cb2-4">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb2-5">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>, n)</span>
<span id="cb2-6">    r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_integer_</span>, n)</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>k) {</span>
<span id="cb2-8">      ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> knots[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> knots[i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-9">      r[ind] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i</span>
<span id="cb2-10">      y[ind] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> funs[[i]](x[ind])</span>
<span id="cb2-11">    }</span>
<span id="cb2-12">    ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> knots[k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-13">    r[ind] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> k</span>
<span id="cb2-14">    y[ind] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> funs[[k]](x[ind])</span>
<span id="cb2-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"region"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> r</span>
<span id="cb2-16">    y</span>
<span id="cb2-17">  }</span>
<span id="cb2-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knots"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knots</span>
<span id="cb2-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"funs"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> funs</span>
<span id="cb2-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(f)</span>
<span id="cb2-21">}</span></code></pre></div>
</details>
</div>
<p>In my implementation the spline function is undefined outside the interval <img src="https://latex.codecogs.com/png.latex?%5Ba,%20b%5D"> so the values outside the interval are always <code>NA</code>, but I suppose other choices could be made. It‚Äôs not important: my <code>piecewise()</code> function isn‚Äôt intended for serious use, it‚Äôs just something I wrote so that I could play around with simple splines before moving into the world of pain that is B-splines and P-splines. Armed with this entirely uninteresting tool, let‚Äôs consider the following example. At the risk of stretching the imagination beyond the limits of human capability, let‚Äôs try to pretend that I am deeply interested in the following spline:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%0A%5Cleft%5C%7B%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A2x%5E2%20-%203x%20+%202%20&amp;%20%5Cmbox%7Bif%7D%20&amp;%20x%20%5Cin%20%5B0,%201%5D%20%5C%5C%0Ax%20&amp;%20%5Cmbox%7Bif%7D%20&amp;%20x%20%5Cin%20%5B1,%203%5D%20%5C%5C%0A-x%5E3%20+%2028x%20-%2054%20&amp;%5Cmbox%7Bif%7D%20&amp;%20x%20%5Cin%20%5B3,%203.5%5D%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright.%0A"></p>
<p>It is comprised of three polynomials of different <a href="https://en.wikipedia.org/wiki/Degree_of_a_polynomial">degree</a>: there‚Äôs a linear function (degree 1), a quadratic function (degree 2), and a cubic function (degree 3). So the degree of our spline is at most 3. For reasons that escape me, if the maximum degree of any of the polynomial pieces is <img src="https://latex.codecogs.com/png.latex?d">, we say that the spline is of <strong>order</strong> <img src="https://latex.codecogs.com/png.latex?d+1">. So this is a spline of order 4. Again, thrilling. But let‚Äôs suppose I want to implement this spline using my <code>piecewise()</code> function. All I need to do is this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">piecewise</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">knots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>),</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">funs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb3-4">    \(x) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># left piece is quadratic</span></span>
<span id="cb3-5">    \(x) x,               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># middle piece is linear</span></span>
<span id="cb3-6">    \(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right piece is cubic</span></span>
<span id="cb3-7">  )</span>
<span id="cb3-8">) </span></code></pre></div>
</div>
<p>Yay. To get a sense of what the function looks like I‚Äôll also define a <code>plot_piecewise()</code> function that plots the spline over the interval <img src="https://latex.codecogs.com/png.latex?%5Ba,%20b%5D">, but it‚Äôs really boring so I‚Äôm again going to hide the code behind the fold and jump straight to plotting the spline function <code>f</code>:</p>
<div class="cell">
<details class="code-fold">
<summary>Code for plot_piecewise()</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">plot_piecewise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(f, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>L) {</span>
<span id="cb4-2"></span>
<span id="cb4-3">  lb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knots"</span>))</span>
<span id="cb4-4">  ub <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knots"</span>))</span>
<span id="cb4-5">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(lb, ub, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n)</span>
<span id="cb4-6"></span>
<span id="cb4-7">  dat_sp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb4-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x),</span>
<span id="cb4-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"region"</span>))</span>
<span id="cb4-11">  )</span>
<span id="cb4-12"></span>
<span id="cb4-13">  dat_pn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"funs"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(p) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">p</span>(x))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(r))</span>
<span id="cb4-17"></span>
<span id="cb4-18">  dat_kn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knots"</span>),</span>
<span id="cb4-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x)</span>
<span id="cb4-21">  )</span>
<span id="cb4-22"></span>
<span id="cb4-23">  plt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat_sp, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> r), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat_pn, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> r)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat_sp, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> r), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat_kn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f(x)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polynomial"</span>)</span>
<span id="cb4-29"></span>
<span id="cb4-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(plt)</span>
<span id="cb4-31">}</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_piecewise</span>(f) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/piecewise-0-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>First derivatives are continuous:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">f_deriv1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">piecewise</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">knots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>),</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">funs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb6-4">    \(x) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1st derivative of left piece</span></span>
<span id="cb6-5">    \(x) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1st derivative of middle piece </span></span>
<span id="cb6-6">    \(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1st derivative of right piece</span></span>
<span id="cb6-7">  )</span>
<span id="cb6-8">)</span>
<span id="cb6-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_piecewise</span>(f_deriv1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/piecewise-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Second derivatives are not:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">f_deriv2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">piecewise</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">knots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>),</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">funs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb7-4">    \(x) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2nd derivative of left piece</span></span>
<span id="cb7-5">    \(x) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2nd derivative of middle piece</span></span>
<span id="cb7-6">    \(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2nd derivative of right piece</span></span>
<span id="cb7-7">  )</span>
<span id="cb7-8">)</span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_piecewise</span>(f_deriv2)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/piecewise-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>To put it in slightly fancier language, since the 0th derivative (the function) and 1st derivative are continuous everywhere we say that our example spline has <strong>smoothness 1 everywhere</strong>. However, because the 2nd derivatives are discontinuous at the knot points, the spline does not have smoothness 2 at the knots. More generally, for the spline to have <a href="https://en.wikipedia.org/wiki/Smoothness">smoothness</a> <img src="https://latex.codecogs.com/png.latex?s"> at a knot, the derivatives of orders <img src="https://latex.codecogs.com/png.latex?0,%201,%20%5Cldots,%20s"> of adjacent polynomials must all be equal at the knot point.</p>
<p>Yeah, yeah, whatever.</p>
</section>
<section id="b-splines" class="level2">
<h2 class="anchored" data-anchor-id="b-splines">B-splines</h2>
<p>Next comes the ‚Äúbasis spline‚Äù trick. As it happens, you can rewrite <em>any</em> spline as a weighted sum of so-called B-splines. Let <img src="https://latex.codecogs.com/png.latex?f_%7Bm,%20%5Cmathbf%7Bk%7D%7D(x)"> denote a spline function of order <img src="https://latex.codecogs.com/png.latex?m"> with knot vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bk%7D">. Then</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af_%7Bm,%20%5Cmathbf%7Bk%7D%7D(x)%20=%20%5Csum_i%20%5Calpha_i%20%5C%20B_%7Bi,m%7D(x)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?B_%7Bi,m%7D(x)"> is a <strong>basis spline</strong> (<a href="https://en.wikipedia.org/wiki/B-spline">B-spline</a>) function defined with respect to the same knot vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bk%7D">, and the coefficient <img src="https://latex.codecogs.com/png.latex?%5Calpha_i"> define the weight assigned to the <img src="https://latex.codecogs.com/png.latex?i">-th basis spline of order <img src="https://latex.codecogs.com/png.latex?m">. The basis spline functions are themselves splines, but they are a specific set of spline functions designed to give us the result above.<sup>4</sup> From the perspective of a data analyst who wants to fit an arbitrary spline function to a set of points, it can be awfully convenient to work with basis splines because the problem of estimating the unknown spline function <img src="https://latex.codecogs.com/png.latex?f(x)"> can be transformed into the problem of estimating the coefficients <img src="https://latex.codecogs.com/png.latex?%5Calpha">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AB_%7Bi,0%7D(x)%20=%0A%5Cleft%5C%7B%0A%20%20%5Cbegin%7Barray%7D%7Brl%7D%0A%20%201%20&amp;%20%5Cmbox%7B%20if%20%7D%20x%20%5Cin%20%5Bk_i,%20k_%7Bi+1%7D)%20%5C%5C%0A%20%200%20&amp;%20%5Cmbox%7B%20otherwise%7D%0A%20%20%5Cend%7Barray%7D%0A%5Cright.%0A"></p>
<p>The higher-order basis splines can be conveniently constructed using the Cox-de Boer recursion which expresses a basis spline of order <img src="https://latex.codecogs.com/png.latex?m"> as a weighted sum of two basis splines of order <img src="https://latex.codecogs.com/png.latex?m-1">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AB_%7Bi,m%7D(x)%20%5C%20=%20%5C%20%5Cfrac%7Bx%20-%20k_i%7D%7Bk_%7Bi+m%7D%20-%20k_i%7D%20B_%7Bi,%20m-1%7D(x)%20%5C%20+%20%5C%20%5Cfrac%7Bk_%7Bi+m+1%7D%20-%20x%7D%7Bk_%7Bi+m+1%7D%20-%20k_%7Bi+1%7D%7D%20B_%7Bi+1,%20m-1%7D(x)%0A"></p>
<p>Again, just to provide a sense of what these basis spline functions look like, we‚Äôll use B-splines with evenly spaced knots, and ‚Äì using a very hacky <code>plot_b_splines()</code> function hidden below the fold ‚Äì show what B-splines look like when we increase the order of the splines that we wish to represent using them.</p>
<div class="cell">
<details class="code-fold">
<summary>Code for b_spline(), even_knots(), plot_b_splines()</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">even_knots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n_internal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k0 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kn =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb8-2">  k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(i) {</span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(k0)</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> (n_internal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(kn)</span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(k0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (kn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k0) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(i)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(n_internal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb8-6">  }</span>
<span id="cb8-7">  knot_vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (k0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (kn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k0) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(n_internal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(n_internal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(k, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_internal"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n_internal</span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(k, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knots"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knot_vals</span>
<span id="cb8-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(k)</span>
<span id="cb8-11">}</span>
<span id="cb8-12"></span>
<span id="cb8-13">knots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">even_knots</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb8-14"></span>
<span id="cb8-15">b_spline <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, i, m, k) {</span>
<span id="cb8-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb8-17">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x))</span>
<span id="cb8-18">    y[x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb8-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y)</span>
<span id="cb8-20">  } </span>
<span id="cb8-21"></span>
<span id="cb8-22">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb8-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i)) w1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n)</span>
<span id="cb8-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i)) w1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i))</span>
<span id="cb8-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) w2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n)</span>
<span id="cb8-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) w2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb8-27"></span>
<span id="cb8-28">  y1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, i, m<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, k)</span>
<span id="cb8-29">  y2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, m<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, k)</span>
<span id="cb8-30">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (w1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (w2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y2)</span>
<span id="cb8-31"></span>
<span id="cb8-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y)</span>
<span id="cb8-33">}</span>
<span id="cb8-34"></span>
<span id="cb8-35">plot_b_splines <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(degree, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">knots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">even_knots</span>(degree)) {</span>
<span id="cb8-36">  k0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(knots, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knots"</span>))</span>
<span id="cb8-37">  kn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(knots, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knots"</span>))</span>
<span id="cb8-38">  x_val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(k0, kn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L)</span>
<span id="cb8-39">  n_internal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(knots, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_internal"</span>)</span>
<span id="cb8-40">  knot_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_internal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n_internal</span>
<span id="cb8-41">  dat_fn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knot_index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(\(i_val) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb8-43">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_val,</span>
<span id="cb8-44">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> i_val, </span>
<span id="cb8-45">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(</span>
<span id="cb8-46">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_val, </span>
<span id="cb8-47">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> i_val, </span>
<span id="cb8-48">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> degree, </span>
<span id="cb8-49">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> knots</span>
<span id="cb8-50">      )</span>
<span id="cb8-51">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-52">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(i))</span>
<span id="cb8-53">  dat_kn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb8-54">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(knot_index, knots),</span>
<span id="cb8-55">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-56">  )</span>
<span id="cb8-57">  plt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-58">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb8-59">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat_fn, </span>
<span id="cb8-60">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> i),</span>
<span id="cb8-61">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb8-62">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb8-63">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-64">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb8-65">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat_kn, </span>
<span id="cb8-66">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y),</span>
<span id="cb8-67">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb8-68">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-69">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-70">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B(x)"</span>)</span>
<span id="cb8-71">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(plt)</span>
<span id="cb8-72">}</span></code></pre></div>
</details>
</div>
<section id="flat-splines" class="level3">
<h3 class="anchored" data-anchor-id="flat-splines">Flat ‚Äúsplines‚Äù</h3>
<p>For the degree 0 basis splines, there‚Äôs‚Ä¶ really not very much to say. Like, okay, if we call my plotting code it shows us that yup, the basis functions are just step functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_b_splines</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">degree =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, knots)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/b-splines-0-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The only interesting thing to note here is that each basis spline covers only a single region, and since the knots carve the interval into 5 regions, there‚Äôs only 5 basis splines that are identical apart from being shifted.<sup>5</sup> The key thing to notice is that if I define a new spline using these as my B-splines (with the assistance of the <code>b_spline()</code> function that is also hidden behind the fold above), I‚Äôll always end up with step functions (i.e., piecewise flat):</p>
<div class="cell">
<details class="code-fold">
<summary>Code for plot_custom_spline()</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">plot_custom_spline <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(f) {</span>
<span id="cb10-2">  dat_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>),</span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x)    </span>
<span id="cb10-5">  )</span>
<span id="cb10-6">  dat_k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb10-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(knots, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knots"</span>), </span>
<span id="cb10-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x)</span>
<span id="cb10-9">  )</span>
<span id="cb10-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat_f) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat_k)</span>
<span id="cb10-13">}</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">my_spline_0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb11-2">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-3">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-4">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-5">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-6">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, knots)</span>
<span id="cb11-7">}</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_custom_spline</span>(my_spline_0)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/my-spline-0-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>I mean, I guess this isn‚Äôt technically a splines at all since it isn‚Äôt continuous, but whatever. You get the basic idea: when building a function from a linear combination of 0-degree B-splines defined with respect to a set of knots, you can create an arbitrary step function with breakpoints located at those knots. But you can <em>only</em> create step functions, nothing else.</p>
</section>
<section id="linear-splines" class="level3">
<h3 class="anchored" data-anchor-id="linear-splines">Linear splines</h3>
<p>So that makes sense. Let‚Äôs now see what the 1-degree B-splines look like, again using my somewhat-hacky <code>plot_b_splines()</code> function to do the work:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_b_splines</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">degree =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, knots)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/b-splines-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Hm. Okay, so our basis splines here are always triangular in shape. It took me a little bit of thinking to understand the implications of this, but there are three:</p>
<ul>
<li>when we add these together we will end up with piecewise-linear functions</li>
<li>by design they will connect at the knots, so we ‚Äúgain‚Äù one degree of continuity</li>
<li>all of our B-splines now span two subintervals, so they always have one internal knot, and we‚Äôve gained one extra B-spline</li>
</ul>
<p>That last point might not be obvious because it kind of <em>looks</em> like some of our 1-degree B-splines don‚Äôt have any internal knots, but looks are deceiving: when creating knots for higher degree B-splines, we have to ‚Äútie‚Äù it with several knots all located at the ends of the interval. So, for instance, the pink asymmetric triangle at the bottom right hand side of the plot above actually does have an internal knot, it just happens to be located at the exact same place as the right-hand knot.<sup>6</sup></p>
<p>Aaaaaaannnnnnyway. It‚Äôs not like any of this is terribly interesting, but to convince ourselves that that a linear combination of 1-degree B-splines will produce another 1-degree (piecewise linear) spline, let‚Äôs make one and plot it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">my_spline_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb13-2">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-3">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-4">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-5">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-6">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-7">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, knots)</span>
<span id="cb13-8">}</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_custom_spline</span>(my_spline_1)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/my-spline-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Yup. As expected.</p>
</section>
<section id="quadratic-splines" class="level3">
<h3 class="anchored" data-anchor-id="quadratic-splines">Quadratic splines</h3>
<p>Next we turn to quadratic splines. First let‚Äôs have a look at our basis splines. Again, because we‚Äôve increased the order of the B-splines we have gained one more spline, and the quadratic splines we create from these will gain an additional degree of continuity (i.e., the first derivatives will be continuous at the knots). Here they are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_b_splines</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">degree =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, knots)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/b-splines-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Once again, I‚Äôll create a quadratic spline as a linear combination of the 2-degree B-splines. Notice that I‚Äôm not changing the weights assigned to the B-splines when I do so‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">my_spline_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb15-2">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-3">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-4">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-5">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-6">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-7">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-8">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, knots)</span>
<span id="cb15-9">}</span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_custom_spline</span>(my_spline_2)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/my-spline-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>‚Ä¶and the result is a piecewise-quadratic function that looks rather similar to the piecewise-linear function I built in the previous section, just a little smoother.</p>
</section>
<section id="cubic-splines" class="level3">
<h3 class="anchored" data-anchor-id="cubic-splines">Cubic splines</h3>
<p>At this point it‚Äôs probably obvious that I could keep playing this game as long as I wanted to, but I‚Äôm getting bored already so let‚Äôs do one last round and take a look at 3-degree B-splines. Visually they don‚Äôt look much different to the 2-degree ones, but they aren‚Äôt quite the same:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_b_splines</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">degree =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, knots)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/b-splines-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As before, we can create a cubic spline by taking a linear combination of these 3-degree B-splines:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">my_spline_3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb17-2">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-3">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-4">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-5">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-6">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-7">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-8">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, knots) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-9">  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, knots)</span>
<span id="cb17-10">}</span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_custom_spline</span>(my_spline_3)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/my-spline-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>It looks very similar to the quadratic version, but they aren‚Äôt quite the same. We could keep going and look at quartic and quintic splines if we wanted to but at this point it‚Äôs starting to seem a little silly. Besides, in practice we don‚Äôt usually go above cubic splines in real life data analysis, from what I can tell.</p>
</section>
</section>
<section id="least-squares-estimation" class="level2">
<h2 class="anchored" data-anchor-id="least-squares-estimation">Least squares estimation</h2>
<p>We are making progress, I think? At this point I‚Äôm starting to get a decent intuitive feel for B-splines. That‚Äôs good. That being said, I can‚Äôt help but notice that it is 11pm on a Sunday night and I am aaaaaaawfully keen to finish this post and the <a href="../../posts/2025-09-07_gamlss/">GAMLSS post</a> that I am wrapping up in parallel with this one. So let‚Äôs move things along yeah?</p>
<p>Up to this point I‚Äôve built a very simple framework for working with B-splines, and to define arbitrary splines using B-splines. What I don‚Äôt have yet is any way to <em>estimate</em> a spline using data. Now, in the real world I don‚Äôt actually need to do this myself, because there are many tools in R that already do so, and said tools are implemented soooo much better than any hacky code I could write for myself in a weekend. But that is beside the point. My goal here is to build something that helps <em>me</em> understand how it works, so let‚Äôs do something hacky. Here‚Äôs the entire ‚Äúframwork‚Äù, in all its horrible, terrible, no good, very bad glory:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns a function used to specify knots</span></span>
<span id="cb18-2">even_knots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n_internal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k0 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kn =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb18-3">  k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(i) {</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(k0)</span>
<span id="cb18-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> (n_internal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(kn)</span>
<span id="cb18-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(k0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (kn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k0) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(i)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(n_internal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb18-7">  }</span>
<span id="cb18-8">  knot_vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (k0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (kn <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k0) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(n_internal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(n_internal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(k, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_internal"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n_internal</span>
<span id="cb18-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(k, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knots"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knot_vals</span>
<span id="cb18-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(k)</span>
<span id="cb18-12">}</span>
<span id="cb18-13"></span>
<span id="cb18-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function implementing B-splines </span></span>
<span id="cb18-15">b_spline <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, i, m, k) {</span>
<span id="cb18-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb18-17">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x))</span>
<span id="cb18-18">    y[x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb18-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y)</span>
<span id="cb18-20">  } </span>
<span id="cb18-21"></span>
<span id="cb18-22">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb18-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i)) w1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n)</span>
<span id="cb18-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i)) w1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i))</span>
<span id="cb18-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) w2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n)</span>
<span id="cb18-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) w2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">k</span>(i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb18-27"></span>
<span id="cb18-28">  y1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, i, m<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, k)</span>
<span id="cb18-29">  y2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, m<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, k)</span>
<span id="cb18-30">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (w1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (w2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y2)</span>
<span id="cb18-31"></span>
<span id="cb18-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y)</span>
<span id="cb18-33">}</span>
<span id="cb18-34"></span>
<span id="cb18-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># given a set of knots (k) and their weights (a), predict the </span></span>
<span id="cb18-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># value of corresponding cubic spline at a set of points (x)</span></span>
<span id="cb18-37">cubic_spline <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, a, k) {</span>
<span id="cb18-38">  n_k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(k, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_internal"</span>)</span>
<span id="cb18-39">  n_s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(a)</span>
<span id="cb18-40">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n_s <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_k) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"argh..."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb18-41">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x))</span>
<span id="cb18-42">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(a)) {</span>
<span id="cb18-43">    k_i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n_k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i </span>
<span id="cb18-44">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_spline</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> k_i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, k)</span>
<span id="cb18-45">  }</span>
<span id="cb18-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y)</span>
<span id="cb18-47">}</span>
<span id="cb18-48"></span>
<span id="cb18-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># least squares loss function for parameters (a), observed</span></span>
<span id="cb18-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predictors (x), outcomes (y), and knots (k)</span></span>
<span id="cb18-51">cs_loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(a, x, y, k) {</span>
<span id="cb18-52">  y_hat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cubic_spline</span>(x, a, k)</span>
<span id="cb18-53">  loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>((y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_hat)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb18-54">}</span>
<span id="cb18-55"></span>
<span id="cb18-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use the optim() function to estimate the parameters</span></span>
<span id="cb18-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># using least squares method; it doesn't work terribly</span></span>
<span id="cb18-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># well in general but it will do for now</span></span>
<span id="cb18-59">cs_pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, k, ..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loss =</span> cs_loss) {</span>
<span id="cb18-60">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(k, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_internal"</span>)</span>
<span id="cb18-61">  fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(</span>
<span id="cb18-62">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">par =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n),</span>
<span id="cb18-63">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn =</span> loss,</span>
<span id="cb18-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb18-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb18-66">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> k,</span>
<span id="cb18-67">    ...</span>
<span id="cb18-68">  )</span>
<span id="cb18-69">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>par)</span>
<span id="cb18-70">}</span></code></pre></div>
</div>
<p>To convince myself that it ‚Äúworks‚Äù, at least in the sense that it seems to produce fairly reasonable smoothing in a very simple example, I‚Äôll use the <code>mpg</code> data from the <strong>ggplot2</strong> package. In keeping with tradition, I will use <code>displ</code> (engine displacement) as the predictor, and <code>hwy</code> (mileage for highway driving) as the outcome. Here goes‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the predictor is going to be the displ</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># column in mpg, so we'll make sure the </span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># knots have a wider range thant the data</span></span>
<span id="cb19-4">knots_displ <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">even_knots</span>(</span>
<span id="cb19-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb19-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k0 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># min(mpg$displ) = 1.6 </span></span>
<span id="cb19-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kn =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max(mpg$displ) = 7</span></span>
<span id="cb19-8">)</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># estimate the parameters</span></span>
<span id="cb19-11">pars_mpg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cs_pars</span>(</span>
<span id="cb19-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mpg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>displ, </span>
<span id="cb19-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mpg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hwy, </span>
<span id="cb19-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> knots_displ</span>
<span id="cb19-15">)</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the estimated spline across the </span></span>
<span id="cb19-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># full range of the data </span></span>
<span id="cb19-19">pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb19-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">displ =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(</span>
<span id="cb19-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(mpg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>displ), </span>
<span id="cb19-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(mpg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>displ), </span>
<span id="cb19-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L</span>
<span id="cb19-24">  ),</span>
<span id="cb19-25">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hwy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cubic_spline</span>(</span>
<span id="cb19-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> displ, </span>
<span id="cb19-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> pars_mpg, </span>
<span id="cb19-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> knots_displ</span>
<span id="cb19-29">  )</span>
<span id="cb19-30">)</span>
<span id="cb19-31"></span>
<span id="cb19-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw a pretty picture</span></span>
<span id="cb19-33"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> pred, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tomato"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/mpg-fit-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>‚Ä¶okay, yeah, good enough. Moving on.</p>
</section>
<section id="p-splines" class="level2">
<h2 class="anchored" data-anchor-id="p-splines">P-splines</h2>
<p>At long last I get to P-splines, and thankfully there‚Äôs not much I really need to say about them. Originally indroduced by <a href="https://www.jstor.org/stable/2246049">Eilers &amp; Marx, 1996</a>, there‚Äôs now a very extensive literature on penalised spline, and I will be brutally honest and admit I‚Äôve read almost none of it. Happily, the overview paper by <a href="https://www.researchgate.net/publication/290086196_Twenty_years_of_P-splines">Eilers, Marx &amp; Durb√°n 2016</a> is pretty helpful, and I found it a decent enough place to start. The basic idea is fairly simple: instead of minimising least squares, introduce a penalty function <img src="https://latex.codecogs.com/png.latex?P(%5Cmathbf%7Ba%7D)"> on the B-spline weights, to enforce smoothness.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Cmathbf%7Ba%7D%7D%20=%20%5Carg%20%5Cmin_%7B%5Cmathbf%7Ba%7D%7D%20%5Cleft(%5Csum_i%20(f(x_i,%20%5Cmathbf%7Ba%7D)%20-%20y_i)%20%5Cright)%20+%20%5Clambda%20P(%5Cmathbf%7Ba%7D)%0A"></p>
<p>Now, in the real world one should take care in defining a penalty function, and the literature on P-splines quite clearly goes into a lot of detail on this. However, it is now midnight, and I want to go to bed. With that in mind, I‚Äôll do something very simple.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(%5Cmathbf%7Ba%7D)%20=%20%5Csum_i%20(a_i%20-%20a_%7Bi+1%7D)%5E2%0A"></p>
<p>Here‚Äôs what the implementation of this looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># penalised loss function based on differences between</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the weights assigned to adjacent B-splines</span></span>
<span id="cb20-3">cs_penalised_loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(a, x, y, k, l) {</span>
<span id="cb20-4">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(a)</span>
<span id="cb20-5">  diffs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> a[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n]</span>
<span id="cb20-6">  y_hat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cubic_spline</span>(x, a, k)</span>
<span id="cb20-7">  ols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>((y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_hat)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-8">  pen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(diffs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(ols <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pen)</span>
<span id="cb20-10">}</span>
<span id="cb20-11"></span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># estimate parameters for hwy ~ cs(displ)</span></span>
<span id="cb20-13">pars_mpg_p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cs_pars</span>(</span>
<span id="cb20-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mpg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>displ, </span>
<span id="cb20-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mpg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hwy, </span>
<span id="cb20-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> knots_displ,</span>
<span id="cb20-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">l =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb20-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loss =</span> cs_penalised_loss</span>
<span id="cb20-19">)</span>
<span id="cb20-20"></span>
<span id="cb20-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate predictions of the penalised</span></span>
<span id="cb20-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># spline estimated above</span></span>
<span id="cb20-23">pred_p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb20-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">displ =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(</span>
<span id="cb20-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(mpg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>displ), </span>
<span id="cb20-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(mpg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>displ), </span>
<span id="cb20-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L</span>
<span id="cb20-28">  ),</span>
<span id="cb20-29">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hwy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cubic_spline</span>(</span>
<span id="cb20-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> displ, </span>
<span id="cb20-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> pars_mpg_p, </span>
<span id="cb20-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> knots_displ</span>
<span id="cb20-33">  )</span>
<span id="cb20-34">)</span>
<span id="cb20-35"></span>
<span id="cb20-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw a pretty picture: tomato red line is the original</span></span>
<span id="cb20-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fit; sea green line is the fit with penalty added</span></span>
<span id="cb20-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> pred, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tomato"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> pred_p, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seagreen"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/index_files/figure-html/mpg-fit-penalised-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Okay, yes that does seem to have smoothed the spline somewhat. The green line is less wiggly than the reddish one, which I suppose was the point of the exercise.</p>
<p>And with that, I am done. This post is haunted and I want nothing more to do with it.</p>
<p><img src="https://blog.djnavarro.net/posts/2025-09-06_p-splines/haunted.jpg" class="img-fluid"></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Conventionally, the knot points are denoted <img src="https://latex.codecogs.com/png.latex?t"> and the number of knots uses <img src="https://latex.codecogs.com/png.latex?k"> as the notation but honestly I think that‚Äôs stupid and just makes it harder to understand.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>I suppose if I were being nitpicky enough to define the partition properly I would be a bit more precise and use half-open intervals like <img src="https://latex.codecogs.com/png.latex?%5Bk_%7Bi-1%7D,%20k_i)"> and then make a special case for the final interval by making that one closed, i.e., <img src="https://latex.codecogs.com/png.latex?%5Bk_%7Bm-1%7D,%20k_m%5D">, but this isn‚Äôt the kind of post where I‚Äôm going to be that technical, and frankly even if I tried I‚Äôd probably just fuck it up.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>To write it slightly more tediously in order to pretend that the author is smart, she notes that the constraint is that <img src="https://latex.codecogs.com/png.latex?p_i(k_i)%20=%20p_%7Bi+1%7D(k_i)"> for <img src="https://latex.codecogs.com/png.latex?i%20=%201,%202,%20%5Cldots%20m-1">. This adds precisely nothing of value to the post, of course. However, in deference to her undiagnosed-but-painfully-obvious autism she will dump it in a footnote and move on.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>Something something about B-splines forming a basis for the spline function space or whatever.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>Okay yes, the code also plots several other ‚Äúbasis splines‚Äù that are zero everywhere, but we can ignore those: it‚Äôs purely because I was lazy in how I wrote the code hidden beneath the fold. Actually there are several respects in which the code is a bit sloppy but I‚Äôm not going to let myself be bothered by that in a silly blog post like this‚Ü©Ô∏é</p></li>
<li id="fn6"><p>Well, aaaaactually, there‚Äôs an argument to be made that in the statistical context it‚Äôs not ideal to clamp the spline down by placing lots of additional knots at the ends. An alternative approach is to simply extend the range: keep all the knots equally spaced, but go far enough outside the range of the data that you don‚Äôt need any of the B-splines near the edges. That way, you end up with basis splines that have the same shape. This is discussed by <a href="https://www.researchgate.net/publication/290086196_Twenty_years_of_P-splines">Eilers, Marx and Durb√°n (2016)</a> in the P-spline context, but it‚Äôs waaaaay beyond the scope of what I wanted to accomplish with this post. So let‚Äôs move on, shall we?‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {Splines, {B-splines,} {P-splines,} and a Disapproving Kitten},
  date = {2025-09-06},
  url = {https://blog.djnavarro.net/posts/2025-09-06_p-splines/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúSplines, B-Splines, P-Splines, and a
Disapproving Kitten.‚Äù</span> September 6, 2025. <a href="https://blog.djnavarro.net/posts/2025-09-06_p-splines/">https://blog.djnavarro.net/posts/2025-09-06_p-splines/</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2025-09-06_p-splines/</guid>
  <pubDate>Fri, 05 Sep 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-09-06_p-splines/haunted.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The Box-Cox power exponential distribution</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>I have for the longest time been intending to write up some notes about <a href="https://en.wikipedia.org/wiki/Generalized_additive_model_for_location,_scale_and_shape">generalised additive model for location scale and shape (GAMLSS)</a> regression and its application to modelling growth curves of various kinds. It‚Äôs a problem that pops up in my pharmacometrics work every now and then, usually because we‚Äôre interested in simulating the distribution of drug exposures across some target population, often alongside distributions of efficacy and safety endpoints under some proposed dosing regimen. If a proposed dosing regimen depends on measurements such as age, weight, height, or body surface area, then it becomes important to be able to be able to say something about how these measures are distributed across the population, and have the capacity to sample from the appropriate distribution.</p>
<p>I mean‚Ä¶ duh.</p>
<p>One of the most commonly used approaches to this problem (see discussion in <a href="https://doi.org/10.1002/sim.2227">Borghi et al 2005</a>) is to use the GAMLSS framework proposed by <a href="https://doi.org/10.1002%2Fsim.1861">Rigby and Stasinopoulos (2004)</a>, which in turn extends the <a href="https://en.wikipedia.org/wiki/Generalized_additive_model">generalised additive model</a> and <a href="https://en.wikipedia.org/wiki/Generalized_linear_model">generalised linear model</a> frameworks that I‚Äôm too lazy to reference properly in a blog post. This is the approach I‚Äôve typically used, and I‚Äôve found that it works rather well. Indeed, the use of GAMLSS regressions for growth curve modelling is the thing I <em>actually</em> want to write a blog post about, but every time I start thinking about what I want to say, I keep coming to the conclusion that the place I need to <em>start</em> isn‚Äôt with the regression model per se, it‚Äôs with the distributions used to describe variability in the GAMLSS framework. And so with a heavy sigh, I put aside the fun thing I want to write about, and instead decide that the thing my blog needs is‚Ä¶</p>
<p>‚Ä¶a tutorial introduction to the Box-Cox power exponential distribution.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(moments)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gamlss.dist)</span></code></pre></div>
</div>
<section id="data-are-annoying" class="level2">
<h2 class="anchored" data-anchor-id="data-are-annoying">Data are annoying</h2>
<p>I‚Äôll start with a data set I use very often when doing this kind of work: the <a href="https://wwwn.cdc.gov/nchs/nhanes/">National Health and Nutrition Examination Survey</a>,<sup>1</sup> <sup>2</sup> usually abbreviated to NHANES. I‚Äôll probably talk more about NHANES when I finally write the GAMLSS post I‚Äôve been promising, but for now let‚Äôs just load some data that I preprocessed earlier:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">nhanes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nhanes-v01.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) </span>
<span id="cb2-2">nhanes</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 8,403 √ó 6
   sex_num sex_fct weight_kg height_cm age_mn age_yr
     &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
 1       0 male         86.9      180.    516  43   
 2       0 male        102.       174.    792  66   
 3       1 female       69.4      153.    528  44   
 4       1 female       34.3      120.     71   5.92
 5       0 male         90.6      173.    408  34   
 6       1 female      104.       156.    816  68   
 7       1 female      124.       168.    324  27   
 8       0 male         79.8      169.    708  59   
 9       1 female      123.       163.    372  31   
10       1 female      116.       173.    396  33   
# ‚Ñπ 8,393 more rows</code></pre>
</div>
</div>
<p>So here we have the kind of measurements you might expect to encounter when doing growth curve modelling. It‚Äôs not super fancy as such things go: I‚Äôve got measurements for age, weight, height, and sex. To give you a sense of what the data look like here‚Äôs a scatterplot showing the joint distribution of age, weight, and sex in the data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(age_yr, weight_kg)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>sex_fct)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/index_files/figure-html/age-weight-curves-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>There‚Äôs nothing partictularly suprising about this plot: human beings do have a tendency to get bigger and heavier until we reach adulthood, after which the changes in weight are much less dramatic. Again‚Ä¶ duh. But the devil is in the details here. You can see just from looking at the chart that (again, obviously) the variability changes over time: adult weights are a lot more variable than infant weights. A model for this data set will necessarily need to capture that heterogeneity, otherwise it will make some hilariously wrong predictions about how heavy a baby can be.<sup>4</sup></p>
<p>But if we look a little more closely, it becomes clear that capturing the mean weight and the standard deviation of the weight distribution will not be sufficient for any serious modelling purposes. To show this, I‚Äôll simplify the data set by looking only at adults over the age range 25-49, and ‚Äì not entirely accurately, as my scales pointedly remind me every morning ‚Äì making the assumption that the weight distributions don‚Äôt change much over those years. After doing that we can plot good old fashioned histograms for adult weights separately for males and females:<sup>5</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(weight_kg)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>sex_fct) </span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/index_files/figure-html/weight-distribution-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Ah. Yeah, there‚Äôs no way we‚Äôre going to have much luck fitting a normal distribution to that: the distribution of body weight is positively skewed in pretty much every data set we encounter.<sup>6</sup> So we will need a family of distributions that can capture the <a href="https://en.wikipedia.org/wiki/Skewness">skewness</a> we typically see in this kind of data.</p>
<p>Le sigh.</p>
<p>The fact that we need something more flexible seems immediately apparent, but what shall we use? In a statement of the most trite variety, let us begin by noting that if we want a family of probability distributions that is flexible enough to be able to independently describe the <em>location</em> (e.g., mean), <em>scale</em> (e.g., variance), and <em>skewness</em> of the data, your distributional family will require at least three parameters. There‚Äôs no escaping this: it is as inevitable as it is obvious.<sup>7</sup> However, it‚Äôs sometimes worth stating the obvious because in doing so we can automatically rule out a great many possible candidates: for example, the <a href="https://en.wikipedia.org/wiki/Log-normal_distribution">log-normal distribution</a>, much beloved by pharmacometricians in other contexts, will in this particular instance be unsuitable for our needs. The <a href="https://en.wikipedia.org/wiki/Gamma_distribution">gamma distribution</a> is likewise ruled out. Not even the <a href="https://en.wikipedia.org/wiki/Weibull_distribution">Weibull distribution</a> is spared. Something more general is required.</p>
<p>Enter, stage left and hopefully not pursued by a bear,<sup>8</sup> the Box-Cox transformation and its close relative, the Box-Cox normal distribution.</p>
</section>
<section id="the-box-cox-transformation" class="level2">
<h2 class="anchored" data-anchor-id="the-box-cox-transformation">The Box-Cox transformation</h2>
<p>The story begins in a place simple enough that I used to discuss it in graduate statistics classes for social science students. Often when we encounter empirical data that are visibly and blantantly non-normal in their distribution and our toolkit is only designed to handle normally distributed data, it is common to <em>transform</em> the data in some fashion that makes the transformed values sufficiently close to normal that we can heave a sigh of relief, chuck the transformation into a footnote somewhere, and happily report a <img src="https://latex.codecogs.com/png.latex?p">-value in the paper. While such a cavalier approach to data transformation was probably not what they had in mind at the time, a widely-used approach to this problem was introduced by <a href="https://www.jstor.org/stable/2984418">Box and Cox (1964)</a>, who suggested that we could compute the transformed variable <img src="https://latex.codecogs.com/png.latex?f_%5Clambda(y)"> for a suitable value of <img src="https://latex.codecogs.com/png.latex?%5Clambda"> as follows:<sup>9</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af_%5Clambda(y)%20=%20%5Cleft%5C%7B%20%5Cbegin%7Barray%7D%7Brl%7D%20%5Cfrac%7By%5E%5Clambda%20-%201%7D%7B%5Clambda%7D%20&amp;%20%5Cmbox%7B%20if%20%7D%20%5Clambda%20%5Cneq%200%20%5C%5C%20%5Cln(y)%20&amp;%20%5Cmbox%7B%20if%20%7D%20%5Clambda%20=%200%20%5Cend%7Barray%7D%20%5Cright.%0A"></p>
<p>This has since become known as the <a href="https://en.wikipedia.org/wiki/Power_transform#Box%E2%80%93Cox_transformation">Box-Cox transformation</a> and has been the saviour of many an otherwise doomed Ph.D.&nbsp;thesis. Here‚Äôs what the Box-Cox transformation looks like implemented as an R function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">boxcox <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(y, lambda) {</span>
<span id="cb6-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(y))</span>
<span id="cb6-3">  (y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> lambda</span>
<span id="cb6-4">}</span></code></pre></div>
</div>
<p>It‚Äôs not very exciting, I‚Äôll admit, but we can use it to draw a plot illustrating how the shape of the Box-Cox transformation function changes as we vary the value of <img src="https://latex.codecogs.com/png.latex?%5Clambda">:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">bc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>),</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-4">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb7-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxcox</span>(y, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span>(lambda)),</span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> lambda</span>
<span id="cb7-8">  )</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(bc, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(y, fy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(lambda))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb7-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Untransformed value"</span>, </span>
<span id="cb7-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Box-Cox transformed value"</span>, </span>
<span id="cb7-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lambda"</span></span>
<span id="cb7-16">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/index_files/figure-html/box-cox-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Okay fine, that‚Äôs still not very interesting either, but I stand by my decision to include it. I like pretty pictures, okay? Not quite as much as I like pretty men, but even I struggle to find a way to turn this into a post about Hale Appleman.</p>
</section>
<section id="the-box-cox-normal-distribution" class="level2">
<h2 class="anchored" data-anchor-id="the-box-cox-normal-distribution">The Box-Cox normal distribution</h2>
<p>Having introduced the Box-Cox transformation, the idea of the Box-Cox normal (BCN) distribution is intuitive: if the <em>transformed</em> data are normally distributed, we say that the <em>untransformed</em> data are BCN distributed. In that sense, the Box-Cox normal has been around ever since the Box-Cox transformation was proposed in 1964. That being said, its application into the growth curve modelling literature didn‚Äôt really take off until the early 1990s, and the canonical reference for this is the paper by <a href="https://doi.org/10.1002/sim.4780111005">Cole and Green (1992)</a>. The impression I get is that it was about this time that the properties of the BCN distribution were investigated a little more explicitly. From the Wikipedia entry I was led to discover a short paper by <a href="https://files.udc.edu/docs/dc_water_resources/technical_reports/report_n_190.pdf">Freeman and Modarres (2002)</a> that provides a nice description of the BCN and its properties, and it‚Äôs from that paper that I have lifted much of this part of the blog post.</p>
<p>Viewed in its own terms, the BCN is a distribution over positive-valued numbers <img src="https://latex.codecogs.com/png.latex?y"> that has probability density function</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(y%20%7C%20%5Cmu,%20%5Csigma%5E2,%20%5Clambda)%0A=%0A%5Cfrac%7B1%7D%7Bk%7D%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%20%5Csigma%7D%0A%5Cexp%5Cleft(%0A%20%20-%20%5Cfrac%7B1%7D%7B2%5Csigma%5E2%7D%20%5Cleft(%0A%20%20%20%20%20%20%20%20%5Cfrac%7By%5E%7B%5Clambda%20-%201%7D%7D%7B%5Clambda%20-%201%7D%20-%20%5Cmu%0A%20%20%20%20%5Cright)%5E2%0A%5Cright)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?k"> is a normalising constant given as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ak%20=%20%5Cleft%5C%7B%0A%5Cbegin%7Barray%7D%7Bcl%7D%0A%5CPhi(z)%20&amp;%20%5Cmbox%7B%20if%20%7D%20%5Clambda%20%3E%200%20%5C%5C%0A1%20&amp;%20%5Cmbox%7B%20if%20%7D%20%5Clambda%20=%200%20%5C%5C%0A%5CPhi(-z)%20&amp;%20%5Cmbox%7B%20if%20%7D%20%5Clambda%20%3C%200%0A%5Cend%7Barray%7D%0A%5Cright.%0A"></p>
<p>As usual, <img src="https://latex.codecogs.com/png.latex?%5CPhi(%5Ccdot)"> denotes the cumulative distribution function for a normal distribution with mean 0 and standard deviation 1, and in this expression <img src="https://latex.codecogs.com/png.latex?z%20=%20(1/(%5Clambda%5Csigma)%20+%20%5Cmu/%5Csigma)">. So if for some reason we ever wanted to implement this in R ourselves, a function like this would work:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">density_bcn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(y, mu, sigma, lambda) {</span>
<span id="cb8-2">  z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sigma</span>
<span id="cb8-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(z)</span>
<span id="cb8-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>z)</span>
<span id="cb8-6">  const <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma</span>
<span id="cb8-7">  f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-8">  distr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sigma<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>f<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-9">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> const <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> distr</span>
<span id="cb8-10">  p</span>
<span id="cb8-11">}</span></code></pre></div>
</div>
<p>Now, this is all nice and fancy and I admit I always feel reassured when I can see the analytic expression for the pdf of a distribution, but in practice it‚Äôs not really the way we think about the BCN. Instead, we usually imagine some variable <img src="https://latex.codecogs.com/png.latex?z"> that is normally distributed with mean <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and variance <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2">, and then transform it as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Az%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BNormal%7D(0,%201)%20%5C%5C%0Ay%20&amp;%20=%20&amp;%20%5Cleft%5C%7B%0A%20%20%5Cbegin%7Barray%7D%7Brl%7D%0A%20%20%5Cmu%20(%5Clambda%20%5Csigma%20z%20+%201)%5E%7B1/%5Clambda%7D%20&amp;%20%5Cmbox%7B%20if%20%7D%20%5Clambda%20%5Cneq%200%20%5C%5C%0A%20%20%5Cmu%20%5Cexp(%5Csigma%20z)%20&amp;%20%5Cmbox%7B%20if%20%7D%20%5Clambda%20=%200%0A%20%20%5Cend%7Barray%7D%0A%5Cright.%0A%5Cend%7Barray%7D%0A"></p>
<p>The resulting variable <img src="https://latex.codecogs.com/png.latex?y"> follows the BCN distribution with parameters <img src="https://latex.codecogs.com/png.latex?%5Cmu">, <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2">, and <img src="https://latex.codecogs.com/png.latex?%5Clambda">. If we were truly desperate to do so, we could write our own function that would sample from the BCN distribution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">sample_bcn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n, mu, sigma, lambda) {</span>
<span id="cb9-2">  z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(mu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z))</span>
<span id="cb9-4">  mu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>lambda)</span>
<span id="cb9-5">}</span></code></pre></div>
</div>
<p>However, there is little need for us to do so because the <strong>gamlss.dist</strong> package in R already does it for us. In <strong>gamlss.dist</strong> this distribution is referred to as the ‚ÄúBox-Cox Cole and Green‚Äù distribution, in reference to the Cole and Green paper I referenced above, but the documentation notes that this is simply another name for the Box-Cox normal distribution. The two functions I wrote in the previous section are entirely unnecessary because <code>gamlss.dist::rBCCG()</code> and <code>gamlss.dist::dBCCG()</code> already do exactly that, and are much more carefully written than my lazy implementation above. To illustrate the point, here‚Äôs an example showing that <code>sample_bcn()</code> does the same thing as <code>rBCCG()</code>,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span></span>
<span id="cb10-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample_bcn =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_bcn</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb10-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rBCCG =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rBCCG</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="cb10-5">) </span>
<span id="cb10-6">dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb10-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(sample_bcn, rBCCG),</span>
<span id="cb10-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>,</span>
<span id="cb10-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"values"</span></span>
<span id="cb10-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(values)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>type)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/index_files/figure-html/compare-to-rBCCG-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>and, just to make the connection even more explicit, here‚Äôs an example illustrating the connection between my rather lazy <code>density_bcn()</code> function and the infinitely superior <code>dBCCG()</code> function supplied by <strong>gamlss.dist</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb11-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>),</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">density_bcn  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density_bcn</span>(y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dBCCG =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dBCCG</span>(y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="cb11-5">) </span>
<span id="cb11-6">dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb11-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(density_bcn, dBCCG),</span>
<span id="cb11-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>,</span>
<span id="cb11-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"density"</span></span>
<span id="cb11-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(y, density)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/index_files/figure-html/compare-to-dBCCG-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Well, that‚Äôs a relief. It would have been embarrassing if I‚Äôd gotten that wrong, wouldn‚Äôt it?<sup>10</sup></p>
<p>So now we have a family of distributions that has one parameter describing the location (i.e., <img src="https://latex.codecogs.com/png.latex?%5Cmu">), another parameter describing the scale (i.e., <img src="https://latex.codecogs.com/png.latex?%5Csigma">), and a third parameter describing the skewness (i.e., <img src="https://latex.codecogs.com/png.latex?%5Clambda">). This is good, and it will allow us to solve the problem at hand. Even better, this family of distributions has a natural connection to the Box-Cox method of data transformation that many (most?) of us encounter as graduate students, so there is a sense in which it feels quite natural. Regression models that use the Box-Cox normal distribution are often referred to as the ‚ÄúLMS method‚Äù for growth curve modelling. This terminology was introduced by Cole and Green (1992):</p>
<ul>
<li>The <strong>L</strong> parameter refers to lambda (<img src="https://latex.codecogs.com/png.latex?%5Clambda">), and captures skewness</li>
<li>The <strong>M</strong> parameter refers to mu (<img src="https://latex.codecogs.com/png.latex?%5Cmu">), and captures location</li>
<li>The <strong>S</strong> parameter refers to sigma (<img src="https://latex.codecogs.com/png.latex?%5Csigma">), and captures scale</li>
</ul>
<p>In the <a href="https://www.cdc.gov/growthcharts/cdc-data-files.htm">CDC growth charts</a> for example, the ‚ÄúLMS‚Äù parameters refer to the parameters of the corresponding Box-Cox normal distribution associated with the relevant age group. It‚Äôs not anything mysterious, it is literally a readout of parameters for a BCN distribution, and yes, I wish someone had told this to me two years ago when I really needed this piece of information.<sup>11</sup></p>
</section>
<section id="the-box-cox-power-exponential-distribution" class="level2">
<h2 class="anchored" data-anchor-id="the-box-cox-power-exponential-distribution">The Box-Cox power exponential distribution</h2>
<p>We are now in a position to introduce the Box-Cox power exponential (BCPE) distribution. And by ‚Äúwe‚Äù I of course mean Rigby and Stasinopoulos (2004), because I sure as fuck wasn‚Äôt going to do this work myself. The goal when building the Box-Cox normal (BCN) distribution was to extend the normal distribution in a way that allows us to manipulate the skewness; by analogy, the goal in building the BCPE distribution is to extend the BCN distribution to capture kurtosis.<sup>12</sup> As such, we‚Äôll now need four parameters to describe the distribution. I won‚Äôt go into the details of how the BCPE is constructed (it‚Äôs in the paper after all), and will instead go straight to showing you the pdf for the BCPE. The BCPE is described by a location parameter <img src="https://latex.codecogs.com/png.latex?%5Cmu">, a scale parameter <img src="https://latex.codecogs.com/png.latex?%5Csigma">, and two shape parameters <img src="https://latex.codecogs.com/png.latex?%5Cnu"> and <img src="https://latex.codecogs.com/png.latex?%5Ctau"> that are related to skewness and kurtosis respectively. The pdf can be written as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(y%20%7C%20%5Cmu,%20%5Csigma,%20%5Cnu,%20%5Ctau)%0A=%20%5Cfrac%7By%5E%7B%5Cnu%20-%201%7D%7D%7B%5Cmu%5E%5Cnu%20%5Csigma%7D%20p(z%20%7C%20%5Ctau)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?z"> is a power-exponential distributed variable related to <img src="https://latex.codecogs.com/png.latex?y"> via:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Az%20=%20%5Cleft%5C%7B%0A%5Cbegin%7Barray%7D%7Brl%7D%0A1/(%5Csigma%5Cnu)%20%5Cleft(%20(y/%5Cmu)%5E%5Cnu%20-%201%20%5Cright)%20&amp;%20%5Cmbox%7B%20if%20%7D%20%5Cnu%20%5Cneq%200%20%5C%5C%0A1/%5Csigma%20%5Clog%20(y/%5Cmu)%20&amp;%20%5Cmbox%7B%20if%20%7D%20%5Cnu%20=%200%0A%5Cend%7Barray%7D%0A%5Cright.%0A"></p>
<p>The probability density function <img src="https://latex.codecogs.com/png.latex?p(z%7C%5Ctau)"> is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(z%20%7C%20%5Ctau)%20=%20%5Cfrac%7B%5Ctau%7D%7Bc2%5E%7B1%20+%201/%5Ctau%7D%20%5CGamma(1/%5Ctau)%7D%20%5Cexp(-0.5%20%7Cz/c%7C%5E%5Ctau)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?c%5E2%20=%202%5E%7B-2/%5Ctau%7D%20%5CGamma(1/%5Ctau)%20(%5CGamma(3/%5Ctau))%5E%7B-1%7D">, and <img src="https://latex.codecogs.com/png.latex?%5CGamma(%5Ccdot)"> is the usual gamma function. An R implementation of this terribly exciting mathematical beast is shown below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">density_bcpe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(y, mu, sigma, nu, tau) {</span>
<span id="cb12-2">  c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>{<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>tau} <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>tau) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>tau))</span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (nu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sigma) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span> (y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>mu)</span>
<span id="cb12-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (nu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(sigma<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>nu)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>mu)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>nu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-5">  pz <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tau <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>tau) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>tau)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(z<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>c)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>tau)</span>
<span id="cb12-6">  py <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pz <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(nu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> mu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>nu)</span>
<span id="cb12-7">  py</span>
<span id="cb12-8">}</span></code></pre></div>
</div>
<p>Not surprisingly, my <code>density_bcpe()</code> function is entirely unnecessary because the <strong>gamlss.dist</strong> package already supplies the <code>dBCPE()</code> function which does the same job in a much better way. However, as before, I‚Äôll do a side by side comparison to convince myself that yes, I have indeed implemented the same distribution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>),</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">density_bcpe =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density_bcpe</span>(y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dBCPE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dBCPE</span>(y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb13-5">) </span>
<span id="cb13-6">dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb13-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(density_bcpe, dBCPE),</span>
<span id="cb13-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>,</span>
<span id="cb13-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"density"</span></span>
<span id="cb13-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(y, density)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/index_files/figure-html/compare-to-dBCPE-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Okay. Fabulous. My code works. But gosh, that is a peculiar looking density, isn‚Äôt it? The BCPE family is quite flexible, and can produce a surprising range of shapes depending on the parameters you supply. To give you a sense of it, here‚Äôs a quick tour of some part of the parameter space. I‚Äôll fix the <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> parameters for this example, and focus on the two shape parameters <img src="https://latex.codecogs.com/png.latex?%5Cnu"> and <img src="https://latex.codecogs.com/png.latex?%5Ctau">:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">y_val   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb14-2">nu_val  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb14-3">tau_val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb14-4"></span>
<span id="cb14-5">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> nu_val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> tau_val) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb14-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">density =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dBCPE</span>(y, mu, sigma, nu, tau), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tau"</span>),</span>
<span id="cb14-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu_lbl =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(nu, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> nu_val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nu ="</span>, nu_val)),</span>
<span id="cb14-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau_lbl =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(tau, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> tau_val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tau ="</span>, tau_val))</span>
<span id="cb14-10">  )</span>
<span id="cb14-11"></span>
<span id="cb14-12">dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(y, density)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(tau_lbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> nu_lbl)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/index_files/figure-html/explore-bcpe-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Intuitively, you can see what the parameters are doing:</p>
<ul>
<li>Approximately speaking, the role of <img src="https://latex.codecogs.com/png.latex?%5Cnu"> is to control skewness. When <img src="https://latex.codecogs.com/png.latex?%5Cnu%20=%200"> the distribution is approximately symmetric<sup>13</sup>, when <img src="https://latex.codecogs.com/png.latex?%5Cnu%20%3C%200"> the distribution has positive skewness<sup>14</sup> and when <img src="https://latex.codecogs.com/png.latex?%5Cnu%20%3E%200"> the distribution has negative skewness.</li>
<li>Again speaking approximately, the role of <img src="https://latex.codecogs.com/png.latex?%5Ctau"> is to control kurtosis. When <img src="https://latex.codecogs.com/png.latex?%5Ctau%20=%202"> the distributions are mesokurtic: the tails are about as heavy as the tails of a normal distribution. When <img src="https://latex.codecogs.com/png.latex?%5Ctau%20%3C%202"> the distribution is leptokurtic: kurtosis is high, and the tails are heavier than the tails of a normal distribution. When <img src="https://latex.codecogs.com/png.latex?%5Ctau%20%3E%202"> the distribution is platykurtic: kurtosis is low, and the tails are lighter.</li>
</ul>
</section>
<section id="fitting-the-bcpe" class="level2">
<h2 class="anchored" data-anchor-id="fitting-the-bcpe">Fitting the BCPE</h2>
<p>As a final exercise, I‚Äôll implement a simple method for finding maximum likelihood estimates of the BCPE distribution parameters. My approach here is absolutely <em>not</em> recommended in a real life setting: I‚Äôm using the <code>optim()</code> function with the <code>"L-BFGS-B"</code> method. For this specific example it works well, but the impression I get is that it can be a bit fragile because fitting a kurtosis parameter is not a trivial thing to do: when estimating a GAMLSS model with BCPE distribution there are better tools than an off-the-shelf optimiser. But that is a topic for another day, and having made the required disclaimer, let‚Äôs do the lazy thing anyway:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">nll <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(values) {</span>
<span id="cb15-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(par) {</span>
<span id="cb15-3">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dBCPE</span>(</span>
<span id="cb15-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x     =</span> values, </span>
<span id="cb15-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu    =</span> par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb15-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], </span>
<span id="cb15-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu    =</span> par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb15-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau   =</span> par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], </span>
<span id="cb15-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log   =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb15-10">    ))</span>
<span id="cb15-11">  }</span>
<span id="cb15-12">}</span>
<span id="cb15-13"></span>
<span id="cb15-14">fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb15-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(</span>
<span id="cb15-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">par =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb15-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nll</span>(x), </span>
<span id="cb15-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>), </span>
<span id="cb15-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">upper =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nu =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tau =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb15-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L-BFGS-B"</span></span>
<span id="cb15-21">  )</span>
<span id="cb15-22">}</span></code></pre></div>
</div>
<p>When calling <code>nll()</code> with a vector of values it returns an objective function for <code>optim()</code> to minimise, based on the negative log-likelihood. The wrapper function <code>fit()</code> calls <code>optim()</code> and returns the result. Here are the parameter estimates we obtain when fitting the BCPE distribution to adult male weights:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">weight_m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"male"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(weight_kg)</span>
<span id="cb16-4"></span>
<span id="cb16-5">par_m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(weight_m)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>par</span>
<span id="cb16-6">par_m</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        mu      sigma         nu        tau 
87.6094265  0.2319320 -0.5234904  1.6945917 </code></pre>
</div>
</div>
<p>To help us interpret these parameters it‚Äôs useful to mention that (as discussed by Rigby and Stasinopoulos, 2004, Appendix A) the <img src="https://latex.codecogs.com/png.latex?%5Cmu"> parameter is approximately equal to the population median and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> is approximately the coefficient of variation, but while there are relationships between <img src="https://latex.codecogs.com/png.latex?%5Cnu"> and skewness and between <img src="https://latex.codecogs.com/png.latex?%5Ctau"> and kurtosis, they are a little more opaque. To illustrate:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb18-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(weight_m),</span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cv =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(weight_m) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(weight_m),</span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skewness =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skewness</span>(weight_m),</span>
<span id="cb18-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kurtosis =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kurtosis</span>(weight_m)</span>
<span id="cb18-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    median         cv   skewness   kurtosis 
87.2500000  0.2565488  1.5355721  7.9690289 </code></pre>
</div>
</div>
<p>It‚Äôs pretty clear that you can interpret <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> with little difficulty, but interpreting the two shape parameters <img src="https://latex.codecogs.com/png.latex?%5Cnu"> and <img src="https://latex.codecogs.com/png.latex?%5Ctau"> requires some care. It seems to me that any time you estimate parameters for a BCPE distribution you should <em>always</em> plot the density (see below!). The BCPE is a complicated beast: don‚Äôt assume you know how to interpret the parameters until you‚Äôve seen the density function that they produce! In any case, let‚Äôs move forward and repeat the fitting exercise for the female body weight data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">weight_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, sex_fct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(weight_kg)</span>
<span id="cb20-4"></span>
<span id="cb20-5">par_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(weight_f)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>par</span>
<span id="cb20-6">par_f</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        mu      sigma         nu        tau 
76.4064873  0.2699057 -0.5469284  2.3326601 </code></pre>
</div>
</div>
<p>Okay yes, that seems sensible enough. Calculating descriptive statistics for the female body weights shows the same pattern as for the male weights:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb22-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(weight_f),</span>
<span id="cb22-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cv =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(weight_f) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(weight_f),</span>
<span id="cb22-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skewness =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skewness</span>(weight_f),</span>
<span id="cb22-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kurtosis =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kurtosis</span>(weight_f)</span>
<span id="cb22-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    median         cv   skewness   kurtosis 
75.1000000  0.2969981  1.1552950  4.4436285 </code></pre>
</div>
</div>
<p>Just to be sure that this has worked ‚Äì and to follow my own advice from a couple of paragraphs prior ‚Äì let‚Äôs plot the estimated BCPE densities (red curves) on top of a simple histogram-based density estimate (grey bars) for these two data sets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">pred_wide <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb24-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight_kg =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>,</span>
<span id="cb24-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">male      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dBCPE</span>(weight_kg, par_m[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], par_m[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], par_m[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], par_m[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]),</span>
<span id="cb24-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">female    =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dBCPE</span>(weight_kg, par_f[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], par_f[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], par_f[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], par_f[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb24-5">)</span>
<span id="cb24-6"></span>
<span id="cb24-7">pred_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pred_wide <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb24-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(male, female),</span>
<span id="cb24-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sex_fct"</span>,</span>
<span id="cb24-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"density"</span></span>
<span id="cb24-12">  )</span>
<span id="cb24-13"></span>
<span id="cb24-14">nhanes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> age_yr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(weight_kg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(density))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb24-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">center =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb24-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> pred_long, </span>
<span id="cb24-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(weight_kg, density), </span>
<span id="cb24-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb24-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb24-23">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>sex_fct)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/index_files/figure-html/plot-bcpe-fit-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Very nice. This fit is close enough that I would feel quite comfortable using these BCPE distribution in a simulation. Which is, of course, the point.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>There‚Äôs a lot I could say on this topic. The BCPE is a very powerful and useful tool and I am very grateful it exists. I use it regularly. Nevertheless‚Ä¶</p>
<p><img src="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/lucille.jpg" class="img-fluid"></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Yes, it‚Äôs an American data set. You can tell by the fact that it uses the word ‚Äúnational‚Äù in the title, without perceiving that there might be a need to specify <em>which</em> of the literally hundreds of nations on this planet the word refers to. It takes a certain kind of insular psychology to do this, which very quickly narrows down the list of possible culprits. Suffice it to say, the citizens of every other nation besides the one that <em>always</em> does this find it extraordinarily annoying.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>Okay this might not be entirely fair of me, especially since the English are pretty bad on this front also, but honestly it happens often enough that I feel obliged to write a snarky footnote.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>If you must know, this is a subset constructed from the <code>DEMO-L.xpt</code> and <code>BMX-L.xpt</code> data cuts for demographics and body measurements in the post-pandemic 2021-2023 release. But more on that in the promised GAMLSS post: the NHANES data is too awesome to be relegated to a mere footnote in a post on the BCPE distribution.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>I have a funny story to tell about a GAMLSS model that I fit to NHANES data, in which my first attempt was rather ambitiously trying to do something fancy with the shape parameters of the BCPE distribution and I got burned: the bloody thing was convinced that a few female babies (and only female babies) could in fact be born 100cm or so in length and‚Ä¶ look, either we‚Äôre talking about a xenomorph situation here or I fucked up the model.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>As always, I shall add the relevant ‚Äútrans and intersex disclaimer‚Äù: this is not the time and place to discuss nuance around gender and sex characteristics. These things do matter, but they aren‚Äôt in the NHANES data nor does the Box-Cox power exponential distribution have anything useful to say on the topic, and with this in mind we shall move forward unburdened by such complexities.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>To a pharmacometrician (as I now apparently am), this is a ‚Äúwell duh‚Äù kind of thing to say, because a shockingly large number of the variables we typically deal with in this field are right-skewed and are usually fit with log-normal distributions. In psychology, the discipline from which I emerged like some kind of twisted transsexual moth, it might be more of a surprise because unless you have been cursed with the knowledge of how to model reaction time distributions (sadly, like most mathematical psychologists, I have been so cursed) you might be used to data that are typically normal, or approximately so.‚Ü©Ô∏é</p></li>
<li id="fn7"><p>This is assuming you‚Äôre not doing something ridiculous with your parameters. There are malicious ways of making one parameter do the work of more (see <a href="https://doi.org/10.1063/1.5031956">Piantidosi, 2018</a> if you absolutely must), but to do so you have to create parameters that don‚Äôt mean anything. It‚Äôs a silly exercise, and we will not be engaging in that kind of chicanery here. We want to capture three properties: we will use three parameters. The end.‚Ü©Ô∏é</p></li>
<li id="fn8"><p>Alas, the Box-Cox power exponential was the bear. I prefer twink distributions myself, but I‚Äôm no bigot and my tastes are broad.‚Ü©Ô∏é</p></li>
<li id="fn9"><p>Actually, if you look at the original paper they also suggest a two-parameter version of the transformation that includes an offset parameter, but I won‚Äôt trouble myself with that version in this post.‚Ü©Ô∏é</p></li>
<li id="fn10"><p>For the record: in the process of writing this blog post I did indeed get it wrong several times. The real reason why I included the comparison between my functions and the proper ones is that I have learned from bitter experience that it usually takes me several attempts to correctly understand the underlying statistical concepts and implement them as functions, so I make certain to include cross-checks like this every single time.‚Ü©Ô∏é</p></li>
<li id="fn11"><p>Perhaps the CDC could have‚Ä¶ idk‚Ä¶ put that little snippet of information on the website rather than assume that everyone knows that LMS is a synonym for BCN, and maybe someone else could have mentioned that BCCG is also a synonym for BCN? It gets very confusing when the connections aren‚Äôt stated explicitly. Just sayin‚Äô‚Ü©Ô∏é</p></li>
<li id="fn12"><p>In fact, the BCPE distribution wasn‚Äôt even their first attempt at addressing the problem: in an earlier paper they introduced the Box-Cox t-distribution, which has the same goal as BCPE of allowing kurtosis to be modelled, but it‚Äôs a different entity and is more restricted than the BCPE.‚Ü©Ô∏é</p></li>
<li id="fn13"><p>Yes, I know, what the fuck is going on in the bottom row? The key thing to remember here is that the BCPE is a distribution over the positive reals, and that can have some counterintuitive effects when you ramp up kurtosis. It is best, therefore, to remember that <img src="https://latex.codecogs.com/png.latex?%5Cnu"> is only ‚Äúapproximately‚Äù a descriptor of symmetry. Rigby and Stasinopoulos discuss this in Appendix A in the paper, where they point out that the actual behaviour of the shape parameters is a little more nuanced. The thing that you‚Äôre seeing in the bottom row is exactly the phenomenon they refer to.‚Ü©Ô∏é</p></li>
<li id="fn14"><p>Again: yes, I know, I know, the directions are flipped. I didn‚Äôt design this thing okay, I‚Äôm just trying to make it make sense.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {The {Box-Cox} Power Exponential Distribution},
  date = {2025-08-02},
  url = {https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúThe Box-Cox Power Exponential
Distribution.‚Äù</span> August 2, 2025. <a href="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/">https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/</guid>
  <pubDate>Fri, 01 Aug 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-08-02_box-cox-power-exponential/lucille2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Generating quarto syntax within R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(quartose)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(babynames)</span></code></pre></div>
</div>
<p><strong>EDIT:</strong> I later decided to send <a href="https://quartose.djnavarro.net">quartose</a> to CRAN, and so for documentation purposes I‚Äôll note the package version used for this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">packageVersion</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quartose"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] '0.1.0'</code></pre>
</div>
</div>
<p><strong>ACTUAL POST:</strong></p>
<p>It is Saturday morning in my quiet neighbourhood in Sydney‚Äôs inner west, and for no particular reason I‚Äôm thinking about the strange human convention of assigning names and labels to one another. I‚Äôm quite fond of this tradition. So much so that I have collected a surprising number of names in my half century on the planet. At different moments in my life I have been Dan, Dani, Danni, Danny, Daniel, Danielle, and Daniela. All variations on a theme, perhaps, but each one has its own flavour and connotation. In my experience of how people use the words, a ‚ÄúDanielle‚Äù is a different person to a ‚ÄúDaniela‚Äù, and both are a very different person to a ‚ÄúDaniel‚Äù. I wonder at the strangeness of people who go through life with only the one name, unaware perhaps of the possibilities that surround them. Ah well.</p>
<section id="the-topic-at-hand" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-topic-at-hand">The topic at hand</h2>
<p>In any case, none of these musings are particularly relevant to the blog post. They are merely a pretext for me to introduce the following tiny data analysis. Using data from the <a href="https://hadley.github.io/babynames/">babynames</a> R package, I can do something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">bbs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dan"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ni"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ny"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ielle"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iela"</span>))</span>
<span id="cb4-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(bbs, \(bb) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(babynames, name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> bb))</span>
<span id="cb4-3">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(dat, \(dd) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dd, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(year, prop, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>())</span></code></pre></div>
</div>
<p>The simple elegance of this code appeals to me. In three lines of code I took a vector of names (<code>bbs</code>), used <code>map()</code> to construct a list of data frames (<code>dat</code>) that describe the popularity of each of these names, and how that popularity has changed over time, and then repeated the exercise to produce a list of data visualisation objects (<code>pic</code>).</p>
<p>Unfortunately, the elegance of my data visualisation code has created a problem. If you‚Äôre the kind of data analyst who loves the prettiness of the previous code, you‚Äôre almost certainly the kind of data analyst who adores literate programming, and would like a similarly clean tool for inserting the plots directly into this very document. Intuitively it seems like there should be some functionality that would allow you to place each element of the <code>pic</code> list into its own tab and assign each tab the corresponding label from <code>bbs</code>. It <em>ought</em> to be possible to do this from R, using a function like <code>quarto_tabset()</code> or the like, and it <em>ought</em> to do something like this:</p>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_tabset</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> pic, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> bbs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Dan</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Dani</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Danni</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Danny</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-5-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-5" aria-controls="tabset-1-5" aria-selected="false">Daniel</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-6-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-6" aria-controls="tabset-1-6" aria-selected="false">Danielle</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-7-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-7" aria-controls="tabset-1-7" aria-selected="false">Daniela</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p><img src="https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/index_files/figure-html/tabs-and-headers-1-1.png" class="img-fluid" width="672"></p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p><img src="https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/index_files/figure-html/tabs-and-headers-1-2.png" class="img-fluid" width="672"></p>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<p><img src="https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/index_files/figure-html/tabs-and-headers-1-3.png" class="img-fluid" width="672"></p>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<p><img src="https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/index_files/figure-html/tabs-and-headers-1-4.png" class="img-fluid" width="672"></p>
</div>
<div id="tabset-1-5" class="tab-pane" aria-labelledby="tabset-1-5-tab">
<p><img src="https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/index_files/figure-html/tabs-and-headers-1-5.png" class="img-fluid" width="672"></p>
</div>
<div id="tabset-1-6" class="tab-pane" aria-labelledby="tabset-1-6-tab">
<p><img src="https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/index_files/figure-html/tabs-and-headers-1-6.png" class="img-fluid" width="672"></p>
</div>
<div id="tabset-1-7" class="tab-pane" aria-labelledby="tabset-1-7-tab">
<p><img src="https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/index_files/figure-html/tabs-and-headers-1-7.png" class="img-fluid" width="672"></p>
</div>
</div>
</div>
<p>Huh. Yes that is rather nice. But does it have to be restricted to plots? It doesn‚Äôt seem like it should be ‚Äì if anything, it seems like it should be even easier for a function like <code>quarto_tabset()</code> to wrap a list of data frames and print each of those within a tab. Wouldn‚Äôt it be nice if we could that to the‚Ä¶</p>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_tabset</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> bbs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Dan</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Dani</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Danni</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Danny</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-5-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-5" aria-controls="tabset-2-5" aria-selected="false">Daniel</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-6-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-6" aria-controls="tabset-2-6" aria-selected="false">Danielle</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-7-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-7" aria-controls="tabset-2-7" aria-selected="false">Daniela</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<pre> 
# A tibble: 206 √ó 5 
    year sex   name      n     prop 
   <dbl> <chr> <chr> <int>    <dbl> 
 1  1880 M     Dan     140 0.00118  
 2  1881 M     Dan     148 0.00137  
 3  1882 M     Dan     150 0.00123  
 4  1883 M     Dan     120 0.00107  
 5  1884 M     Dan     151 0.00123  
 6  1885 M     Dan     129 0.00111  
 7  1886 M     Dan     154 0.00129  
 8  1887 M     Dan     140 0.00128  
 9  1888 M     Dan     154 0.00119  
10  1889 M     Dan     116 0.000975 
# ‚Ñπ 196 more rows 
</dbl></int></chr></chr></dbl></pre>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<pre> 
# A tibble: 136 √ó 5 
    year sex   name      n       prop 
   <dbl> <chr> <chr> <int>      <dbl> 
 1  1942 F     Dani      5 0.0000036  
 2  1945 F     Dani      6 0.00000446 
 3  1946 F     Dani      9 0.00000558 
 4  1947 F     Dani      5 0.00000275 
 5  1947 M     Dani      5 0.00000269 
 6  1948 F     Dani      8 0.00000459 
 7  1949 F     Dani     13 0.00000741 
 8  1949 M     Dani      6 0.00000333 
 9  1950 F     Dani     15 0.00000853 
10  1951 F     Dani      8 0.00000433 
# ‚Ñπ 126 more rows 
</dbl></int></chr></chr></dbl></pre>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<pre> 
# A tibble: 78 √ó 5 
    year sex   name      n       prop 
   <dbl> <chr> <chr> <int>      <dbl> 
 1  1948 F     Danni     5 0.00000287 
 2  1949 F     Danni     5 0.00000285 
 3  1951 F     Danni     5 0.00000271 
 4  1953 M     Danni     5 0.0000025  
 5  1955 F     Danni    49 0.0000244  
 6  1956 F     Danni    43 0.0000209  
 7  1956 M     Danni    11 0.00000513 
 8  1957 F     Danni    21 0.0000100  
 9  1958 F     Danni    18 0.00000872 
10  1959 F     Danni    16 0.0000077  
# ‚Ñπ 68 more rows 
</dbl></int></chr></chr></dbl></pre>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<pre> 
# A tibble: 207 √ó 5 
    year sex   name      n      prop 
   <dbl> <chr> <chr> <int>     <dbl> 
 1  1900 M     Danny     7 0.0000432 
 2  1901 M     Danny     8 0.0000692 
 3  1902 M     Danny     9 0.0000678 
 4  1903 M     Danny     5 0.0000387 
 5  1904 M     Danny     7 0.0000505 
 6  1905 M     Danny     5 0.0000349 
 7  1907 M     Danny     7 0.0000441 
 8  1908 M     Danny     8 0.0000481 
 9  1909 M     Danny    10 0.0000565 
10  1910 M     Danny    10 0.0000480 
# ‚Ñπ 197 more rows 
</dbl></int></chr></chr></dbl></pre>
</div>
<div id="tabset-2-5" class="tab-pane" aria-labelledby="tabset-2-5-tab">
<pre> 
# A tibble: 246 √ó 5 
    year sex   name       n    prop 
   <dbl> <chr> <chr>  <int>   <dbl> 
 1  1880 M     Daniel   643 0.00543 
 2  1881 M     Daniel   527 0.00487 
 3  1882 M     Daniel   594 0.00487 
 4  1883 M     Daniel   615 0.00547 
 5  1884 M     Daniel   573 0.00467 
 6  1885 M     Daniel   535 0.00461 
 7  1886 M     Daniel   555 0.00466 
 8  1887 M     Daniel   557 0.00510 
 9  1888 M     Daniel   566 0.00436 
10  1889 M     Daniel   515 0.00433 
# ‚Ñπ 236 more rows 
</dbl></int></chr></chr></dbl></pre>
</div>
<div id="tabset-2-6" class="tab-pane" aria-labelledby="tabset-2-6-tab">
<pre> 
# A tibble: 129 √ó 5 
    year sex   name         n       prop 
   <dbl> <chr> <chr>    <int>      <dbl> 
 1  1937 F     Danielle     9 0.00000817 
 2  1938 F     Danielle    88 0.0000771  
 3  1939 F     Danielle    72 0.0000635  
 4  1940 F     Danielle    38 0.0000322  
 5  1941 F     Danielle    65 0.0000522  
 6  1942 F     Danielle    57 0.000041   
 7  1943 F     Danielle    67 0.0000467  
 8  1944 F     Danielle    67 0.0000490  
 9  1945 F     Danielle    93 0.0000691  
10  1946 F     Danielle   136 0.0000843  
# ‚Ñπ 119 more rows 
</dbl></int></chr></chr></dbl></pre>
</div>
<div id="tabset-2-7" class="tab-pane" aria-labelledby="tabset-2-7-tab">
<pre> 
# A tibble: 88 √ó 5 
    year sex   name        n       prop 
   <dbl> <chr> <chr>   <int>      <dbl> 
 1  1947 F     Daniela     8 0.0000044  
 2  1952 F     Daniela     5 0.00000263 
 3  1953 F     Daniela     5 0.00000259 
 4  1954 F     Daniela     7 0.00000352 
 5  1955 F     Daniela     7 0.00000349 
 6  1956 F     Daniela     6 0.00000291 
 7  1957 F     Daniela    10 0.00000477 
 8  1958 F     Daniela    16 0.00000775 
 9  1959 F     Daniela    14 0.00000674 
10  1960 F     Daniela    25 0.0000120  
# ‚Ñπ 78 more rows 
</dbl></int></chr></chr></dbl></pre>
</div>
</div>
</div>
<p>‚Ä¶data? Ahhhhhh yes. Quite lovely.</p>
<p>Although‚Ä¶ if we are going to go down this path, why would we stop at tabsets? Why not have functions like <code>quarto_div()</code> and <code>quarto_span()</code> that would insert HTML divs and spans into the document, assigning them to whatever CSS classes happen to strike our fancy? That shouldn‚Äôt be too hard really: the quarto syntax for a tabset is essentially identical to the syntax for any other HTML div, so that should be pretty straightforward. Armed with this functionality, it would be fairly easy to write an R command to generate margin text, callouts, paragraphs with fancy formatting, and a great deal more besides‚Ä¶</p>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_div</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is some margin text."</span>, </span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column-margin"</span></span>
<span id="cb7-4">)</span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p>This is some margin text.</p>
</div></div><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_div</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb8-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Using character vectors is fine."</span>,</span>
<span id="cb8-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is also just one margin text block."</span>, </span>
<span id="cb8-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All the strings get pasted together,"</span>,</span>
<span id="cb8-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"with a separator."</span></span>
<span id="cb8-7">  ),</span>
<span id="cb8-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column-margin"</span>,</span>
<span id="cb8-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" /// "</span></span>
<span id="cb8-10">)</span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Using character vectors is fine. /// This is also just one margin text block. /// All the strings get pasted together, /// with a separator.</p>
</div></div><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_div</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb9-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You can pass a list as the div content."</span>, </span>
<span id="cb9-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"That allows you to mix content,"</span>,</span>
<span id="cb9-5">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"of different types"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and lengths."</span>),</span>
<span id="cb9-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"But pay attention to where separators appear,"</span>,</span>
<span id="cb9-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and remember that **markdown parsing still applies**"</span></span>
<span id="cb9-9">  ),</span>
<span id="cb9-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column-margin"</span>,</span>
<span id="cb9-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" /// "</span></span>
<span id="cb9-12">)</span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p>You can pass a list as the div content. /// That allows you to mix content, /// 1 /// 2 /// 3 /// of different types /// and lengths. /// But pay attention to where separators appear, /// and remember that <strong>markdown parsing still applies</strong></p>
</div></div><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_div</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb10-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You can supply multiple classes."</span>,</span>
<span id="cb10-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This creates a callout box in the margin"</span></span>
<span id="cb10-5">  ),</span>
<span id="cb10-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column-margin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"callout-tip"</span>),</span>
<span id="cb10-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span></span>
<span id="cb10-8">)</span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can supply multiple classes. This creates a callout box in the margin</p>
</div>
</div></div><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_div</span>(</span>
<span id="cb11-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_span</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You can wrap multiple spans in a div so that"</span>),</span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_span</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some text is highlighted"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mark"</span>),</span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_span</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and some is underlined"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"underline"</span>)</span>
<span id="cb11-6">  ),</span>
<span id="cb11-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column-margin"</span>,</span>
<span id="cb11-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span></span>
<span id="cb11-9">)</span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p><span class="quartose-null">You can wrap multiple spans in a div so that</span> <mark>some text is highlighted</mark> <u>and some is underlined</u></p>
</div></div><p>Why yes, Danielle, Daniela, or whatever name you‚Äôre using these days, that does seem rather handy. Are you planning to explain what you‚Äôre doing here babe, or are you just being annoying?</p>
</section>
<section id="unpacking-it-a-bit" class="level2">
<h2 class="anchored" data-anchor-id="unpacking-it-a-bit">Unpacking it a bit</h2>
<p>All the work here is being done by a little convenience package I wrote for myself called <a href="https://quartose.djnavarro.net/">quartose</a>. It‚Äôs not especially fancy, but it solves a problem I often encounter in real life data analysis. As I wrote in the package README:</p>
<blockquote class="blockquote">
<p>When analysing data sets in R, it is often convenient to wrap the analysis within a quarto document for reporting purposes: containing all the analysis components within a single easy-to-navigate HTML document is generally a kindness for the reader. One consequence of this, however, is that sometimes you find yourself wanting to write code within an R code chunk that will generate parts of the quarto document for you. For instance, when iterating over many analyses within a single R chunk, you might want to have that chunk generate the quarto section headers, tabsets and so on. This is possible because the knitr engine (which evaluates the R code chunks) allows you to generate ‚Äúasis‚Äù output that will later be captured by the quarto parser; if such output is formatted to look like correct quarto syntax, it will be captured and translated to the appropriate HTML.</p>
</blockquote>
<p>In principle this isn‚Äôt very hard. Here‚Äôs the output of a call to <code>quarto_div()</code> when I <em>don‚Äôt</em> supply the <code>results: asis</code> code chunk option:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_div</span>(</span>
<span id="cb12-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is some margin text."</span>, </span>
<span id="cb12-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"column-margin"</span></span>
<span id="cb12-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

::: {.column-margin}

 This is some margin text. 

:::

 </code></pre>
</div>
</div>
<p>Any quarto user would immediately recognise the syntax here. All that <code>quarto_div()</code> actually does is construct syntax for the quarto parser to capture and render. It truly isn‚Äôt fancy. The <code>quarto_tabset()</code> output isn‚Äôt much more complicated either:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto_tabset</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>( </span>
<span id="cb14-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tab1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb14-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tab2 =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span></span>
<span id="cb14-5">  ),</span>
<span id="cb14-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb14-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

::: {.panel-tabset}

 


### tab1

 
&lt;pre&gt; 
[1] 1 2 3 4 5 
&lt;/pre&gt; 


### tab2

 
&lt;pre&gt; 
[1] "hello" 
&lt;/pre&gt; 


::: 

 </code></pre>
</div>
</div>
<p>The function goes a little overboard when inserting whitespace around the quarto commands (each component imposes its own ‚Äúbubble‚Äù of whitespace), and there‚Äôs probably a better way of producing the ‚Äúoutput formatting‚Äù than directly supplying HTML pre tags, but whatever, it does the job. Things get messier when inserting the syntax for plots, because when that happens you‚Äôre juggling ggplot2, knitr, and quarto in a kind of strange way. At the moment, the way this is handled in quartose is to delay the rendering of the plot object until the last possible moment so that knitr doesn‚Äôt get trigger happy and insert it into the wrong place in the document (there were some quite hilarious early versions where plots would show up in pretty weird places like it was a word document or something). Plus, at the moment I haven‚Äôt even attempted to capture base graphics correctly: at present, the trick only works for ggplot2 objects.</p>
</section>
<section id="is-this-even-useful" class="level2">
<h2 class="anchored" data-anchor-id="is-this-even-useful">Is this even useful?</h2>
<p>Anyway, this isn‚Äôt really intended to be a long blog post or a deep dive. Right now I‚Äôm at the stage of wondering if this is even a useful thing to do. I know why the functionality is useful for me, but I‚Äôm not sure if anyone else has the same needs that I do. I have no problems with writing personal packages that are intended only for a single user, but there‚Äôs something odd about this one: the only context in which I really <em>need</em> this functionality is at work, but if I‚Äôm going to use it at work I do need to make sure it is developed to a sufficiently high standard that it can be called within code that needs to be executed by regulatory agencies, set time aside for maintenance, etc. That‚Äôs more software development work than I typically want to expend on one of my silly side projects.</p>
<p>So yeah, I don‚Äôt know. Given all this context I find myself pondering two questions; (a) is this functionality even useful? (b) is there a better way do it? I‚Äôm not sure about either one.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {Generating Quarto Syntax Within {R}},
  date = {2025-07-05},
  url = {https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúGenerating Quarto Syntax Within
R.‚Äù</span> July 5, 2025. <a href="https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/">https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/</a>.
</div></div></section></div> ]]></description>
  <category>Quarto</category>
  <category>Literate Programming</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/</guid>
  <pubDate>Fri, 04 Jul 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-07-05_quarto-syntax-from-r/diego.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bayesian Emax regression using brms</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-06-14_brms-emax/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>This is another in the ongoing series of posts I‚Äôve written on <a href="../../#category=Pharmacometrics">pharmacometrics</a>. As usual I feel a little cautious writing about this topic because I‚Äôm still relatively new to this field,<sup>1</sup> but fortunately for my impostor syndrome this is a post about Bayesian Emax regression models for exposure-response analysis, and as it happens I‚Äôve worked with these tools a few times before. In fact, one of my ongoing collaborations has been with the very wonderful Kenta Yoshida, in which I‚Äôve helped out with some updates to the <a href="https://yoshidk6.github.io/rstanemax/">rstanemax</a> and <a href="https://mc-stan.org/docs/stan-users-guide/latent-discrete.html">BayesERtools</a> R packages, and contributed a few chapters to the <a href="https://genentech.github.io/BayesERbook/">BayesERbook</a> guide that Kenta has been leading. It‚Äôs been a lot of fun. I love it when my professional life lets me work on projects that are legitimately enjoyable. üéâ</p>
<p>So okay, in this post I‚Äôm going to talk about implementing Bayesian Emax regression models within the lovely <a href="https://paulbuerkner.com/brms/">brms</a> package. It‚Äôs territory we‚Äôve already covered in BayesERbook, which might make people wonder why I would write a blog post here also, but the thing about writing on my own blog is that here I am under no obligation to behave professionally, thus <a href="https://www.quotes.net/mquote/716213">allowing me my full range of expression</a>. It would be only the most naive of readers that come to this blog expecting a statistics discusssion to be PG-rated. I am notoriously poor at compartmentalisation, and miscellaneous queerness tends to intrude into the data science.<sup>2</sup> Also, because the book chapters already exist and cover a wider range of topics than this post, it gives me licence to touch on a few topics that aren‚Äôt in the book.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(brms)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidybayes)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/img/june_02_0205.jpg" class="img-fluid figure-img"></p>
<figcaption>‚Äúcoatless in the rain‚Äù</figcaption>
</figure>
</div>
<section id="formalism" class="level2">
<h2 class="anchored" data-anchor-id="formalism">Formalism</h2>
<p>I‚Äôll start by considering the simplest case: a simple Emax regression model for a continuous response variable, with no covariates. First, the formalism. Letting <img src="https://latex.codecogs.com/png.latex?%5Cphi_i"> denote<sup>3</sup> the observed exposure for the <img src="https://latex.codecogs.com/png.latex?i">-th subject, and letting <img src="https://latex.codecogs.com/png.latex?y_i"> denote the observed response, the Emax model for a continuous response is written as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20=%20E_0%20+%20E_%7Bmax%7D%20%5Cfrac%7B%5Cphi_i%5E%5Cgamma%7D%7BEC_%7B50%7D%5E%5Cgamma%20+%20%5Cphi_i%5E%5Cgamma%7D%20+%20%5Cepsilon_i%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i%20%5Csim%20%5Cmbox%7BNormal%7D(0,%20%5Csigma%5E2)"> supplies the measurement model for the data set. The (nonlinear) predictor function in an Emax regression is described by four structural model parameters, as well as the residual variance <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2">. The interpretation of the structural parameters are:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?E_0"> is represents the baseline response when drug exposure is zero. It is interpreted on the same scale as the response variable. Depending on what the response variable is, there might be constraints on what values are permitted (e.g., negative numbers might not make sense).</li>
<li><img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> defines the maximum change from baseline as the drug exposure increases. In some contexts we expect this value to be positive, but in others we might be expecting the drug to inhibit a response in which case a negative value would be appropriate. Again, the parameter lies on the same scale as the response.</li>
<li><img src="https://latex.codecogs.com/png.latex?EC_%7B50%7D"> defines the exposure at which the change from baseline is 50% of the maximum. It lies on the same scale as the exposure, and inherits the same restrictions that apply to the exposure (e.g., negative exposure makes no sense).</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cgamma"> is the Hill coefficient, and describes the steepness of the response curve. In the regular version of the Emax model (sometimes called the ‚Äúhyperbolic‚Äù Emax model) we fix <img src="https://latex.codecogs.com/png.latex?%5Cgamma%20=%201">, and for the purposes of this post I‚Äôll make this restriction rather than use the full ‚Äúsigmoidal‚Äù Emax model: you can see worked examples using the full model in the BayesERbook. To my knowledge there isn‚Äôt really a natural scale on which to interpret this parameter, though I‚Äôm told it can sometimes make sense in terms of <a href="../../2024-01-09_emax-models/#interpreting-the-hill-coefficient">cooperative binding</a>. Honestly most of the time I think of it as ‚Äústeepness‚Äù and leave it at that.</li>
</ul>
<p>The Emax regression framework also supports binary response data (e.g., adverse events in an exposure-safety analysis). At the risk of being even more tedious than usual by writing down that which seems obvious, and letting <img src="https://latex.codecogs.com/png.latex?p_i%20=%20%5Cmbox%7BPr%7D(y_i%20=%201)"> be the probability of an event, we typically have</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7Blogit%7D(p_i)%20=%20E_0%20+%20E_%7Bmax%7D%20%5Cfrac%7B%5Cphi_i%5E%5Cgamma%7D%7BEC_%7B50%7D%5E%5Cgamma%20+%20%5Cphi_i%5E%5Cgamma%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmbox%7Blogit%7D(p_i)%20=%20%5Cln%20(p_i/(1-p_i))">. I won‚Äôt focus much on this version of the model in this blog post but it is not difficult to specify this version within brms, and anyway there are some examples using binary Emax regression in the book so you can go look at those if it‚Äôs deeply important to you I guess?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/img/june_21_2137.jpg" class="img-fluid figure-img"></p>
<figcaption>‚Äúwe used up all the perfect‚Äù</figcaption>
</figure>
</div>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>Now that we have dispensed with the tiresome notation part, we‚Äôll need some data to work with. As I mentioned in <a href="../../posts/2024-11-11_emax-parameters/">an earlier blog post</a>, simulating semi-plausible data sets for exposure-response analysis isn‚Äôt trivial when you don‚Äôt have a properly specified pharmacokinetic (PK) model under the hood, but if we make a few simplifying assumptions we can produce something that seems reasonable. Rather than waste all our time repeating material from an earlier post, I‚Äôll simply note that the framework I put together in that post is (more or less) exactly the one I used to generate the <code>d_sim_emax</code> data set that comes with the BayesERtools package. So, let‚Äôs just load that data here yes?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d_sim_emax"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BayesERtools"</span>)</span>
<span id="cb2-2">d_sim_emax</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 300 √ó 9
    dose exposure response_1 response_2 cnt_a cnt_b cnt_c bin_d bin_e
   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1   100    4151.       12.8          1  5.71  2.33  7.83     0     1
 2   100    8067.       14.6          1  4.92  4.66  6.74     1     1
 3   100    4878.       12.8          1  4.88  4.21  4.68     1     1
 4   100    9713.       16.6          1  8.42  6.56  1.29     0     1
 5   100   11491.       14.4          0  4.37  3.96  3.55     0     1
 6   100    2452.       12.6          1  8.69  7.60  3.64     0     0
 7   100    5652.       14.8          1  6.61  3.95  5.13     0     0
 8   100    9939.       15.2          1  5.35  7.77  8.29     0     1
 9   100    5817.       14.6          0  5.61  2.24  9.60     0     1
10   100    5176.       13.7          1  6.06  1.79  8.74     0     1
# ‚Ñπ 290 more rows</code></pre>
</div>
</div>
<p>The data set comes with an <code>exposure</code> variable, but does not supply units and is intentionally vague about what specific exposure metric it refers to. Similarly, there are two different outcome variables with generic names: the continuous-valued <code>response_1</code> and the binary-valued <code>response_2</code>. There are five covariates included, with equally unimaginitive names. The <code>cnt_a</code>, <code>cnt_b</code>, and <code>cnt_c</code> columns correspond to continuous covariates, while <code>bin_d</code> and <code>bin_e</code> are binary-valued. It is of course heavily simplified in comparison to a real world exposure-response data set, but that‚Äôs the point: it‚Äôs not meant to be realistic, it‚Äôs meant to be convenient.</p>
<p>In any case, to give you a general sense of what the simulated data set looks like (at least, those parts most relevant to this post), here are some scatterplots depicting how the continuous response variable is related to exposure and to the three continuous covariates in the data set:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">d_sim_emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb4-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(exposure, cnt_a, cnt_b, cnt_c), </span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>,</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb4-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(value, response_1)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_x"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/index_files/figure-html/plot-continuous-response-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>At a quick glance it‚Äôs clear that <code>exposure</code> is related to <code>response_1</code> (as one would hope), but it also seems clear that the response is related to <code>cnt_a</code>. Some modelling will be required to disentangle these effects.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/img/june_18_1808.jpg" class="img-fluid figure-img"></p>
<figcaption>‚Äúrothko in ggplot2‚Äù</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/img/june_12_1236.jpg" class="img-fluid figure-img"></p>
<figcaption>‚Äúburn-in samples‚Äù</figcaption>
</figure>
</div>
</section>
<section id="simple-emax-regression" class="level2">
<h2 class="anchored" data-anchor-id="simple-emax-regression">Simple Emax regression</h2>
<p>Like anyone in Bayes-land who hasn‚Äôt been living under a rock, I‚Äôve followed Paul B√ºrkner‚Äôs fabulous work on brms with interest for many years, but it is only in my new life as a pharmacometrician that I‚Äôve found an excuse to put it to good use.<sup>4</sup> I am very excited about this. In the first instance, I‚Äôll ignore the covariates and focus only on the relationship between <code>exposure</code> and <code>response_1</code>. To build an Emax regression model within brms we have to define three components: the <strong>model specification</strong>, the <strong>measurement model</strong>, and the <strong>parameter priors</strong>. I‚Äôll discuss each of these in turn.</p>
<section id="model-specification" class="level3">
<h3 class="anchored" data-anchor-id="model-specification">Model specification</h3>
<p>The first step in the model building process is describing the nonlinear predictor function. We do this in brms using the <code>brmsformula()</code> function, or just <code>bf()</code> if we want to use the shorthand:<sup>5</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">base_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brmsformula</span>(</span>
<span id="cb5-2">  response_1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> e0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exposure <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (ec50 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> exposure),</span>
<span id="cb5-3">  e0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-4">  emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-5">  ec50 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-7">) </span></code></pre></div>
</div>
<p>There are a few important things to note here.</p>
<ul>
<li><p>First, notice that we‚Äôve set <code>nl = TRUE</code>. This is important because the syntax for a nonlinear model formula is qualitatively different to the syntax for a linear model formula. For linear models, we use the compact syntax where the model parameters (i.e., the regression coefficients) are <em>implicit</em>, like <code>y ~ x1 + x2</code> corresponds to the regression model <img src="https://latex.codecogs.com/png.latex?y_i%20=%20b_0%20+%20b_1%20x_1%20+%20b_2%20x_2">. For nonlinear models, this approach won‚Äôt work because brms has no way to know the form of the model. So we have to be <em>explicit</em> and include the parameters (in this case <code>e0</code>, <code>emax</code>, and <code>ec50</code>) in the model formula.</p></li>
<li><p>Second, note that I explicitly included formulas <code>e0 ~ 1</code>, <code>emax ~ 1</code>, and <code>ec50 ~ 1</code> in the model specification. This serves two purposes. First, it tells brms that <code>e0</code>, <code>emax</code> and <code>ec50</code> should be interpreted as model parameters (and brms will expect a prior for these parameters), whereas <code>exposure</code> should be treated as a predictor (brms will look for it in the data set).</p></li>
<li><p>Third, be aware that the formula notation like <code>e0 ~ 1</code> is not arbitrary. In this particular model, <code>e0</code> will be treated like an ‚Äúintercept‚Äù parameter: it‚Äôs a single parameter and doesn‚Äôt have a covariate model or any random effects attached to it. I‚Äôll come back to this later, but for now let‚Äôs just be aware of this because you‚Äôll see this pop up in the output later.</p></li>
</ul>
<p>Exciting, no?</p>
</section>
<section id="measurement-model" class="level3">
<h3 class="anchored" data-anchor-id="measurement-model">Measurement model</h3>
<p>The second step is specifying the error model and link function. In an Emax regression with continuous response variables such as <code>response_1</code> in our data set, we typically adopt the same approach we would do in an ordinary linear regression, and assume that measurement errors are normally distributed with an identity link:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">gaussian_measurement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brmsfamily</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gaussian"</span>, </span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">link =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identity"</span></span>
<span id="cb6-4">)</span></code></pre></div>
</div>
<p>If we were analysing the binary outcome <code>response_2</code>, we would typically specify a Bernoulli distribution with logit-link:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">bernoulli_measurement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brmsfamily</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bernoulli"</span>, </span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">link =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logit"</span></span>
<span id="cb7-4">)</span></code></pre></div>
</div>
<p>More generally, the measurement model is where we make some assumptions about error distributions, and so it is here that we end up making different choices for continuous and binary outcomes. The two measurement models I‚Äôve listed here are the most common ones I‚Äôve seen in use, but other choices are possible and indeed can sometimes be better than these two ‚Äúdefault‚Äù models.</p>
</section>
<section id="parameter-priors" class="level3">
<h3 class="anchored" data-anchor-id="parameter-priors">Parameter priors</h3>
<p>Finally we need to specify the priors. By default brms places an improper flat prior over regression parameters, but that‚Äôs not usually the best approach and (at least in my experience) can misbehave when you have a nonlinear model such as Emax.<sup>6</sup> In addition, since the <code>e0</code> and <code>emax</code> variables are interpreted on the same scale as <code>response_1</code>, and <code>ec50</code> is interpreted on the same scale as <code>exposure</code>, it‚Äôs usually possible to set informed priors that make sense for the experimental design (e.g., if you‚Äôve already built a PK model you have a good sense of the range of possible exposures, and that in turn tells you something about the plausible range for your EC50 parameter). Anyway, here‚Äôs a prior that is pretty conservative but not unreasonable for this design (e.g., I‚Äôm allowing for an exposure-response relationship but not specifying the direction in advance), but rules out nonsense parameters (e.g., you really shouldn‚Äôt have negative EC50 values):<sup>7</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">parameter_prior <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prior</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nlpar =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e0"</span>),</span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prior</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nlpar =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"emax"</span>),</span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prior</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nlpar =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ec50"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lb =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-5">)</span></code></pre></div>
</div>
</section>
<section id="fitting-the-model" class="level3">
<h3 class="anchored" data-anchor-id="fitting-the-model">Fitting the model</h3>
<p>Now that we have all three components we are ready to go. It‚Äôs possible to use <code>make_stancode()</code> to inspect the Stan code that brms generates, and you can take a look at it here if you want to get a sense of what the ‚Äúbrms to stan‚Äù translation does, but I‚Äôll admit it‚Äôs not always very pretty:</p>
<div class="callout callout-style-simple callout-caution no-icon callout-titled" title="Click to see the Stan code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Click to see the Stan code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_stancode</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> base_model, </span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> gaussian_measurement, </span>
<span id="cb9-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> d_sim_emax, </span>
<span id="cb9-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prior =</span> parameter_prior</span>
<span id="cb9-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>// generated with brms 2.22.0
functions {
}
data {
  int&lt;lower=1&gt; N;  // total number of observations
  vector[N] Y;  // response variable
  int&lt;lower=1&gt; K_e0;  // number of population-level effects
  matrix[N, K_e0] X_e0;  // population-level design matrix
  int&lt;lower=1&gt; K_emax;  // number of population-level effects
  matrix[N, K_emax] X_emax;  // population-level design matrix
  int&lt;lower=1&gt; K_ec50;  // number of population-level effects
  matrix[N, K_ec50] X_ec50;  // population-level design matrix
  // covariates for non-linear functions
  vector[N] C_1;
  int prior_only;  // should the likelihood be ignored?
}
transformed data {
}
parameters {
  vector[K_e0] b_e0;  // regression coefficients
  vector[K_emax] b_emax;  // regression coefficients
  vector&lt;lower=0&gt;[K_ec50] b_ec50;  // regression coefficients
  real&lt;lower=0&gt; sigma;  // dispersion parameter
}
transformed parameters {
  real lprior = 0;  // prior contributions to the log posterior
  lprior += normal_lpdf(b_e0 | 0, 5);
  lprior += normal_lpdf(b_emax | 0, 5);
  lprior += normal_lpdf(b_ec50 | 2000, 500)
    - 1 * normal_lccdf(0 | 2000, 500);
  lprior += student_t_lpdf(sigma | 3, 0, 2.5)
    - 1 * student_t_lccdf(0 | 3, 0, 2.5);
}
model {
  // likelihood including constants
  if (!prior_only) {
    // initialize linear predictor term
    vector[N] nlp_e0 = rep_vector(0.0, N);
    // initialize linear predictor term
    vector[N] nlp_emax = rep_vector(0.0, N);
    // initialize linear predictor term
    vector[N] nlp_ec50 = rep_vector(0.0, N);
    // initialize non-linear predictor term
    vector[N] mu;
    nlp_e0 += X_e0 * b_e0;
    nlp_emax += X_emax * b_emax;
    nlp_ec50 += X_ec50 * b_ec50;
    for (n in 1:N) {
      // compute non-linear predictor values
      mu[n] = (nlp_e0[n] + nlp_emax[n] * C_1[n] / (nlp_ec50[n] + C_1[n]));
    }
    target += normal_lpdf(Y | mu, sigma);
  }
  // priors including constants
  target += lprior;
}
generated quantities {
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<p>More important for our current purposes we can fit the model by calling <code>brm()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">continuous_base_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brm</span>(</span>
<span id="cb11-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> base_model, </span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> gaussian_measurement, </span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> d_sim_emax, </span>
<span id="cb11-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prior =</span> parameter_prior</span>
<span id="cb11-6">) </span></code></pre></div>
</div>
<p>In this code we pass the model specification as the <code>formula</code> argument, the measurement model as the <code>family</code> argument, and the parameter priors as the <code>prior</code> argument. To the surprise of nobody, we pass the data via the <code>data</code> argument. When this code is executed, the brms model is translated to stan code, which in turn compiles to a binary executable that does all that fancy Hamiltonian Monte Carlo sampling. For the sake of my sanity, in this post I‚Äôve suppressed all the output that you‚Äôd see when this happens, and ‚Äì also for the sake of my sanity ‚Äì I‚Äôm not going to talk much about the statistical meaning of the output except in the shallowest possible way. With that in mind, let‚Äôs print the fitted brms model object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">continuous_base_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Family: gaussian 
  Links: mu = identity; sigma = identity 
Formula: response_1 ~ e0 + emax * exposure/(ec50 + exposure) 
         e0 ~ 1
         emax ~ 1
         ec50 ~ 1
   Data: d_sim_emax (Number of observations: 300) 
  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup draws = 4000

Regression Coefficients:
               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
e0_Intercept       5.02      1.23     2.28     7.11 1.00      779     1060
emax_Intercept    11.92      1.21     9.79    14.54 1.00      824     1097
ec50_Intercept  2398.14    394.72  1662.63  3202.76 1.00      871     1214

Further Distributional Parameters:
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sigma     1.27      0.05     1.17     1.38 1.00     1520     1453

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).</code></pre>
</div>
</div>
<p>So, yeah, there‚Äôs a lot of output here and the details do matter in real life. But for the purposes of this post I‚Äôll focus on the table of regression coefficients. The estimated value for E0 is 5.02, with a 95% credible interval of [2.28, 7.11]. In other words, there‚Äôs some uncertainty about the baseline response, but not too much. For the Emax parameter itself, the point estimate is 11.92 and the 95% credible interval is [9.79, 14.54]. For EC50 we estimate that 50% of the maximum effect occurs at exposure 2398, and again we have a 95% interval for that, namely [1662, 3202].</p>
<p>To extract model predictions and make a nice plot, we can use some of the tools from Matthew Kay‚Äôs lovely <a href="https://mjskay.github.io/tidybayes/">tidybayes</a> package to extract the predictions‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">continuous_base_epred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> continuous_base_fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">epred_draws</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exposure =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median_qi</span>()</span>
<span id="cb14-4"></span>
<span id="cb14-5">continuous_base_epred</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 51 √ó 8
   exposure  .row .epred .lower .upper .width .point .interval
      &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    
 1        0     1   5.13   2.28   7.11   0.95 median qi       
 2     1000     2   8.62   7.59   9.56   0.95 median qi       
 3     2000     3  10.5    9.99  11.1    0.95 median qi       
 4     3000     4  11.7   11.4   12.1    0.95 median qi       
 5     4000     5  12.5   12.3   12.8    0.95 median qi       
 6     5000     6  13.1   12.9   13.3    0.95 median qi       
 7     6000     7  13.6   13.4   13.8    0.95 median qi       
 8     7000     8  13.9   13.8   14.1    0.95 median qi       
 9     8000     9  14.2   14.1   14.4    0.95 median qi       
10     9000    10  14.5   14.3   14.6    0.95 median qi       
# ‚Ñπ 41 more rows</code></pre>
</div>
</div>
<p>‚Ä¶ and as usual we use ggplot2 to visualise them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">continuous_base_epred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(exposure, .epred)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> .lower, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> .upper), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> d_sim_emax, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> response_1)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/index_files/figure-html/plot-continuous-emax-model-predictions-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Very pretty.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/img/june_04_0462.jpg" class="img-fluid figure-img"></p>
<figcaption>‚Äúmechanised loom‚Äù</figcaption>
</figure>
</div>
</section>
</section>
<section id="adding-covariates" class="level2">
<h2 class="anchored" data-anchor-id="adding-covariates">Adding covariates</h2>
<p>We can adapt the exposure-response curve in the last example to illustrate why the simple Emax regression model <code>base_model</code> is inadequate. If we shade the data points by the value of <code>cov_a</code> it is clear that the effect of this covariate has not been properly accounted for in the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">continuous_base_epred <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(exposure, .epred)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> .lower, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> .upper), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> d_sim_emax, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> response_1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> cnt_a)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_distiller</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PuOr"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/index_files/figure-html/show-continuous-residuals-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Clearly we need an extended model.</p>
<section id="formalism-revisited" class="level3">
<h3 class="anchored" data-anchor-id="formalism-revisited">Formalism revisited</h3>
<p>To include covariates in the model we need to revisit the notation at the start of the post, and extend it in a way that allows us to represent the effect of covariates <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D%20=%20%5Bx_%7Bik%7D%5D">. In the most common case, covariates are included as additional linear terms, which gives us this as our extended Emax model:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20=%20E_0%20+%20E_%7Bmax%7D%20%5Cfrac%7B%5Cphi_i%5E%5Cgamma%7D%7BEC_%7B50%7D%5E%5Cgamma%20+%20%5Cphi_i%5E%5Cgamma%7D%20+%20%5Csum_k%20b_k%20x_%7Bik%7D%20+%20%5Cepsilon_i%0A"></p>
<p>While this way of expressing the regression with covariate model is perfectly fine, it‚Äôs not the most natural way to do things when operating in a nonlinear regression framework. To see what I mean, suppose I were to translate this formula literally in the call to <code>brmsformula()</code>. If I do this, I get a model specification that look like this</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">full_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brmsformula</span>(</span>
<span id="cb18-2">  response_1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> e0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exposure <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (ec50 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> exposure) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb18-3">    a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cnt_a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cnt_b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cnt_c,</span>
<span id="cb18-4">  e0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb18-5">  emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb18-6">  ec50 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb18-7">  a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb18-8">  b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb18-9">  c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb18-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb18-11">)</span></code></pre></div>
</div>
<p>Again, I stress that this is formally correct. A model written this way would work just fine but dear lord the code is unpleasant. We can do better than this.</p>
<p>Earlier in the post I mentioned that the recommended way to think about nonlinear ‚Äúparameters‚Äù in brms is to think of them as ‚Äúplaceholders‚Äù. This is the point at which that becomes relevant. We can write a more general formulation of Emax regression with covariates like this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20=%20f_1(X_i)%20+%20f_2(X_i)%20%5Cfrac%7B%5Cphi_i%5E%7Bf_4(X)%7D%7D%7Bf_3(X_i)%20%5E%20%7Bf_4(X_i)%7D%20+%20%5Cphi_i%20%5E%20%7Bf_4(X_i)%7D%7D%20+%20%5Cepsilon_i%0A"> where each of the functions <img src="https://latex.codecogs.com/png.latex?f_1">, <img src="https://latex.codecogs.com/png.latex?f_2">, <img src="https://latex.codecogs.com/png.latex?f_3"> and <img src="https://latex.codecogs.com/png.latex?f_4"> describe a linear predictor, <img src="https://latex.codecogs.com/png.latex?X_i"> denotes the covariate vector for the <img src="https://latex.codecogs.com/png.latex?i">-th subject, and for simplicity the dependence on regression coefficients is suppressed in the notation. When we specify an emax model without covariates all four of these functions correspond to ‚Äúintercept-only‚Äù models and are constant with respect to <img src="https://latex.codecogs.com/png.latex?X_i">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Af_1(X_i)%20&amp;=&amp;%20E_0%20%5C%5C%0Af_2(X_i)%20&amp;=&amp;%20E_%7Bmax%7D%20%5C%5C%0Af_3(X_i)%20&amp;=&amp;%20EC_%7B50%7D%20%5C%5C%0Af_4(X_i)%20&amp;=&amp;%20%5Cgamma%0A%5Cend%7Barray%7D%0A"></p>
<p>If we fix <img src="https://latex.codecogs.com/png.latex?%5Cgamma%20=%201"> we can drop <img src="https://latex.codecogs.com/png.latex?f_4"> entirely:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20=%20f_1(X_i)%20+%20f_2(X_i)%20%5Cfrac%7B%5Cphi_i%7D%7Bf_3(X_i)%20+%20%5Cphi_i%7D%20+%20%5Cepsilon_i%0A"></p>
<p>In principle we could specify a covariate model for any of these functions (and indeed people do exactly this in real analyses), but for the sake of this blog post I‚Äôm only going to consider the most typical case where a covariate model is specified only for <img src="https://latex.codecogs.com/png.latex?f_1">. Letting <img src="https://latex.codecogs.com/png.latex?b_k"> denote the regression coefficient for the <img src="https://latex.codecogs.com/png.latex?k">-th covariate, we have the following expressions:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Af_1(X_i)%20&amp;=&amp;%20E_0%20+%20%5Csum_k%20b_k%20x_%7Bik%7D%20%5C%5C%0Af_2(X_i)%20&amp;=&amp;%20E_%7Bmax%7D%20%5C%5C%0Af_3(X_i)%20&amp;=&amp;%20EC_%7B50%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>Noting that each of these is a linear regression model, it becomes perfectly sensible to use the compact ‚Äúimplicit‚Äù formula representation in R, in which only the variable names are stated and the coefficients are implied. That is to say, we‚Äôd end up with something like this:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">e0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ...</span>
<span id="cb19-2">emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-3">ec50 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Oh hey, actually, that‚Äôs how it usually works in brms when you‚Äôre not being weird like I was at the start of this section. What you typically do in brms is use the first line in the model formula to define the (nonlinear) Emax function as a <em>structural</em> model, and subsequent lines specify (linear) <em>covariate models</em> that attach to each of the Emax parameters. In other words, we write this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">full_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brmsformula</span>(</span>
<span id="cb20-2">  response_1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> e0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exposure <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (ec50 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> exposure), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># structural model</span></span>
<span id="cb20-3">  e0   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cnt_a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cnt_b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cnt_c, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># covariate model for baseline</span></span>
<span id="cb20-4">  emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># covariate model for max response</span></span>
<span id="cb20-5">  ec50 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># covariate model for EC50</span></span>
<span id="cb20-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb20-7">)</span></code></pre></div>
</div>
<p>Isn‚Äôt that much nicer?</p>
</section>
<section id="fitting-the-model-1" class="level3">
<h3 class="anchored" data-anchor-id="fitting-the-model-1">Fitting the model</h3>
<p>Well that was a fascinating excursion, Danielle, but could we possibly get back on point and get to the model-fitting part? Okay yes, hypothetical reader, you make a good point. Having written down the model specification, the next step in building an Emax model with covariates is to write down the priors. Superficially at least, nothing seems to have changed, and the prior specification looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">parameter_prior <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prior</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nlpar =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e0"</span>),</span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prior</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nlpar =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"emax"</span>),</span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prior</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nlpar =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ec50"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lb =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb21-5">)</span></code></pre></div>
</div>
<p>However, a little care is required here. Although this specification of <code>parameter_prior</code> is identical to the one I wrote down earlier, it‚Äôs worth noting that brms interprets this prior slightly differently in the context of the two models. In <code>base_model</code> there is only one <code>e0</code> parameter (the intercept) over which the normal prior is specified. In contrast, <code>full_model</code> has four parameters (intercept plus three coefficients), and each of those four terms is supplied with its own normal prior. In other words, the specification <code>prior(normal(0, 5), nlpar = "e0")</code> is interpreted as a prior to be applied across all parameters in the <code>e0</code> part of the structural model. You can see this if you look closely at the Stan code, which is tucked below the fold here‚Ä¶</p>
<div class="callout callout-style-simple callout-caution no-icon callout-titled" title="Click to see the Stan code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Click to see the Stan code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_stancode</span>(</span>
<span id="cb22-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> full_model, </span>
<span id="cb22-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> gaussian_measurement, </span>
<span id="cb22-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> d_sim_emax, </span>
<span id="cb22-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prior =</span> parameter_prior</span>
<span id="cb22-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>// generated with brms 2.22.0
functions {
}
data {
  int&lt;lower=1&gt; N;  // total number of observations
  vector[N] Y;  // response variable
  int&lt;lower=1&gt; K_e0;  // number of population-level effects
  matrix[N, K_e0] X_e0;  // population-level design matrix
  int&lt;lower=1&gt; K_emax;  // number of population-level effects
  matrix[N, K_emax] X_emax;  // population-level design matrix
  int&lt;lower=1&gt; K_ec50;  // number of population-level effects
  matrix[N, K_ec50] X_ec50;  // population-level design matrix
  // covariates for non-linear functions
  vector[N] C_1;
  int prior_only;  // should the likelihood be ignored?
}
transformed data {
}
parameters {
  vector[K_e0] b_e0;  // regression coefficients
  vector[K_emax] b_emax;  // regression coefficients
  vector&lt;lower=0&gt;[K_ec50] b_ec50;  // regression coefficients
  real&lt;lower=0&gt; sigma;  // dispersion parameter
}
transformed parameters {
  real lprior = 0;  // prior contributions to the log posterior
  lprior += normal_lpdf(b_e0 | 0, 5);
  lprior += normal_lpdf(b_emax | 0, 5);
  lprior += normal_lpdf(b_ec50 | 2000, 500)
    - 1 * normal_lccdf(0 | 2000, 500);
  lprior += student_t_lpdf(sigma | 3, 0, 2.5)
    - 1 * student_t_lccdf(0 | 3, 0, 2.5);
}
model {
  // likelihood including constants
  if (!prior_only) {
    // initialize linear predictor term
    vector[N] nlp_e0 = rep_vector(0.0, N);
    // initialize linear predictor term
    vector[N] nlp_emax = rep_vector(0.0, N);
    // initialize linear predictor term
    vector[N] nlp_ec50 = rep_vector(0.0, N);
    // initialize non-linear predictor term
    vector[N] mu;
    nlp_e0 += X_e0 * b_e0;
    nlp_emax += X_emax * b_emax;
    nlp_ec50 += X_ec50 * b_ec50;
    for (n in 1:N) {
      // compute non-linear predictor values
      mu[n] = (nlp_e0[n] + nlp_emax[n] * C_1[n] / (nlp_ec50[n] + C_1[n]));
    }
    target += normal_lpdf(Y | mu, sigma);
  }
  // priors including constants
  target += lprior;
}
generated quantities {
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<p>‚Ä¶but it‚Äôs not the most thrilling read so let‚Äôs move on, shall we? Now that the model is fully specified, we can call <code>brm()</code> and estimate model parameters in the usual way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">continuous_full_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brm</span>(</span>
<span id="cb24-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> full_model, </span>
<span id="cb24-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> gaussian_measurement, </span>
<span id="cb24-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> d_sim_emax, </span>
<span id="cb24-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prior =</span> parameter_prior</span>
<span id="cb24-6">) </span></code></pre></div>
</div>
<p>As before, if I hadn‚Äôt used quarto magic to suppress the output, you‚Äôd be seeing a lot of raw Stan output on the screen as this code runs, but I‚Äôm not really interested in that for this post. So again we will skip over that part and jump straight to printing out the fitted model object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">continuous_full_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Family: gaussian 
  Links: mu = identity; sigma = identity 
Formula: response_1 ~ e0 + emax * exposure/(ec50 + exposure) 
         e0 ~ 1 + cnt_a + cnt_b + cnt_c
         emax ~ 1
         ec50 ~ 1
   Data: d_sim_emax (Number of observations: 300) 
  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;
         total post-warmup draws = 4000

Regression Coefficients:
               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
e0_Intercept       3.47      0.63     2.10     4.57 1.00     1042     1412
e0_cnt_a           0.51      0.01     0.49     0.54 1.00     3499     2725
e0_cnt_b          -0.01      0.01    -0.04     0.01 1.00     3533     2706
e0_cnt_c          -0.00      0.01    -0.03     0.02 1.00     3918     2689
emax_Intercept    11.34      0.56    10.34    12.57 1.00     1152     1560
ec50_Intercept  2997.86    321.22  2390.23  3636.36 1.00     1081     1499

Further Distributional Parameters:
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sigma     0.50      0.02     0.46     0.54 1.00     2846     1813

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).</code></pre>
</div>
</div>
<p>Yep. That‚Äôs a model fit. I‚Äôd recognise one of those anwhere. In any case, the key things to take away from this is that the point estimates and credible intervals indicate that <code>cnt_a</code> is related to the response, but also that the parameters representing the Emax effect of exposure are no less important than they were in the simple model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/img/june_20_2000.jpg" class="img-fluid figure-img"></p>
<figcaption>‚Äúcottage whore‚Äù</figcaption>
</figure>
</div>
</section>
</section>
<section id="cheerful-oblivion" class="level2">
<h2 class="anchored" data-anchor-id="cheerful-oblivion">Cheerful oblivion</h2>
<p>With that, I think I shall call time on another blog post. There are a lot of topics I haven‚Äôt discussed here. The most obvious one would be variable selection: what statistical procedures can help us decide which covariates should be included in the model? I thought about talking about that here but it‚Äôs a big topic that probably deserves its own blog post, and in any case there‚Äôs already a <a href="https://genentech.github.io/BayesERbook/notebook/emax/covariate_modeling.html#model-comparison">brief discussion</a> in the BayesERbook. This post doesn‚Äôt need to be longer than it already is. Not everything on the internet needs to be a monograph sweetie. Honestly, the only reason it even exists at all is that I still had all these notes I wrote to myself while thinking about the BayesERbook chapters, and figured I should put them down somewhere so that I can find them later.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/img/june_09_0907.jpg" class="img-fluid figure-img"></p>
<figcaption>‚Äúall the mermaids have sharp teeth‚Äù</figcaption>
</figure>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I mean okay I‚Äôve been a pharmacometrician for two years now so I guess I can officially add that to the long list of scientific/technical fields in which I‚Äôve worked, but nevertheless I am acutely aware of how much I still have left to learn.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>In fairness, this goes both ways, and I rather suspect that my tendency to discuss linear algebra on grindr might explain the current absence of a man in my life. Though also in fairness, it‚Äôs not precisely <em>my life</em> that I want a man inside. Either way though, bringing up eigendecompositions has not been a very effective strategy for me on the apps.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>Using <img src="https://latex.codecogs.com/png.latex?%5Cphi_i"> here is not standard notation, and insofar as exposure is treated as a predictor for the response (as it is in the logistic regression context) you can think of it statistically in the same way you would a covariate. That would suggest that <img src="https://latex.codecogs.com/png.latex?x_i"> would be a sensible notation choice, but it is a little misleading. From a scientific perspective exposure-response modelling treats exposure as a qualitatively different entity to the covariates, and within the Emax regression framework in particular exposure is structurally different to other covariates. As such it seems sensible to use a distinct symbol.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>This might seem odd given that in my former professional life I was an <a href="https://papers.djnavarro.net/">academic mathematical psychologist</a>, and brms is well-equipped to handle classic psychometric tools like IRT models and math psych models like Weiner diffusion, but my specific field of work tended to force me to run head-first into the nightmare of <a href="https://mc-stan.org/docs/stan-users-guide/latent-discrete.html">latent discrete parameters</a>, which limited the usefulness of stan for me. Happily for me, this is rarely an issue in pharmacometrics, so I have now joined the Church of the No U-Turn Sampler and offer up my daily prayers to Our Lady of the Hamiltonian Monte Carlo like all the other Bayesian girls.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>My personal preference is to use <code>brmsformula()</code>. In general I prefer informative function names, even if they require a few extra keystrokes. Among other things, it helps me remember that <code>bf()</code> does not stand for <a href="../../posts/2023-04-12_bayes-factors/">‚ÄúBayes factor‚Äù</a>, nor does it stand for ‚Äúboyfriend‚Äù. I have far too much trauma around both of these topics, and as much as I‚Äôm trying to repent my sins, my therapist isn‚Äôt very well versed in statistical model selection and has not been particularly helpful in that arena.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>I discussed this in an <a href="../../posts/2024-11-11_emax-parameters/">earlier blog post</a>. The structure of an Emax model more or less guarantees that if you don‚Äôt have strong information provided either by the data or the priors, you‚Äôll run into some unpleasant model identifability issues. For this post I‚Äôll be supplying mildly informative priors and using data sets that are moderately informative, so we won‚Äôt run into the pathological cases I constructed in that post, but it is still important to be mindful of this as an issue.‚Ü©Ô∏é</p></li>
<li id="fn7"><p>Okay yes, I have not manually specified the prior for the error variance <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2">. Feel free to inspect the Stan code to see how brms handles that.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {Bayesian {Emax} Regression Using Brms},
  date = {2025-06-14},
  url = {https://blog.djnavarro.net/posts/2025-06-14_brms-emax/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúBayesian Emax Regression Using
Brms.‚Äù</span> June 14, 2025. <a href="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/">https://blog.djnavarro.net/posts/2025-06-14_brms-emax/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Pharmacometrics</category>
  <category>Statistics</category>
  <category>Bayes</category>
  <category>Stan</category>
  <guid>https://blog.djnavarro.net/posts/2025-06-14_brms-emax/</guid>
  <pubDate>Fri, 13 Jun 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-06-14_brms-emax/img/june_12_1236.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Scatterplot matrices with pairwise pivoting</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Everybody loves a good data visualisation. I love plots as much as the next weirdo, and I love tinkering with ggplot2 and other tools that let me design them the way I want them to look. It‚Äôs fun, and it makes me attractive, and popular, and scientific. Yay for plots.</p>
<p>The dirty truth about plotting data though, is that a distressingly large proportion of the work that goes into making a data visualisation happens before you even get to the fun plotting part. So often all the hard work is done at the data wrangling stage: getting the <em>data</em> into the form that it needs to be in order to create the pretty pictures all the boys love me for.<sup>1</sup></p>
<p>I‚Äôve written about this before. When I talked about <a href="../../posts/2022-08-23_visualising-a-billion-rows/">how to visualise a billion rows of data in R</a>, I spent waaaaaaay more time talking about the data wrangling than about the data visualisation itself. That‚Äôs where all the hard work is done.</p>
<p>And so it is with considerable displeasure that I come to the vexing topic of drawing scatterplot matrices in ggplot2. As a mathematical psychologist this was a task I had to perform regularly and it annoyed me. As a data scientist, it was also a task I had to perform regularly, and it annoyed me. But now I am a pharmacometrician,<sup>2</sup> and‚Ä¶ yep, I still have to perform this task regularly, and it still annoys me.</p>
<p>Something about it feels <em>wrong</em>. It feels wrong because the data set that the analyst is using for other purposes is almost always mismatched to the format that the data needs to be in to make the plot effortless. Here‚Äôs what I mean, let‚Äôs say I‚Äôm working with our bestest friend, the Palmer penguins data. It looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">penguins <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-2">    tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb1-3"></span>
<span id="cb1-4">penguins</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 √ó 8
   species island    bill_len bill_dep flipper_len body_mass sex     year
   &lt;fct&gt;   &lt;fct&gt;        &lt;dbl&gt;    &lt;dbl&gt;       &lt;int&gt;     &lt;int&gt; &lt;fct&gt;  &lt;int&gt;
 1 Adelie  Torgersen     39.1     18.7         181      3750 male    2007
 2 Adelie  Torgersen     39.5     17.4         186      3800 female  2007
 3 Adelie  Torgersen     40.3     18           195      3250 female  2007
 4 Adelie  Torgersen     NA       NA            NA        NA &lt;NA&gt;    2007
 5 Adelie  Torgersen     36.7     19.3         193      3450 female  2007
 6 Adelie  Torgersen     39.3     20.6         190      3650 male    2007
 7 Adelie  Torgersen     38.9     17.8         181      3625 female  2007
 8 Adelie  Torgersen     39.2     19.6         195      4675 male    2007
 9 Adelie  Torgersen     34.1     18.1         193      3475 &lt;NA&gt;    2007
10 Adelie  Torgersen     42       20.2         190      4250 &lt;NA&gt;    2007
# ‚Ñπ 334 more rows</code></pre>
</div>
</div>
<p>This data makes sense. It is <em>tidy</em>. There is one row per penguin, and one column per measurement. We love data in this format. But suppose I wanted to draw a scatterplot matrix, to visualise the relationships between bill length, bill depth, flipper length, etc, perhaps with each penguin species plotted in a different colour. Intuitively what I <em>want</em> to do in ggplot2 is treat each separate pairwise plot as a facet, and then use something like <code>facet_grid()</code> to give me a plot that looks like this:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/index_files/figure-html/demo-plot-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>However, you can‚Äôt easily do this with ggplot2, not with the <code>penguins</code> data in its current form. So what people (including me) usually do, because life is short and scatterplot matrices suck, is fall back on a canned solution like <code>GGally::ggpairs()</code> to do the work. As much as I respect the amount of work that has gone into this function ‚Äì and I really do it‚Äôs awesome ‚Äì it is essentially a canned plot, and it suffers from the inherent problem that attaches to all canned plots. Whenever you want something that isn‚Äôt already catered to by one of the various customisation features supplied the plot function, you‚Äôre forced to adopt horrible hacks.<sup>3</sup> On many occasions when I have used <code>ggpairs()</code> I‚Äôve found myself diving into the source code to try to work out precisely what kind of plot object it produces, just so that I can tinker with one tiny little thing that is specific to my use case that (quite understandably) the authors of GGally were unable to predict in advance.</p>
<p>It is very frustrating, and for years I have thought that there must be a better way. It turns out that there is, and it‚Äôs not very hard. All you have to do is stop thinking of this as a visualisation problem and instead think of it as a data wrangling problem. As is so often the case in life, once you think about the problem in the right terms, it becomes sooooooo much easier to solve.</p>
<section id="the-desired-functionality" class="level2">
<h2 class="anchored" data-anchor-id="the-desired-functionality">The desired functionality</h2>
<p>Let us imagine, for the moment, that we had a function called <code>pivot_pairwise()</code> with arguments similar to those in the lovely <code>tidyr::pivot_longer()</code> function. It would have arguments like these:</p>
<ul>
<li><code>pivot_cols</code> provides a <a href="https://tidyr.tidyverse.org/reference/tidyr_tidy_select.html">tidy selection</a> of columns. These columns are the ones that we need in ‚Äúpairwise‚Äù format. That is, for each penguin we want one row for each pair of measurements: there would be one row for the combination of <code>bill_len</code> and <code>bill_dep</code>, another row for the combination of <code>bill_leng</code> and <code>flipper_len</code>, and so on.</li>
<li><code>other_cols</code> is also a tidy selection of columns, but this time for those variables that you will want to use in your plot but aren‚Äôt actually part of the ‚Äúpairwise‚Äù specification. In our example, <code>species</code> is the only one we need: later on we will want to colour each dot by species, but it‚Äôs not one of the rows or columns in our scatterplot matrix</li>
<li>Because each penguin will now correspond to many rows there would be a <code>row_id</code> argument that specifies the name of a newly-inserted column that would be used as an identifier for each individual penguin</li>
<li>There would also be <code>names_to</code> and <code>values_to</code> arguments, which work much the same way the same arguments in <code>pivot_longer()</code> work. We would use <code>names_to</code> to specify the name of the column that stores the variable names, and <code>values_to</code> would be a string specifying the name of the column storing the measured values for each variable.</li>
</ul>
<p>If we did in fact have access to wonderful magical fabulous function like this, we could effortly pivot the <code>penguins</code> data into a new pairwise format like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">penguin_paired_measurements <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> penguins <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_pairwise</span>(</span>
<span id="cb3-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pivot_cols =</span> bill_len<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>body_mass,</span>
<span id="cb3-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">other_cols =</span> species,</span>
<span id="cb3-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguin"</span>,</span>
<span id="cb3-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>,</span>
<span id="cb3-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"val"</span></span>
<span id="cb3-8">    )</span>
<span id="cb3-9"></span>
<span id="cb3-10">penguin_paired_measurements</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5,504 √ó 6
   penguin x_var       y_var       x_val  y_val species
     &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;  
 1       1 bill_len    bill_len     39.1   39.1 Adelie 
 2       1 bill_len    bill_dep     39.1   18.7 Adelie 
 3       1 bill_len    flipper_len  39.1  181   Adelie 
 4       1 bill_len    body_mass    39.1 3750   Adelie 
 5       1 bill_dep    bill_len     18.7   39.1 Adelie 
 6       1 bill_dep    bill_dep     18.7   18.7 Adelie 
 7       1 bill_dep    flipper_len  18.7  181   Adelie 
 8       1 bill_dep    body_mass    18.7 3750   Adelie 
 9       1 flipper_len bill_len    181     39.1 Adelie 
10       1 flipper_len bill_dep    181     18.7 Adelie 
# ‚Ñπ 5,494 more rows</code></pre>
</div>
</div>
<p>Once you have the data in this format you can tackle it with ggplot2 in exactly the same way you would any other data visualisation problem:<sup>4</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb5-2"></span>
<span id="cb5-3">penguin_paired_measurements <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x_val, y_val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(y_var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x_var, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Clearly not perfect, and some tinkering will be needed so that we can get the actual plot we‚Äôre looking for but‚Ä¶ it now feels like a normal ggplot2 exercise. Because we have the data in the format that is natural for the plot, writing the code for the visualisation no longer seems like an exercise in smashing your head agains a wall or trying to explain to people why there is not and should not be a ‚Äústraight pride‚Äù month.<sup>5</sup></p>
</section>
<section id="the-code" class="level2">
<h2 class="anchored" data-anchor-id="the-code">The code</h2>
<p>To my everlasting embarrassment, the moment I realised that this was a data formatting issue and not a data visualisation issue, it took me less than an hour to write a basic version of the <code>pivot_pairwise()</code> function. I‚Äôm writing this post on a very strict time budget because I have actual client work that needs to be attended to, so let‚Äôs cut to the chase and present the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">pivot_pairwise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, </span>
<span id="cb6-2">                           pivot_cols, </span>
<span id="cb6-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">other_cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pivot_cols,</span>
<span id="cb6-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>,</span>
<span id="cb6-5">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>,</span>
<span id="cb6-6">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pair_label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>),</span>
<span id="cb6-7">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pair_label_sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>,</span>
<span id="cb6-8">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row_id"</span>) {</span>
<span id="cb6-9"></span>
<span id="cb6-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># construct variable names</span></span>
<span id="cb6-11">    x_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(pair_label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], values_to, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> pair_label_sep)</span>
<span id="cb6-12">    y_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(pair_label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], values_to, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> pair_label_sep)</span>
<span id="cb6-13">    x_name  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(pair_label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], names_to, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> pair_label_sep)</span>
<span id="cb6-14">    y_name  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(pair_label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], names_to, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> pair_label_sep)</span>
<span id="cb6-15"></span>
<span id="cb6-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create an id column</span></span>
<span id="cb6-17">    base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-18">        dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>({{row_id}} <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>())</span>
<span id="cb6-19">  </span>
<span id="cb6-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variables to be retained but not pairwise-pivoted</span></span>
<span id="cb6-21">    fixed_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-22">        dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(</span>
<span id="cb6-23">            {{other_cols}}, </span>
<span id="cb6-24">            tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(row_id)</span>
<span id="cb6-25">        )</span>
<span id="cb6-26">    </span>
<span id="cb6-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select pivoting columns, pivot to long, and relabel as x-var </span></span>
<span id="cb6-28">    long_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-29">        dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(</span>
<span id="cb6-30">            {{pivot_cols}},            </span>
<span id="cb6-31">            tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(row_id)</span>
<span id="cb6-32">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-33">        tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb6-34">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> {{pivot_cols}},</span>
<span id="cb6-35">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> {{x_name}},</span>
<span id="cb6-36">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> {{x_value}}</span>
<span id="cb6-37">        )</span>
<span id="cb6-38"></span>
<span id="cb6-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same data frame, but with new variable names for pivoted vars</span></span>
<span id="cb6-40">    long_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> long_x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-41">        dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(</span>
<span id="cb6-42">            {{y_name}} <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> {{x_name}}, </span>
<span id="cb6-43">            {{y_value}} <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> {{x_value}}</span>
<span id="cb6-44">        )</span>
<span id="cb6-45"></span>
<span id="cb6-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># full join with many-to-many gives all pairs; then restore other columns</span></span>
<span id="cb6-47">    pairs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_join</span>(</span>
<span id="cb6-48">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> long_x,</span>
<span id="cb6-49">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> long_y,</span>
<span id="cb6-50">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> row_id,</span>
<span id="cb6-51">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">relationship =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"many-to-many"</span></span>
<span id="cb6-52">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-53">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relocate</span>({{y_name}}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.after =</span> {{x_name}}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-54">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(fixed_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> row_id)</span>
<span id="cb6-55">    </span>
<span id="cb6-56">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pairs)</span>
<span id="cb6-57">}</span></code></pre></div>
</div>
<p>It looks a little fancy because I wanted to properly support tidy selection, and I wanted the usage to feel similar to <code>pivot_longer()</code> but in truth it‚Äôs very simple. I‚Äôm just doing a pivot and a couple of dplyr joins. It‚Äôs really simple, so much so that a part of me is wondering if I missed something shockingly obvious? Like, doesn‚Äôt this already exist as a function somewhere? If not, it ought to.<sup>6</sup></p>
</section>
<section id="plotting-the-pivoted-data" class="level2">
<h2 class="anchored" data-anchor-id="plotting-the-pivoted-data">Plotting the pivoted data</h2>
<p>As I hinted at previously the nice thing about having the data in the <code>penguin_paired_measurements</code> format is that we can now tinker with the plot in all sorts of fun and exciting ways. To do this, I‚Äôll quietly replace the <code>ggplot2::facet_grid()</code> function with the <code>ggh4x::facet_grid2()</code> function. It does roughly the same thing but has some extra functionality that comes in handy here. For example, if I use <code>dplyr::filter()</code> to remove the pointless data on the main diagonal of the scatterplot matrix, <code>facet_grid2()</code> allows me to remove those facets entirely by setting <code>render_empty = FALSE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">penguin_paired_measurements <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-2">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(y_var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> x_var) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x_val, y_val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-5">    ggh4x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid2</span>(</span>
<span id="cb7-6">        y_var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x_var,</span>
<span id="cb7-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>,</span>
<span id="cb7-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">render_empty =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb7-9">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/index_files/figure-html/paired-plot-drop-diagonal-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>That‚Äôs neat, but of course I could take this further and choose to plot only the lower triangular panels, in a style similar to how <code>ggpairs()</code> works by default. That requires only very minor edits to the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">penguin_paired_measurements <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-2">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(y_var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x_var) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x_val, y_val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-5">    ggh4x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid2</span>(</span>
<span id="cb8-6">        y_var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x_var,</span>
<span id="cb8-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>,</span>
<span id="cb8-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">switch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"both"</span>,</span>
<span id="cb8-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">render_empty =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb8-10">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/index_files/figure-html/paired-plot-lower-triangular-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Rendering my scatterplots as upper triangular matrix is equally simple:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">penguin_paired_measurements <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-2">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(x_var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y_var) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x_val, y_val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-5">    ggh4x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid2</span>(</span>
<span id="cb9-6">        y_var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x_var,</span>
<span id="cb9-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>,</span>
<span id="cb9-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">render_empty =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb9-9">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-10">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-11">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/index_files/figure-html/paired-plot-upper-triangular-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>I‚Äôm not sure why I would want to do this, but if for some reason I actually did, I could take it even further and use functionality like <code>ggforce::geom_mark_hull()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">penguin_paired_measurements <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-2">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(y_var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> x_var) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x_val, y_val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-4">    ggforce<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_mark_hull</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-6">    ggh4x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid2</span>(</span>
<span id="cb10-7">        y_var <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x_var,</span>
<span id="cb10-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>,</span>
<span id="cb10-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">switch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"both"</span>,</span>
<span id="cb10-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">render_empty =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb10-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/index_files/figure-html/paired-plot-with-hulls-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>You can do anything with <a href="https://zombo.com/">properly formatted data</a>.</p>
<p>Anything at all.</p>
<p>The only limit is yourself.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/index_files/figure-html/absurdity-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Shut up it‚Äôs my fantasy, let a girl dream okay?‚Ü©Ô∏é</p></li>
<li id="fn2"><p>Apparently.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>In fairness to the authors, if you do a deep dive on <code>ggpairs()</code> you might be surprised at how impressively customisable it is. I‚Äôm pretty sure that with some careful thought I could recreate and of the plots below purely with <code>ggpairs()</code>. It‚Äôs just that‚Ä¶ well, I don‚Äôt want to. I already understand ggplot2, I don‚Äôt want to have to learn a new thing.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>Normally this would throw a ggplot2 warning about missing values. I‚Äôve suppressed those here because they‚Äôre ugly and somewhat irrelevant to the point of this post.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>Some personal recollections on this topic <a href="https://etc.djnavarro.net/007/straight-pride/">here</a>. Be warned, it ain‚Äôt pretty.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>I later learned that there are indeed similar approaches elsewhere. The <code>tidybayes::gather_pairs()</code> function provides much the same functionality by operating directly on the data the same way that <code>pivot_pairwise()</code> does, but it predates both <code>pivot_longer()</code> and the tidy selection framework so the syntax is a bit different and you can‚Äôt pass a tidy selection. Alternatively, I‚Äôve been told that <code>ggforce::facet_matrix()</code> allows you to accomplish some of the same results entirely within ggplot2. I can imagine either of those being useful in different situations.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {Scatterplot Matrices with Pairwise Pivoting},
  date = {2025-06-03},
  url = {https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúScatterplot Matrices with Pairwise
Pivoting.‚Äù</span> June 3, 2025. <a href="https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/">https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Data Visualisation</category>
  <category>Data Wrangling</category>
  <guid>https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/</guid>
  <pubDate>Mon, 02 Jun 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-06-03_ggplot2-scatterplot-pairs/absurdity.png" medium="image" type="image/png" height="154" width="144"/>
</item>
<item>
  <title>When good pseudorandom numbers go bad</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<blockquote class="blockquote">
<p>Computing the eigendecomposition of a matrix is subject to errors on a real-world computer: the definitive analysis is Wilkinson (1965). All you can hope for is a solution to a problem suitably close to x. So even though a real asymmetric x may have an algebraic solution with repeated real eigenvalues, the computed solution may be of a similar matrix with complex conjugate pairs of eigenvalues. <br> &nbsp;&nbsp; ‚Äì <code>help("eigen")</code></p>
</blockquote>
<p>A few weeks ago, in the beforetimes when I‚Äôd not personally had the soul-crushingly unpleasant experience of being infected with that covid-19 thing,<sup>1</sup> some colleagues<sup>2</sup> approached me to talk about a reproducibility issue they‚Äôd been having with some R code. They‚Äôd been running simulations that rely on generating samples from a multivariate normal distribution, and despite doing the prudent thing and using <code>set.seed()</code> to control the state of the random number generator (RNG), the results were not computationally reproducible. The same code, executed on different machines, would produce different random numbers. The numbers weren‚Äôt ‚Äújust a little bit different‚Äù in the way that we‚Äôve all wearily learned to expect when you try to force computers to do mathematics. They wer painfully, brutally, catastrophically, irreproducible different. Somewhere, somehow, something broke.<sup>3</sup> <sup>4</sup></p>
<p>That‚Äôs not supposed to happen‚Ä¶</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/poe.png" class="img-fluid figure-img"></p>
<figcaption>Somehow, ‚ÄúPalpatine‚Äù returned. Palpatine was floating point errors all along.</figcaption>
</figure>
</div>
<p>‚Ä¶ and to be fair, in most situations it <em>doesn‚Äôt</em> happen. Most computations are reproducible, and even random number generation does what it‚Äôs supposed to do as long as you‚Äôre careful with the seed. Or, to put it more plainly, the <code>set.seed()</code> method for controlling the results of your computations in R works just fine. At the risk of being tiresome, here‚Äôs a ‚Äúrandom‚Äù permutation of the letters of the English alphabet that we obtain in R after the seed is fixed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "y" "d" "g" "a" "b" "k" "n" "r" "w" "j" "f" "t" "q" "x" "i" "e" "u" "l"
[19] "s" "p" "o" "m" "v" "z" "c" "h"</code></pre>
</div>
</div>
<p>Here is <em>THE SAME BLOODY PERMUTATION</em> of those letters, produced a second time because the author is bored and she wants you to understand that this is a quarto document so everything that you see here is being done in an actual R session and she is not making it up:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "y" "d" "g" "a" "b" "k" "n" "r" "w" "j" "f" "t" "q" "x" "i" "e" "u" "l"
[19] "s" "p" "o" "m" "v" "z" "c" "h"</code></pre>
</div>
</div>
<p>Because the original code and the replication code both use <code>set.seed(1)</code> before calling <code>sample()</code> to shuffle the letters of the alphabet into a random order, we get the <em>same</em> random permutation in both cases. And although I‚Äôm executing this code twice on the same machine, there‚Äôs no reason to expect that it would make a difference if I ran the original code on my ubuntu laptop running R 4.4.3 or on a window machine running R 4.3.1. It ‚Äúshould‚Äù be the same result either way. I mean‚Ä¶ that‚Äôs the whole purpose of <code>set.seed()</code>. It‚Äôs ‚Äúsupposed‚Äù to make your code reproducible, even though you are doing ‚Äúrandom‚Äù things with that code. Right?</p>
<p>Well. It might. If you‚Äôre lucky.</p>
<p>That‚Äôs not what my colleagues experienced with their code when generating multivariate random normal samples. In their case, different machines produced different random samples even though the code used <code>set.seed()</code> to (ostensibly) prevent that from happening. Quite reasonably, their first thought was ‚Äú<strong>WHAT THE FUCK IS THIS???</strong>‚Äù.</p>
<p>Having encountered the problem, their second thought was that it was their fault: <em>they</em> must have done something wrong with their code that caused the simulations to break. It wasn‚Äôt that. Their code was fine. Their third thought was that something was wrong with R itself, or more precisely with <code>MASS::mvrnorm()</code>, since this is the function that was causing all the difficulty. They couldn‚Äôt see anything wrong with the function though, so they asked me to look into it.</p>
<p>My first thought, when they oh-so-innocently dropped a nuclear weapon on my desk, was that MASS could not possibly be the problem. I mean, not really. It‚Äôs a very carefully tested package, it is very widely used, it‚Äôs fine. Right? Though‚Ä¶ actually, now that I think of it <code>MASS::mvrnorm()</code> is a very old function, and it makes some assumptions about what happens at a lower level that might not be right. So‚Ä¶ maybe it is the problem??? I don‚Äôt really know‚Ä¶</p>
<p>Look, it‚Äôs complicated okay?</p>
<p>So let me get back to you on that because when you track down far enough, the root cause of the problem my colleagues ran into wasn‚Äôt really the MASS package. The actual problem turned out to be the inconvenient fact that <a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic">floating point arithmetic</a> does not behave like real arithmetic, and that in turn has the teeeeensy tiny side effect that computers very often don‚Äôt do what people expect them to do.</p>
<p>Le sigh.</p>
<p>I should have known. In hindsight it was so obviously going to be floating point issues<sup>5</sup> that I shouldn‚Äôt have spent hours/days/weeks looking into it. As I said on Mastodon at the time:</p>
<blockquote class="blockquote">
<p>In future, whenever I‚Äôm asked ‚Äúwhy is [thing] not reproducible even though I set the RNG seed?‚Äù I‚Äôm not even going to bother looking into the specifics: I‚Äôm just going to reply ‚Äúfloating point arithmetic‚Äù and wait until I am inevitably proven correct.</p>
</blockquote>
<p>People will be amazed at my precognitive powers and my apparently-encyclopedic knowledge of all things computational. They will praise my genius, my devotees will raise me up on a palanquin, and I shall live as a queen and goddess amongst the lesser mortals‚Ä¶</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/unravel_17_1769.jpg" class="img-fluid figure-img"></p>
<figcaption>Matrices are strange objects. Transformations performed upon them that make sense in theory will sometimes create peculiar effects when they are enacted in the physical world. (Art by me, obviously)</figcaption>
</figure>
</div>
<p>‚Ä¶well, maybe not.</p>
<section id="the-puzzle" class="level2">
<h2 class="anchored" data-anchor-id="the-puzzle">The puzzle</h2>
<p>So, okay. The problem that my colleagues encountered was an ‚Äúacross different machines‚Äù kind of thing, and as a consequence it‚Äôs not easy for me to replicate that precise issue using a single machine like the one that renders this post. Nevertheless, I can approximate the issue using a ‚Äútrick‚Äù that seems very clever if you‚Äôve never encountered it before, but in reality is quite prosaic.<sup>6</sup> Consider these two covariance matrices, <code>cov1</code> and <code>cov2</code>. Here‚Äôs the code that generates them:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">cov1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb5-3">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.58</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.07</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.53</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.14</span>, </span>
<span id="cb5-4">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.07</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.83</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.15</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.45</span>, </span>
<span id="cb5-5">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.53</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.15</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.26</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.79</span>, </span>
<span id="cb5-6">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.14</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.45</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.79</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.93</span></span>
<span id="cb5-7">  ), </span>
<span id="cb5-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L, </span>
<span id="cb5-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L</span>
<span id="cb5-10">)</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb5-13">tol <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10e-13</span></span>
<span id="cb5-14">eps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>L) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tol, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L)</span>
<span id="cb5-15">eps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(eps)</span>
<span id="cb5-16"></span>
<span id="cb5-17">cov2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cov1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps</span></code></pre></div>
</div>
<p>When printed out, they look identical:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">cov1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1]  [,2]  [,3]  [,4]
[1,]  4.58 -1.07  2.53  0.14
[2,] -1.07  5.83  1.15 -1.45
[3,]  2.53  1.15  2.26 -0.79
[4,]  0.14 -1.45 -0.79  4.93</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">cov2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1]  [,2]  [,3]  [,4]
[1,]  4.58 -1.07  2.53  0.14
[2,] -1.07  5.83  1.15 -1.45
[3,]  2.53  1.15  2.26 -0.79
[4,]  0.14 -1.45 -0.79  4.93</code></pre>
</div>
</div>
<p>But of course, since you‚Äôve already seen the code you will be entirely unsurprised to discover that <code>cov2</code> is in fact a very slightly perturbed version of <code>cov1</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">cov1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> cov2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              [,1]          [,2]          [,3]          [,4]
[1,]  1.253220e-12 -5.131451e-13  2.597922e-13 -9.740264e-13
[2,] -5.131451e-13  1.641354e-12 -1.820766e-13  1.476375e-12
[3,]  2.597922e-13 -1.820766e-13 -3.023359e-12 -1.514788e-12
[4,] -9.740264e-13  1.476375e-12 -1.514788e-12  8.970602e-14</code></pre>
</div>
</div>
<p>Tiny differences like this are what we encounter when floating point truncation errors occur.<sup>7</sup> To use the classic example, when we try to compute a simple sum like <code>0.1 + 0.2 - 0.3</code>, the result should be zero (duh), but if we do it on a computer it usually isn‚Äôt. The answer we <em>actually</em> get is very slightly wrong because the binary representation of 0.1 in floating point representation<sup>8</sup> is infinitely long and cannot be exactly represented by a double precision floating point number, and so‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5.551115e-17</code></pre>
</div>
</div>
<p>‚Ä¶the answer is not <em>quite</em> right.</p>
<p>Even worse, the <em>precise</em> result of a computation to which floating point truncation error applies is not necessarily invariant across systems. Operating system differences, compiler settings, and a host of other factors can influence the outcome. The details don‚Äôt matter for this post, and frankly I don‚Äôt understand all of them myself. For all I know the colour of the laptop case might be relevant, or the name of the programmer‚Äôs cat. Weirdness abounds once your calculations start to run up against the limits of floating point precision.</p>
<p>Just for the sake of argument then, let‚Äôs imagine that during the course of some fancy simulation, you and I compute a covariance matrix on different machines. It‚Äôs supposed to be the same covariance matrix, but thanks to the weirdness of floating point your machine computes <code>cov1</code> and mine computes <code>cov2</code>. The differences are very small, but they‚Äôre large enough that ‚Äì SOMEHOW, IN DEFIANCE OF ALL THE LAWS OF GOD AND MAN ‚Äì this happens:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb14-2">mvr1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> MASS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mvrnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sigma =</span> cov1)</span>
<span id="cb14-3">mvr1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -0.4391833  0.2560893  0.8542052 -2.2883238</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb16-2">mvr2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> MASS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mvrnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sigma =</span> cov2)</span>
<span id="cb16-3">mvr2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  0.2878007  0.5942556 -0.2596185 -2.3919000</code></pre>
</div>
</div>
<p>Yeah‚Ä¶ uh‚Ä¶ those aren‚Äôt even remotely the same thing.</p>
<p>At this point in the post, you will probably have one of two reactions depending on your background. If you have had the traumatising experience of reading a numerical linear algebra textbook and have somehow survived, you will be sighing wearily and going ‚Äúyes Danielle, that‚Äôs what happens when you try to do mathematics with sand‚Äù. But if you live in the somewhat kinder lands of everyday applied science where the sun still shines and your gods were not brutally murdered by <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE-754</a>, you are probably thinking something more along the lines of <strong>‚ÄúWHAT THE FUCK IS THIS INSANITY DANIELLE????????‚Äù</strong></p>
<p>So. Yeah. This is one of those awkward things about computers. The moment we attempt to generate random vectors with a multivariate normal distribution, very small differences between <code>cov1</code> and <code>cov2</code> can (sometimes, depending on the precise method used to do the sampling) lead to big differences in the numbers that get generated, even though the RNG seed is the same. What is even more peculiar is that this can (and does) happen even when the random numbers in question <em>all</em> have the correct distributional properties. That is to say: the results are correct, they just aren‚Äôt reproducible.</p>
<p>That‚Äôs a little puzzling. Other kinds of calculation that rely on random number generation aren‚Äôt affected the same way. Intuitively, we expect that tiny differences in the <em>input</em> parameters should lead to tiny differences in <em>output</em> values. Indeed, that‚Äôs exactly what happens if we generate random samples from a univariate normal distribution with slightly different standard deviations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">s1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(cov1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L])</span>
<span id="cb18-2">s2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(cov2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L])</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb18-5">r1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> s1)</span>
<span id="cb18-6">r1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1.34067</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb20-2">r2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> s2)</span>
<span id="cb20-3">r2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1.34067</code></pre>
</div>
</div>
<p>These numbers look identical, but the input values are sliiiiiightly different as a consequence of the tiny differences in the input parameters <code>s1</code> and <code>s2</code>, there are slight differences between <code>r1</code> and <code>r2</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">r2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.834088e-13</code></pre>
</div>
</div>
<p>The thing is, though, this difference is minuscule and it is exactly in line with our intuitions. That‚Äôs how it should be, right? Tiny change in input equals tiny change in output. Very sensible. Very mindful. Very demure. So why do we get intuitive behaviour from <code>rnorm()</code>, but deeply counterintuitive behaviour from <code>MASS::mvrnorm()</code>?</p>
<p>I mean‚Ä¶ good question, right?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/unravel_30_3001.jpg" class="img-fluid figure-img"></p>
<figcaption>The descent begins. It is dark down there</figcaption>
</figure>
</div>
</section>
<section id="how-are-multivariate-normal-samples-generated" class="level2">
<h2 class="anchored" data-anchor-id="how-are-multivariate-normal-samples-generated">How are multivariate normal samples generated?</h2>
<p>To understand why this problem arises, it‚Äôs important to understand that <a href="https://en.wikipedia.org/wiki/Multivariate_normal_distribution#Drawing_values_from_the_distribution">sampling from a multivariate normal</a> is a somewhat different kettle of fish to drawing from a univariate normal distribution, and computationally trickier. In the univariate case, let‚Äôs say we‚Äôre using the polar form of the <a href="https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform">Box-Muller method</a>. To transform two uniform variates into two normal variates requires three multiplications, one logarithm, one square root, and one division. Each of those computations is a thing that must be performed on a machine that uses <a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic">floating point arithmetic</a>, and as a tedious consequence each of these computations can introduce very small rounding errors into the solution that the machine calculates. This is the nature of floating point arithmetic. Even so, we don‚Äôt have a reason to expect things to go catastrophically wrong in this case: there just aren‚Äôt that many computations involved, and with so few computations involved you aren‚Äôt very likely<sup>9</sup> to encounter any kind of ‚Äúeverything goes to shit‚Äù problem when runaway truncation error takes hold.</p>
<p>Sampling from a multivariate normal, on the other hand, requires a <a href="https://en.wikipedia.org/wiki/Matrix_decomposition">matrix decomposition</a>. That makes it a veeeeeeerrrrrry different kind of thing. There are many different ways you can choose to do this decomposition (more on this very shortly‚Ä¶) and still end up with suitable samples, but no matter which method you choose you will be on the hook for a <em>lot</em> more computations than in the univariate case, and to put it crudely, more computations means more opportunities for floating point arithmetic to find an esoteric edge case with which to fuck you over.</p>
<p>And so, to set the stage for how this can all go horribly wrong, let‚Äôs do a quick refresher on the multivariate normal distribution, because who doesn‚Äôt love the opportunity to break out a mathematical statistics textbook?</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20(x_1,%20%5Cldots,%20x_k)"> be a <img src="https://latex.codecogs.com/png.latex?k">-dimensional random vector that is distributed according to a multivariate normal with mean vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5Cmu%7D%20=%20(%5Cmu_1,%20%5Cldots,%20%5Cmu_k)"> and positive definite<sup>10</sup> covariance matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D%20=%20%5B%5Csigma_%7Bij%7D%5D">. The probability density function looks like this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(%5Cmathbf%7Bx%7D%20%7C%20%5Cmathbf%7B%5Cmu%7D,%20%5Cmathbf%7B%5CSigma%7D)%20=%20(2%5Cpi)%5E%7B-k/2%7D%20%5Cdet(%5Cmathbf%7B%5CSigma%7D)%5E%7B-1/2%7D%20%5Cexp%20%5Cleft(-%5Cfrac%7B1%7D%7B2%7D%20(%5Cmathbf%7Bx%7D%20-%20%5Cmathbf%7B%5Cmu%7D)%5ET%20%5Cmathbf%7B%5CSigma%7D%5E%7B-1%7D%20(%5Cmathbf%7Bx%7D%20-%20%5Cmathbf%7B%5Cmu%7D)%20%5Cright)%0A"></p>
<p>A key property of the multivariate normal is this: a linear transformation of a multivariate normal random vector is itself distributed according to a multivariate normal. More precisely, if <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bz%7D%20%5Csim%20%5Cmathcal%7BN%7D(%5Cmathbf%7B%5Cmu%7D,%20%5Cmathbf%7B%5CSigma%7D)"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7BAz%7D%20+%20%5Cmathbf%7Bb%7D">, then <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20%5Csim%20%5Cmathcal%7BN%7D(%5Cmathbf%7BA%5Cmu%7D%20+%20%5Cmathbf%7Bb%7D,%20%5Cmathbf%7BA%20%5CSigma%20A%5ET%7D)">. It‚Äôs something I recite to myself as an axiom on a weekly basis, but for the purposes of this post I decided to dig out one of my old mathematical statistics textbooks and revisited the proof.</p>
<p>It wasn‚Äôt very interesting.</p>
<p>Nevertheless, as a corollary of this proof we can assert that if <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bz%7D%20%5Csim%20%5Cmathcal%7BN%7D(%5Cmathbf%7B0%7D,%20%5Cmathbf%7BI%7D)"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7BAz%7D%20+%20%5Cmathbf%7Bb%7D">, then <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20%5Csim%20%5Cmathcal%7BN%7D(%5Cmathbf%7Bb%7D,%20%5Cmathbf%7BAA%5ET%7D)">. This gives us a convenient way to sample from a multivariate normal distribution. Without loss of generality<sup>11</sup> I‚Äôll fix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bb%7D%20=%20%5Cmathbf%7B0%7D"> and note that if we have numbers <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bz%7D"> that follow independent standard normal distributions, and some matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D%20=%20%5Cmathbf%7BA%20A%7D%5ET">, then the transformed variates <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7BAz%7D"> are multivariate normally distributed with covariance matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D">.<sup>12</sup></p>
<p>Thrilling stuff, I think we can all agree?</p>
<p>The key thing here is that this linear transformation property gives us a simple and effective algorithm for sampling multivariate normal variates:</p>
<ol type="1">
<li>Sample a vector of (pseudo-)random numbers <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bz%7D%20=%20(z_1,%20%5Cldots,%20z_k)"> independently from a standard normal distribution with mean 0 and standard deviation 1. In R that‚Äôs usually as simple as calling <code>rnorm()</code>, but if all you have is uniformly distributed random numbers you can use the Box-Muller method to transform them appropriately.</li>
<li>Using whatever fancy matrix decomposition trick is still capable of bringing love into in your withered heart, find yourself a matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D%20=%20%5Cmathbf%7BA%20A%7D%5ET">.</li>
<li>Calculate the vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20(x_1,%20%5Cldots,%20x_k)"> where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7BAz%7D">. The resulting values are multivariate normal distributed with mean <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B0%7D"> and covariance matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D">.</li>
<li>Celebrate. Eat cake.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/cake.jpg" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption>You know the truth already. You don‚Äôt need me to tell it to you</figcaption>
</figure>
</div>
</section>
<section id="hell-is-matrix-decomposition" class="level2">
<h2 class="anchored" data-anchor-id="hell-is-matrix-decomposition">Hell is matrix decomposition</h2>
<p>At this point you might be thinking, ‚Äúbut Danielle, matrix decomposition has never brought love into my life no matter how much I talk up the size of my eigenvalues on grindr, what do I do????‚Äù and okay yeah fair point. Also, you might ‚Äì extremely reasonably, I might add ‚Äì still be trying to figure out why any of this mathematical trickery explains why your code isn‚Äôt reproducible. Again, fair point.</p>
<p>To understand exactly where things went wrong, let‚Äôs demystify what <code>MASS::mvrnorm()</code> does by implementing a slightly simplified version of what was going on under the hood. This will help us pick apart what is happening here.</p>
<p>But‚Ä¶ before we start, let‚Äôs make a copy of the hidden variable <code>.Random.seed</code>. This isn‚Äôt critical for generating random numbers, but since this is the location where R hides information about the RNG state, it‚Äôs very handy to keep track of what‚Äôs happening to it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">seed_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span></code></pre></div>
</div>
<p>Okay, we‚Äôve stored a copy of the RNG state, so now let‚Äôs get started on the random sampling itself. To mirror what <code>MASS::mvrnorm()</code> does, I‚Äôll call the <code>eigen()</code> function from base R to compute eigenvalues and eigenvectors. This actually the point at which everything goes awry for us, but to some extent you can‚Äôt blame R for this, because what‚Äôs actually happening here is that R passes all the work off to <a href="https://en.wikipedia.org/wiki/LAPACK">LAPACK</a>, and it‚Äôs at that level that our problem arises:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">eig1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eigen</span>(cov1)</span>
<span id="cb25-2">eig2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eigen</span>(cov2)</span></code></pre></div>
</div>
<p>Fabulous. Amazing. The covariances matrices <code>cov1</code> and <code>cov2</code> have now both been decomposed, we have eigenvectors and eigenvalues for both of them, and I am digging into my cutlery draw looking for a fork with which to eat the promised cake‚Ä¶</p>
<p>Except. Obviously, because this post still has quite a lot of verbiage to come, something has gone wrong. So let‚Äôs put the forks away and take a moment to think about what the code above is actually doing. Just in case you happen to have ‚Äúforgotten‚Äù, the eigendecomposition of a real symmetric matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D"> can be expressed as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7B%5CSigma%7D%20=%20%5Cmathbf%7BQ%7D%20%5Cmathbf%7B%5CLambda%7D%20%5Cmathbf%7BQ%7D%5E%5Cprime%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> is a diagonal matrix containing the eigenvalues of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BQ%7D"> is an orthogonal matrix whose columns are the real, orthonormal eigenvectors of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D">. It says so in the <a href="https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix#Real_symmetric_matrices">wikipedia entry</a> so it must be true.<sup>13</sup> When calling <code>eigen()</code> in R, the return value is a list that contains a vector of eigenvalues, and a matrix of eigenvectors. To keep things consistent with the notation in the equation above, let‚Äôs pull those out:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matrices of eigenvectors</span></span>
<span id="cb26-2">Q1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eig1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vectors</span>
<span id="cb26-3">Q2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eig2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vectors</span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># diagonal matrices of eigenvalues</span></span>
<span id="cb26-6">L1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(eig1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L)</span>
<span id="cb26-7">L2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(eig2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L)</span></code></pre></div>
</div>
<p>Now that we have these two matrices, we can construct a matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BQ%7D%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D"> where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D"> is a diagonal matrix that contains the square root of the eigenvalues as its diagonal elements. This matrix has the desired property <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%20%5Cmathbf%7BA%7D%5E%5Cprime%20=%20%5Cmathbf%7B%5CSigma%7D">, so we can use it as the transformation matrix to sample multivariate normal variates with the desired correlational structure. So let‚Äôs do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the linear transformation matrices</span></span>
<span id="cb27-2">A1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Q1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(L1)</span>
<span id="cb27-3">A2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Q2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(L2)</span></code></pre></div>
</div>
<p>At this point let‚Äôs check the state of the random number generator. Has it changed as a result of any of these procedures?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(seed_state, .Random.seed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>No.&nbsp;No it has not. Nothing that we have done so far has invoked the random number generator in R. Nor should it: constructing the matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> isn‚Äôt supposed to be a stochastic process. We should not expect R to have invoked the random number generator up to this point, and indeed it has not.</p>
<p>However, we‚Äôre now at the point where we <em>do</em> need to produce some random numbers, because we need a vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bz%7D"> of independent normally distributed variates with mean zero and standard deviation one. When I called <code>MASS::mvrnorm()</code> earlier, I used <code>set.seed(1L)</code> to fix the state of the random number generator beforehand, and I‚Äôll do so again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb30-2">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L)</span></code></pre></div>
</div>
<p>For simplicity I‚Äôve explicitly formatted the output as a matrix so that R will treat it as a column vector, and now all I have to do to construct my correlated random variates is to compute <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BAz%7D">:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">r1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(A1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> z)</span>
<span id="cb31-2">r2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(A2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> z)</span></code></pre></div>
</div>
<p>Et voila, we are done. We have now generated random vectors that are <em>identical</em> to those produced by <code>MASS::mvrnorm()</code>. Let‚Äôs just confirm this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(r1, mvr1)</span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(r2, mvr2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE
[1] TRUE</code></pre>
</div>
</div>
<p>Yay us! Our code has perfectly reproduced the behaviour of multivariate normal sampling in MASS. Somewhat unfortunately, as we‚Äôve already seen, <code>mvr1</code> and <code>mvr2</code> are massively different to each other, which is a bit of a problem for us. They‚Äôre not a teeny tiny bit different in the same way that <code>cov1</code> and <code>cov2</code> are a tiny bit different, the differences here are huge.</p>
<p>So‚Ä¶ where did things go wrong?</p>
<p>Okay that‚Äôs a silly question because earlier in the post I already told you that the call to <code>eigen()</code> is what created the problem. A better question would be to ask <em>what</em> went wrong when I called <code>eigen()</code>, and since I‚Äôve dragged this out long enough already let‚Äôs just jump to the correct answer. To that end, let‚Äôs take a look at the matrix of eigenvectors <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BQ%7D"> that is computed in both cases, paying particular attention to the last column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">Q1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]        [,2]      [,3]        [,4]
[1,]  0.1714861  0.82547827 0.1008194 -0.52821738
[2,] -0.7960923 -0.05900595 0.5498939 -0.24570733
[3,] -0.1810490  0.53628887 0.1570504  0.80929023
[4,]  0.5514081 -0.16582573 0.8141175  0.07525712</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">Q2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]        [,2]      [,3]        [,4]
[1,]  0.1714861  0.82547827 0.1008194  0.52821738
[2,] -0.7960923 -0.05900595 0.5498939  0.24570733
[3,] -0.1810490  0.53628887 0.1570504 -0.80929023
[4,]  0.5514081 -0.16582573 0.8141175 -0.07525712</code></pre>
</div>
</div>
<p>Okay yeah‚Ä¶ the sign on the last eigenvector has been reversed. We can see this more clearly by doing a scalar division of these two matrices:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">Q1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> Q2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    1    1   -1
[2,]    1    1    1   -1
[3,]    1    1    1   -1
[4,]    1    1    1   -1</code></pre>
</div>
</div>
<p>As a consequence, here‚Äôs what the transformation matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> looks like in both cases:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">A1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]      [,3]       [,4]
[1,]  0.4641655  2.0673290 0.1969347 -0.2278546
[2,] -2.1548024 -0.1477746 1.0741302 -0.1059896
[3,] -0.4900497  1.3430827 0.3067730  0.3490996
[4,]  1.4925097 -0.4152942 1.5902489  0.0324633</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">A2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]      [,3]       [,4]
[1,]  0.4641655  2.0673290 0.1969347  0.2278546
[2,] -2.1548024 -0.1477746 1.0741302  0.1059896
[3,] -0.4900497  1.3430827 0.3067730 -0.3490996
[4,]  1.4925097 -0.4152942 1.5902489 -0.0324633</code></pre>
</div>
</div>
<p>Yeah‚Ä¶ those are not the same at all. Counterintuitively though, they are both perfectly good solutions to the problem at hand. It‚Äôs not like one of them is right and the other one is wrong: they‚Äôre both perfectly acceptable solutions, in the sense that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%20%5Cmathbf%7BA%7D%5E%5Cprime%20=%20%5Cmathbf%7B%5CSigma%7D"> for both <code>A1</code> and <code>A2</code>, and will therefore produce multivariate normal distributed variates with the appropriate covariance structure when used.<sup>14</sup> They are both correct decompositions in the sense we care about, but they are not the <em>same</em> decomposition. Simulations built on <code>A1</code> and <code>A2</code> will both be correct, but they will not be the same.</p>
<p>Ultimately, it is this phenomenon that breaks reproducibility with <code>MASS::mvrnorm()</code>. Tiny quantitative changes in the covariance matrix that we pass as input can sometimes produce large <em>qualitative</em> changes in the eigendecomposition returned by LAPACK. <code>MASS::mvrnorm()</code> makes no attempt to protect the user from these effects, so when LAPACK creates this problem MASS does not fix it. In practice, therefore, random numbers generated this way will often be irreproducible on machines that rely on floating-point arithmetic.<sup>15</sup></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/unravel_28_2807.jpg" class="img-fluid figure-img"></p>
<figcaption>It‚Äôs not an act of love if you make her</figcaption>
</figure>
</div>
</section>
<section id="safe-passage-through-hell-is-notoriously-expensive" class="level2">
<h2 class="anchored" data-anchor-id="safe-passage-through-hell-is-notoriously-expensive">Safe passage through hell is notoriously expensive</h2>
<p>The first thought you might have is ‚Äúwell, Danielle, could we maybe do something about these indeterminacies? Does floating point arithmetic have to be this unpredictable?‚Äù It‚Äôs an enticing thought, right? I mean, if we could guarantee that every machine produced the same answer whenever asked to perform a simple arithmetic calculation, we wouldn‚Äôt be in this mess. Problem solved. Rainbows. Unicorns. Sunshine. Fully automated gay space luxury communism.</p>
<p>Yeah, well. About that. Look, I am not an expert in this area at all, but just take a look at this page on <a href="https://www.intel.com/content/www/us/en/developer/articles/technical/introduction-to-the-conditional-numerical-reproducibility-cnr.html">conditional numerical reproducibility</a> on Intel CPUs and GPUs. This is <em>hard</em>. If you want to make absolutely certain that two machines perform the exact same arithmetic operations in the exact same order so that you can guarantee that the exact collection of bits in the output is fully reproducible, you are going to have to make a lot of sacrifices and your computer will slow to a crawl trying to make it happen. We are almost never willing to pay the real costs that computational reproducibility imposes, if only because most of us would like to have our matrix decomposition complete sometime within the same century that it started. As Dan Simpson phrased it on <a href="https://bsky.app/profile/danpsimpson.bsky.social/post/3lp2a7on3ps2y">Bluesky</a>:</p>
<blockquote class="blockquote">
<p>It is possible to make code [bit] reproducible. Waiting for it to run becomes reminiscent of the tar drop experiment. But it is possible.</p>
</blockquote>
<p>It is an uncomfortable truth for a scientist to accept, but it is a truth nonetheless: the actual reason we don‚Äôt have reproducible code is that we don‚Äôt want it enough, and we never will. Life is short, and computational reproducibility is slow.</p>
<p>When faced with the cruel truths of material reality, one has a choice to make. We can either choose to live in a pure world of conceptual abstractions, floating above the mess and chaos of the world as it exists on the ground, or we can accept that ‚Äì in this instance ‚Äì we are engaged in the absurd exercise of trying to make a block of sand do linear algebra and of course that is going to be ugly. We are trying to force reality to bend to our mathematical whims and unfortunately reality is only partially willing to comply.</p>
<p>So let us accept a core truth: for any realistic level of time and money that a human is willing to spend performing an automated computation, there is always some probability that the machine will fuck it up. We cannot eradicate this risk in real life, and we must always act on the assumption that the computational machinery underneath our code might occasionally do some batshit things.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/material-girl.jpg" class="img-fluid figure-img"></p>
<figcaption>Unfortunately, according to the men in my life, this is not me, I‚Äôm the other kind of woman</figcaption>
</figure>
</div>
</section>
<section id="living-in-a-material-world-and-i-am-a-material-girl" class="level2">
<h2 class="anchored" data-anchor-id="living-in-a-material-world-and-i-am-a-material-girl">Living in a material world, and I am a material girl</h2>
<p>Given that the problem itself is always going to be with us, there are a few ways of dealing with it. If you want to stay within the world of eigendecompositions (which actually you probably don‚Äôt want to do, but we‚Äôll get to that later‚Ä¶) there is a ‚Äúsimple‚Äù trick that is adopted by <code>mvtnorm::rmvnorm()</code>. In <code>MASS::mvrnorm()</code> the transformation matrix is defined as <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%20:=%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D%20%5Cmathbf%7BQ%7D%5E%5Cprime">, but that‚Äôs not the only way to use the eigendecomposition to find an acceptable transformation matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D">. I haven‚Äôt been able to find an explicit statement of this in the documentation,<sup>16</sup> but if you look at the source code it‚Äôs not too hard to see that if you‚Äôre calling <code>mvtnorm::rmvnorm()</code> with <code>method = "eigen"</code>, the actual transformation matrix it uses is this one:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20:=%20%5Cmathbf%7BQ%7D%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D%5Cmathbf%7BQ%7D%5E%5Cprime%0A"> For the purpose of multivariate normal sampling this is a perfectly acceptable choice of transformation matrix, which we can demonstrate with a few incredibly boring lines of matrix algebra:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7BA%7D%20%5Cmathbf%7BA%7D%5E%5Cprime%0A&amp;=&amp;%20(%5Cmathbf%7BQ%7D%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D%5Cmathbf%7BQ%7D%5E%5Cprime)%20(%5Cmathbf%7BQ%7D%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D%5Cmathbf%7BQ%7D%5E%5Cprime)%5E%5Cprime%20%5C%5C%0A&amp;=&amp;%20%5Cmathbf%7BQ%7D%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D%5Cmathbf%7BQ%7D%5E%5Cprime%20%5Cmathbf%7BQ%7D%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D%5Cmathbf%7BQ%7D%5E%5Cprime%20%5C%5C%0A&amp;=&amp;%20%5Cmathbf%7BQ%7D%20%5Cmathbf%7B%5CLambda%7D%20%5Cmathbf%7BQ%7D%5E%5Cprime%20%5C%5C%0A&amp;=&amp;%20%5Cmathbf%7B%5CSigma%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>Somewhat to my horror, this trick actually fixes the problem. Remember, the nightmarish thing that we are trying to protect against is not ‚Äútrivial‚Äù floating point errors where a few of the numeric values are perturbed by some small amount: we are applied scientists and we simply do not care about what is happening in the 16th digit of the decimal expansion of blah blah blah. That‚Äôs not our problem. In the real world our problem is the catastrophic failure case in which those tiny perturbations cause LAPACK to flip the sign of an eigenvector, and possibly induce a catastrophic divergence in how the transformation matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is defined within the R code. <em>That‚Äôs</em> the thing that fucks us.<sup>17</sup></p>
<p>Formally, we can describe this ‚Äúeigenvalue flip‚Äù operation by considering the possibility that LAPACK ‚Äì for whatever reason ‚Äì decides to return the matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BQF%7D"> instead of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BQ%7D">, where the ‚Äúflip matrix‚Äù <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BF%7D"> is a diagonal matrix whose diagonal elements are either 1 or -1. We need a definition for our transformation matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> that is robust in the face of this kind of floating point nonsense. It is very clear that the MASS method is not invariant when this happens, since in the flipped case case it will use the transformation matrix</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D%20(%5Cmathbf%7BQF%7D)%5E%5Cprime%0A"></p>
<p>which is clearly not the same matrix it would have returned if that pesky flip matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BF%7D"> had not been inserted. In contrast, take a look at what happens to the transformation matrix used by mvtnorm when a flip matrix is inserted by LAPACK and/or the capricious gods of floating point numbers. Turns out the effect is‚Ä¶</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7BA%7D%20&amp;=&amp;%20%5Cmathbf%7BQF%7D%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D%20%5Cmathbf%7B(QF)%7D%5E%5Cprime%5C%5C%0A&amp;=&amp;%20%5Cmathbf%7BQ%7D%20%5Cmathbf%7BF%7D%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D%20%5Cmathbf%7BF%7D%5E%5Cprime%20%5Cmathbf%7BQ%7D%5E%5Cprime%20%5C%5C%0A&amp;=&amp;%20%5Cmathbf%7BQ%7D%20%5Cmathbf%7B%5CLambda%7D%5E%7B1/2%7D%20%5Cmathbf%7BQ%7D%5E%5Cprime%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>‚Ä¶absolutely nothing. Using <code>mvtnorm::rmvnorm()</code> instead of <code>MASS::mvrnorm()</code> won‚Äôt do a damn thing to protect you from floating point errors, but it will protect you against a particular kind of catastrophic reproducibility failure caused by those floating point errors, and which MASS has no defence against. So that‚Äôs nice.</p>
<p>A little later in the post I‚Äôll start implementing my own versions of both <code>mvtnorm::rmvnorm()</code> and <code>MASS::mvrnorm()</code>, and since I‚Äôve already provided a demonstration of how MASS does the sampling, I should probably conclude this section by talking about what mvtrnorm does. First, here‚Äôs what it generates when asked to generate two samples using the covariance matrix <code>cov1</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb44-2">mvtnorm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmvnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]       [,2]       [,3]     [,4]
[1,] -1.905011 -0.1682761 -1.7718432 3.583385
[2,]  1.369434 -2.0558785  0.3593391 1.772799</code></pre>
</div>
</div>
<p>Let‚Äôs try do to this ourselves, yeah? The internal code to <code>mvtnorm::rmvnorm()</code> is slightly more elaborate, and we will talk more about the details later, but in essence what it does is this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb46-2">z2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>L), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb46-3"></span>
<span id="cb46-4">A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Q1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(L1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(Q1)</span>
<span id="cb46-5">z2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> A</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]       [,2]       [,3]     [,4]
[1,] -1.905011 -0.1682761 -1.7718432 3.583385
[2,]  1.369434 -2.0558785  0.3593391 1.772799</code></pre>
</div>
</div>
<p>Yup, same thing. I could do some simulations to show that these are distributed according to the appropriate multivariate normal distribution, sure, but I‚Äôm not going to. It works, and this is going to be a long post no matter what I do. So let‚Äôs move along‚Ä¶</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/cruel.jpg" class="img-fluid figure-img"></p>
<figcaption>Straight up fanservice, if you happen to be a fan of Zac Burgess I guess. I just watched the TV series version of <em>Cruel Intentions</em> and I literally do not want to know how much older I am than him it will just hurt</figcaption>
</figure>
</div>
</section>
<section id="i-compute-his-cholesky-till-he-decompose" class="level2">
<h2 class="anchored" data-anchor-id="i-compute-his-cholesky-till-he-decompose">I compute his Cholesky till he decompose</h2>
<p>In one sense, the problem that my colleagues brought to me is already solved. I haven‚Äôt yet shown you any simulations to prove it (I will do so later), but for the moment just believe me when I say that a switch from <code>MASS::mvrnorm()</code> to <code>mvtnorm::rmvnorm()</code> will be sufficient to guard against the kind of catastrophic irreproducibility I was concerned with at the start of this post. So yeah I could stop here. My colleagues will be happy to have a practical, workable solution to the question. But I‚Äôve spent so many hours already wrapping my head around the problem that it almost seems a shame not to see it through to the bitter end.</p>
<p>Let‚Äôs take a step back. Yes, it‚Äôs nice that we have a safer way to sample from a multivariate normal using the eigendecomposition of the covariance matrix but‚Ä¶ why are we doing an eigenanything here? In this particular context we have no inherent interest in the eigenvectors or the eigenvalues: our primary goal is to construct <em>some</em> matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> that has the desired property <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BAA%7D%5E%5Cprime%20=%20%5Cmathbf%7B%5CSigma%7D">, and our secondary goal is to do this using a method that is robust in the face of floating point madness. We have no specific interest in eigendecompositions.</p>
<p>With that in mind, it‚Äôs useful to remember that the <a href="https://en.wikipedia.org/wiki/Cholesky_decomposition">Cholesky decomposition</a> is a thing that exists. For symmetric positive definite covariance matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D">, the Cholesky decomposition gives us an upper<sup>18</sup> triangular matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> with positive valued diagonal elements such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%5Cprime%20%5Cmathbf%7BU%7D%20=%20%5Cmathbf%7B%5CSigma%7D">, and therefore we can use the Cholesky factorisation <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> as the transformation matrix (i.e., the vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7BzU%7D"> will be multivariate normal distributed with covariance matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D">). In fact, there are some good reasons to prefer the Cholesky approach over the eigendecomposition.</p>
<ul>
<li><p>The first reason is speed, since as a general rule, the Cholesky decomposition is somewhat faster. Indeed, some algorithms for solving eigendecompositions will start by computing the Cholesky factorisation first anyway. In high performance situations this likely matters, but in my line of work it‚Äôs not usually critical.</p></li>
<li><p>The second reason, and the one that appeals to me in this context is that the Cholesky decomposition gives us a simpler method to avoid the ‚Äúcatastrophic‚Äù irreproducibility issue that we encountered with <code>MASS::mvrnorm()</code>.</p></li>
</ul>
<p>To understand why Cholesky makes this a little easier to fix, notice that the issue with <code>MASS::mvrnorm()</code> arises because the eigenvectors that comprise <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BQ%7D"> are determined only up to scalar multiplication (i.e., if <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D"> is an eigenvector associated with eigenvalue <img src="https://latex.codecogs.com/png.latex?%5Clambda"> then so too is <img src="https://latex.codecogs.com/png.latex?u%5Cmathbf%7Bv%7D"> for scalar <img src="https://latex.codecogs.com/png.latex?u">)<sup>19</sup> By convention the eigenvectors returned by <code>eigen()</code> are normalised (i.e., have length 1),<sup>20</sup> but that still does not give us a unique solution, and as we have seen it‚Äôs possible for the sign of an eigenvector to change with small perturbations to <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D">, and that is sufficient to break reproducibility of <code>MASS::mvrnorm()</code> because the transformation matrix it computes is not invariant to these flips. The solution adopted by <code>mvtnorm::rmvnorm()</code> with <code>method = "eigen"</code> is to define the transformation matrix differently, and in a way that sign changes on an eigenvector have no effect on the samples.</p>
<p>Yes, okay Danielle thank you, you have now restated the problem exactly and thereby made this already-tiresome post even longer, but how does Cholesky fix that?</p>
<p>Why thank you babe, I am so glad you asked.</p>
<p>Essentially, it‚Äôs easier because the Cholesky factorization is unique up to the sign of the columns, and if we impose the requirement that the main diagonals be <em>positive valued</em>, the solution is actually unique. Better yet, from our point of view as R users, that constraint appears to be imposed by <code>chol()</code>, and ‚Äì as far as I can tell ‚Äì is inherited directly from LAPACK, so we are all good. Or, to simplify the whole thing even further: <code>eigen()</code> returns an orthonormal matrix of eigenvectors <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BQ%7D"> but it is not always the same one, which is problematic for sampling purposes; <code>chol()</code> returns a triangular matrix with positive diagonal entries <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> and there‚Äôs only one of those, so you don‚Äôt have the same worry.</p>
<p>Here‚Äôs how that plays out with the matrices <code>cov1</code> and <code>cov2</code> that I constructed at the start of the post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">U1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chol</span>(cov1)</span>
<span id="cb48-2">U2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chol</span>(cov2)</span>
<span id="cb48-3"></span>
<span id="cb48-4">U1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         [,1]       [,2]      [,3]       [,4]
[1,] 2.140093 -0.4999782 1.1821914  0.0654177
[2,] 0.000000  2.3622070 0.7370522 -0.5999866
[3,] 0.000000  0.0000000 0.5649581 -0.7524714
[4,] 0.000000  0.0000000 0.0000000  1.9998808</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">U2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         [,1]       [,2]      [,3]       [,4]
[1,] 2.140093 -0.4999782 1.1821914  0.0654177
[2,] 0.000000  2.3622070 0.7370522 -0.5999866
[3,] 0.000000  0.0000000 0.5649581 -0.7524714
[4,] 0.000000  0.0000000 0.0000000  1.9998808</code></pre>
</div>
</div>
<p>These two matrices are essentially identical (up to the usual rounding errors), so there will be no surprises for us later on. So when we use the Cholesky decomposition to do the work this is what we get‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">r1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> z2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> U1</span>
<span id="cb52-2">r2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> z2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> U2</span>
<span id="cb52-3"></span>
<span id="cb52-4">r1</span>
<span id="cb52-5">r2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]        [,3]     [,4]
[1,] -1.3406697  0.7470168 -1.07732870 3.667993
[2,]  0.7051774 -2.1028628  0.06019019 1.623611
           [,1]       [,2]        [,3]     [,4]
[1,] -1.3406697  0.7470168 -1.07732870 3.667993
[2,]  0.7051774 -2.1028628  0.06019019 1.623611</code></pre>
</div>
</div>
<p>Well, not quite. These two are the same, but I‚Äôm glossing over some nuance in what <code>mvtnorm::rmvnorm()</code> actually does. As a result‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb54-2">mvtnorm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmvnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chol"</span>)</span>
<span id="cb54-3"></span>
<span id="cb54-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb54-5">mvtnorm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmvnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chol"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]       [,2]       [,3]       [,4]
[1,] -1.482092 -1.5125973 -0.5870096  0.7687608
[2,]  0.922518  0.7956095  1.3759318 -1.9517181
          [,1]       [,2]       [,3]       [,4]
[1,] -1.482092 -1.5125973 -0.5870096  0.7687608
[2,]  0.922518  0.7956095  1.3759318 -1.9517181</code></pre>
</div>
</div>
<p>‚Ä¶these aren‚Äôt the same as the last lot. What you actually have to do if you want to precisely reproduce the behaviour of <code>mvtnorm::rmvnorm()</code> is closer to this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">R1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chol</span>(cov1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pivot =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) </span>
<span id="cb56-2">R1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R1[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(R1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pivot"</span>))]</span>
<span id="cb56-3">z2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> R1</span>
<span id="cb56-4"></span>
<span id="cb56-5">R2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chol</span>(cov2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pivot =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) </span>
<span id="cb56-6">R2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R2[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(R2, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pivot"</span>))]</span>
<span id="cb56-7">z2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> R2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]       [,2]       [,3]       [,4]
[1,] -1.482092 -1.5125973 -0.5870096  0.7687608
[2,]  0.922518  0.7956095  1.3759318 -1.9517181
          [,1]       [,2]       [,3]       [,4]
[1,] -1.482092 -1.5125973 -0.5870096  0.7687608
[2,]  0.922518  0.7956095  1.3759318 -1.9517181</code></pre>
</div>
</div>
<p>Okay so that actually is the same. A little later in the post I will talk about this ‚Äúpivot‚Äù stuff, and tl;dr it does serve a useful purpose, but in truth it‚Äôs only there to handle edge cases so we don‚Äôt need to worry about it right now.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/languid_38_3842.jpg" class="img-fluid figure-img"></p>
<figcaption>In a fucking handbasket, sweetie</figcaption>
</figure>
</div>
</section>
<section id="column-the-boat-gently-down-the-stream" class="level2">
<h2 class="anchored" data-anchor-id="column-the-boat-gently-down-the-stream">Column the boat gently down the stream</h2>
<p>At this point in the post, I feel a need to digress slightly. To be clear, I do not <em>want</em> to pursue this digression because my original goal in this post was to figure out what was going on in my colleagues code and we are waaaaaaay past that point already, but‚Ä¶ the <a href="https://projects.csail.mit.edu/gsb/old-archive/gsb-archive/gsb2000-02-11.html">yak</a> is there. The yak must be shaved, or we will never escape this horrible blog post.</p>
<p>So. Since we are here and discussing desiderata for a procedure that samples from a multivariate normal distribution, let‚Äôs consider this code. Suppose I fix the seed in R with <code>set.seed()</code>, and then sample two random vectors like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb58-2">mvtnorm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmvnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chol"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]       [,2]       [,3]       [,4]
[1,] -1.482092 -1.5125973 -0.5870096  0.7687608
[2,]  0.922518  0.7956095  1.3759318 -1.9517181</code></pre>
</div>
</div>
<p>Intuitively speaking, what do we expect to happen if we decide to sample <em>three</em> random vectors rather than two? For most of us, the intuition that we have is that this should happen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb60-2">mvtnorm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmvnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chol"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]       [,2]       [,3]       [,4]
[1,] -1.482092 -1.5125973 -0.5870096  0.7687608
[2,]  0.922518  0.7956095  1.3759318 -1.9517181
[3,]  2.926835  1.3902467  2.5223180 -0.9985737</code></pre>
</div>
</div>
<p>The first two rows are unchanged, but a third row has now been added. That‚Äôs how we usually think about random sampling, but it‚Äôs not strictly required when we call a sampling procedure on a computer. Nevertheless, it‚Äôs pretty clear that <code>mvtnorm::rmvnorm()</code> produces this intuitive behaviour, at least when the Cholesky decomposition is used. Happily, it‚Äôs also what happens when we use the eigendecomposition. Here‚Äôs what happens when we sample two random vectors with a fixed seed‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb62-2">mvtnorm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmvnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]       [,2]       [,3]     [,4]
[1,] -1.905011 -0.1682761 -1.7718432 3.583385
[2,]  1.369434 -2.0558785  0.3593391 1.772799</code></pre>
</div>
</div>
<p>and here is what happens when we sample three:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb64-2">mvtnorm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmvnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]       [,2]       [,3]      [,4]
[1,] -1.905011 -0.1682761 -1.7718432 3.5833850
[2,]  1.369434 -2.0558785  0.3593391 1.7727993
[3,]  2.548065 -0.4238026  2.0197706 0.6485945</code></pre>
</div>
</div>
<p>Yay! Intuitive behaviour. That‚Äôs what I always hope to see my computer do, but I have learned from bitter experience that it doesn‚Äôt always work out that way. Case in point. Here is what happens when we sample two random vectors with <code>MASS::mvrnorm()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb66-2">MASS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mvrnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sigma =</span> cov1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]      [,2]       [,3]        [,4]
[1,] -2.064469  1.775641 -0.5440795 -0.04813373
[2,]  3.053402 -1.591002  2.0586509 -1.66920196</code></pre>
</div>
</div>
<p>Here is what happens when we ask it to sample three random vectors using the same random seed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb68-2">MASS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mvrnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sigma =</span> cov1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]      [,2]      [,3]        [,4]
[1,]  3.1727679 1.6700724  2.492507 -0.83227968
[2,]  0.5673774 0.1884158  1.106822  1.36044424
[3,] -2.0594844 2.4990037 -0.379729  0.02184323</code></pre>
</div>
</div>
<p>Siiiiiiiiigh. None of these numbers are even remotely the same. Something has gone awry, yet again. But it is important to understand what, precisely, has gone wrong. Critically, we need to understand that the MASS approach is still technically correct, in the sense that the three random vectors are all distributed in the way we want them to be, but when MASS generates the samples using the random number generator, it does so in a ‚Äúnonsequential‚Äù way. The samples are independent of each other (conditional on <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D">, of course), but there is a hidden dependence on the RNG state that ‚Äì in effect ‚Äì means that the user has to pretend that all the samples are generated ‚Äúas a block‚Äù. You can‚Äôt think of these as sequential draws because of the peculiar way that the RNG has been invoked under the hood.</p>
<p>Again. This does <em>not</em> break the statistical properties of the samples. It is, however, an obvious source of fragility in the code that can hinder reproducibility in the wild. If the user decides to change the number of random variates in the simulation, <em>all</em> the variates will change, not merely the ‚Äúextra‚Äù ones.<sup>21</sup></p>
<p>Why does this happen? I almost don‚Äôt want to tell you. It‚Äôs so fucking stupid that it‚Äôs embarrassing for all of us.<sup>22</sup> Let‚Äôs suppose I want to create a matrix with four columns, two rows, and with the numbers 1 to 8. Here‚Äôs one way to do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8</code></pre>
</div>
</div>
<p>Fabulous. Wonderful. Thrilling. No wait‚Ä¶ I need a third row. I want the numbers 1 to 12. Let‚Äôs do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12</code></pre>
</div>
</div>
<p>The numbers stored in the matrix are the same (in the sense that the numbers 1 to 8 were there before, and they‚Äôre still there after), but the <em>rows</em> have all changed because we‚Äôve entered the values <em>columnwise</em>. Normally there is absolutely no reason to care about this whatsoever. Columns and rows aren‚Äôt special: add things columnwise, add them rowwise, who cares‚Ä¶</p>
<p>‚Ä¶except there are cases when it <em>does</em> matter. If the ‚Äúdata‚Äù to enter into our matrix happen to correspond to the variates sampled using <code>rnorm()</code>, then we really, really, really, really want to enter them rowwise. If we enter them rowwise, we get this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    5    6    7    8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    5    6    7    8
[3,]    9   10   11   12</code></pre>
</div>
</div>
<p>When entries are filled rowwise, adding an ‚Äúextra‚Äù row has no effect on the previous rows. The procedure used by <code>mvtnorm::rmvnorm()</code> uses the random numbers rowwise, and hence behaves intuitively. The procedure used by <code>MASS::mvrnorm()</code> uses them columnwise, and produces the counterintuitive behaviour shown above.</p>
<p>This particular failure of <code>MASS::mvrnorm()</code> is entirely different from the one I talked about earlier. The previous issue relates to how the transformation matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is defined; this issue relates to how the independent normal variates <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bz%7D"> are used. Not the same at all. But since the end result of the whole process is to generate a random vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7BzA%7D">, and we cannot rely on either <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> or <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bz%7D"> to be ‚Äúpractically‚Äù reproducible, it might be a good idea not to rely to heavily on MASS in this context, yeah?</p>
<p>In real life, ‚Äúrow‚Äù and ‚Äúcolumn‚Äù are not interchangeable terms.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/unravel_10_1003.jpg" class="img-fluid figure-img"></p>
<figcaption>Fold, pivot, whatever. Gonna make origami honey</figcaption>
</figure>
</div>
</section>
<section id="pivot-pivot-pivot-towards-freedom" class="level2">
<h2 class="anchored" data-anchor-id="pivot-pivot-pivot-towards-freedom">Pivot, pivot, pivot towards freedom</h2>
<p>There‚Äôs one last feature in <code>mvtnorm::rmvnorm()</code> that I was uncertain about, and required a painful dive into the darkness of chapter 4 in Wilkinson (1965), and then a further skim through chapter 8. In chapter 4 of the book, he focuses solutions to systems of linear equations, which is why that‚Äôs the part of the book where he ends up talking about condition numbers for matrix inversions (see next section). But there‚Äôs a lot more in that chapter, and quite frankly I did not understand all of it. I cried a few times.</p>
<p>However.</p>
<p>Let‚Äôs suppose that you‚Äôve made the decision to call <code>mvtnorm::rmvnorm()</code>, and you‚Äôre thinking that maybe you want to use the Cholesky decomposition rather than the eigendecomposition. Fair enough, good call, I will totally back you on this. But let‚Äôs also suppose that you‚Äôve made the (probably foolish) decision to dive into the code for <code>mvtnorm::rmvnorm()</code> and you‚Äôre trying to understand what it does when it computes the Cholesky decomposition. Top marks for bravery, seriously, but if you do that you‚Äôre going to quickly find yourself asking what this <code>pivot = TRUE</code> thing is all about, and that gets a bit tricky.</p>
<p>That‚Äôs the bit where Wilkinson comes to our rescue. One of the key things that chapter 4 of the book dives into is what actually happens on a computer when you ask it to do a Gaussian elimination procedure (which, more or less, is the same thing as a Cholesky decomposition). At each step in the elimination process you have to divide one thing by another thing, and blah blah blah, and you end up needing to divide one row by some multiplier of another row, and OH DEAR LORD IN HEAVEN IT IS 1994 AGAIN AND I AM TRAPPED IN THE BACK ROW OF THE BRAGG LECTURE THEATRE WITH THE ENGINEERING BOYS AND I WANT TO DIE.</p>
<p>Um.</p>
<p>Okay, let‚Äôs simplify. There‚Äôs one key idea here: there are a lot of row operations that go into solving this problem, and if the divisor on one of these steps turns out to be very very small, the computation error due to floating point nonsense can be very large. It can go haywire. So there‚Äôs a trick where you interchange some of the rows to avoid running into the trap. This interchange tends to stabilise the procedure.<sup>23</sup> That‚Äôs what the <code>pivot = TRUE</code> bit is going on about. Pivoting is a trick we do for numerical stability, but in practice (when covariance matrices are involved) this is mostly a thing we care about if the matrix is nearly singular. It doesn‚Äôt make much of a difference otherwise.<sup>24</sup> However, as the documentation to <code>chol()</code> points out:</p>
<blockquote class="blockquote">
<p>If <code>pivot = TRUE</code>, then the Cholesky decomposition of a positive semi-definite <code>x</code> can be computed. The rank of <code>x</code> is returned as <code>attr(Q, "rank")</code>, subject to numerical errors. The pivot is returned as <code>attr(Q, "pivot")</code>. It is no longer the case that <code>t(Q) %*% Q</code> equals <code>x</code>. However, setting <code>pivot &lt;- attr(Q, "pivot")</code> and <code>oo &lt;- order(pivot)</code>, it is true that <code>t(Q[, oo]) %*% Q[, oo]</code> equals <code>x</code>, or, alternatively, <code>t(Q) %*% Q</code> equals <code>x[pivot, pivot]</code>.</p>
</blockquote>
<p>Ah. That‚Äôs what‚Äôs going on with <code>rmvnorm()</code> code: because for our purposes it is critical that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BQ%7D%5E%5Cprime%20%5Cmathbf%7BQ%7D%20=%20%5Cmathbf%7B%5CSigma%7D">, that‚Äôs the whole bloody point. So if we allow pivoting for numerical stability reasons, it is critical that we reorder the matrix appropriately.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/labour.png" class="img-fluid figure-img"></p>
<figcaption>You make me do too much <a href="https://www.youtube.com/watch?v=jvU4xWsN7-A">labour</a></figcaption>
</figure>
</div>
</section>
<section id="since-the-dawn-of-time-humanity-has-yearned-to-destroy-linear-algebra.-it-was-never-necessary" class="level2">
<h2 class="anchored" data-anchor-id="since-the-dawn-of-time-humanity-has-yearned-to-destroy-linear-algebra.-it-was-never-necessary">Since the dawn of time humanity has yearned to destroy linear algebra. It was never necessary</h2>
<p>Let us now take a step back and, in doing so, breathe deeply for a moment.</p>
<p>It is a truth universally acknowledged, at least by those of us who have had the soul crushing experience of trying to perform linear algebra by hand or even with the assistance of this absurd contraption upon which I write these words, that linear algebra is the enemy of all that is good in this world. Love, joy, freedom, sex, and kittens: linear algebra hates them all. With good cause, then, we seek its destruction. With our mathematics we have created a monster, and it is our moral duty to destroy it.</p>
<p>None of this animus was necessary. Linear algebra was perfectly willing to destroy itself, and frankly we didn‚Äôt have to try very hard, all we had to do was feed it one ill-conditioned matrix, compute the wrong fucking condition number, and the entire hubristic edifice crashes to the ground like a second-rate Death Star. The Ewoks all cheer.</p>
<p>Aaaaaanyway.</p>
<p>With this as preface, the time has come to talk about <a href="https://en.wikipedia.org/wiki/Numerical_stability">numerical stability</a>. Nobody really wants to, but we‚Äôre all trapped here in the same asylum and it passes the time. As such it inevitably transpires that we ask ourselves a very stupid question: ‚ÄúDanielle, Danielle, did you check to see if the matrix <code>cov1</code> is ill conditioned? Danielle, what‚Äôs the condition number? <a href="https://www.youtube.com/watch?v=p2oGThKmJnk">Danielle, Danielle, Danielle</a>, did you put on your dancing shoes? Is the world well?‚Äù</p>
<p>Um. Sorry. I might have let my crush on <a href="https://www.youtube.com/watch?v=3-s-y-tv9xA">Tex Perkins</a> get in the way of my writing here.</p>
<p>Okay. So. Continuing with a bit of a theme for this post, you might have one of two reactions here. Most people reading this post will probably be asking what a condition number is and wondering why they should care. A tiny subset will be thinking‚Ä¶ well yeah but did you calculate it?</p>
<p>Not for the first time in this post, Danielle sighs‚Ä¶</p>
<p>Okay so, for the benefit of folks in the second category, there‚Äôs a bit of tendency when talking about linear algebra problems to compute a thing called the ‚Äúcondition number‚Äù and say that if the condition number is close to 1 then the matrix is ‚Äúwell-conditioned‚Äù ‚Äì and therefore ‚Äúgood‚Äù, I guess? ‚Äì but if it is much larger than 1 then it is ‚Äúill-conditioned‚Äù. And therefore bad? If you haven‚Äôt done the deep dive to figure out where this nomenclature comes from or what problems it was designed to address, it‚Äôs easy to fall into the bad habit of thinking that it is a magical number that describes how ‚Äúgood‚Äù a matrix is. I mean, why else would R supply the <code>kappa()</code> function to compute this wonderful quantity?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kappa</span>(cov1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exact =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 39.37296</code></pre>
</div>
</div>
<p>Yeah, not quite. Firstly, there‚Äôs no such thing as a ‚Äúwell-conditioned matrix‚Äù or an ‚Äúill-conditioned matrix‚Äù. That‚Äôs not a thing. Conditioning is a property that attaches to a <em>computing problem</em>, and it refers to the sensitivity of the solution to small changes in the problem specification. To state the obvious, a matrix is a mathematical object, and there are many different computing problems that might attach to any given matrix. Accordingly, we will need to be a little more precise in how we discuss conditioning. To quote Wilkinson (1965, chapter 2 section 30),</p>
<blockquote class="blockquote">
<p>It is convenient to have some number that defines the condition of a matrix with respect to a computing problem and to call such a number a ‚Äòcondition number‚Äô. Ideally it should give some ‚Äòoverall assessment‚Äô of the rate of change of the solution with respect to changes in the coefficients and should therefore be in some way proportional to this rate of change <br> <br> It is evident from what we have said [earlier in the book] that even if we restrict ourselves to the problem of computing eigenvalues alone, then such a single number would have severe limitations. If any one of the eigenvalues were very sensitive then the condition number would have to be very large, even if some other eigenvalues were very insensitive.</p>
</blockquote>
<p>He goes on to note that to fully describe the sensitivities involved for computing the eigenvectors of an <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> matrix you‚Äôd need a total of <img src="https://latex.codecogs.com/png.latex?n%5E3"> quantities, the partial derivatives of all <img src="https://latex.codecogs.com/png.latex?n"> eigenvalues with respect to all <img src="https://latex.codecogs.com/png.latex?n%5E2"> elements in the matrix. That‚Äôs is of course unhelpful, at least from the perspective of the human being who has to make sense of it all. In practice then, defining condition numbers for a specific computing problem is a bit of a trade-off, trying to find something that a human being can make sense of without throwing away so much information as to render the whole exercise pointless.</p>
<p>Okay yeah. We shall consider ourselves duly warned. Condition numbers aren‚Äôt things laid down by the gods of linear algebra, they‚Äôre just rough guides, and they are defined for specific computational problems. As a case in point, for the eigenvalue problem that Wilkinson was talking about in the passage above, we rarely have cause to compute any kind of condition number because the eigenvalue problem is well-conditioned for all <a href="https://en.wikipedia.org/wiki/Normal_matrix">normal matrices</a>. We simply do not care, and when we discuss condition numbers in our everyday life this is not the computing problem to which we implicitly refer.</p>
<p>A slightly more relevant quantity for our purposes is the condition number with respect to matrix inversion of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D">.<sup>25</sup> For that, we jump forward to chapter 4 section 3, where Wilkinson notes that the condition number most commonly used for matrix inversion is <img src="https://latex.codecogs.com/png.latex?%5Ckappa(%5Cmathbf%7B%5CSigma%7D)">. I don‚Äôt really want to dive too deep here but the key thing for our purposes is to note that‚Ä¶</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ckappa(%5Cmathbf%7B%5CSigma%7D)%20=%20%7C%7C%5Cmathbf%7B%5CSigma%7D%7C%7C_2%20%5C%20%7C%7C%5Cmathbf%7B%5CSigma%7D%5E%7B-1%7D%7C%7C_2%0A"></p>
<p>‚Ä¶where <img src="https://latex.codecogs.com/png.latex?%7C%7C%5Ccdot%7C%7C_2"> denotes the spectral norm (or 2-norm) of the matrix in question, and if you don‚Äôt already know what that means it is soooooo much less interesting than you think it is. Since R also comes with the <code>solve()</code> function that we can use to invert a matrix and the <code>norm()</code> function that we can use to compute matrix norms, it‚Äôs entirely possible to recreate what <code>kappa()</code> does‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">inv_cov1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(cov1) </span>
<span id="cb80-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">norm</span>(cov1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">norm</span>(inv_cov1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 39.37296</code></pre>
</div>
</div>
<p>‚Ä¶and it is exactly as boring as you would think. Alternatively, we could note that for a symmetric matrix this quantity is identical to the ratio of the largest to smallest (absolute values of) eigenvalues:<sup>26</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(eig1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(eig1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 39.37296</code></pre>
</div>
</div>
<p>Okay great. Whatever. What does it actually <em>mean</em> in practice? Roughly speaking, the larger the value of <img src="https://latex.codecogs.com/png.latex?%5Ckappa(%5Cmathbf%7B%5CSigma%7D)">, the larger the computational error we should expect to accrue when computing <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D%5E%7B-1%7D">. I saw something online that suggested we should expect to lose one digit of precision for every order of magnitude increase in the condition number. Or something. I don‚Äôt know.</p>
<p>Really, it comes down to this‚Ä¶ the condition number of a matrix, in the sense that we usually compute it, says something about the invertibility of that matrix in a world that has floating point errors, and is not super relevant to the problem of multivariate normal sampling. Unfortunately for us this is going to show up in a couple of sections time‚Ä¶</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/pedestrian.jpg" class="img-fluid figure-img"></p>
<figcaption>Honey. Do not ask me to do this correctly. It will end badly. I‚Äôll only disappoint you</figcaption>
</figure>
</div>
</section>
<section id="its-a-wheel.-you-dont-need-to-reinvent-it" class="level2">
<h2 class="anchored" data-anchor-id="its-a-wheel.-you-dont-need-to-reinvent-it">It‚Äôs a wheel. You don‚Äôt need to reinvent it</h2>
<p>At this point we‚Äôve sort of covered everything, and we can write our own code to implement multivariate normal sampling in three different ways:</p>
<ul>
<li>Using <code>eigen()</code> MASS-style</li>
<li>Using <code>eigen()</code> mvtnorm-style</li>
<li>Using <code>chol()</code> mvtnorm-style</li>
</ul>
<p>These are of course not the only ways to do it but this post is already giving me body horror nightmares so I refuse to implement the matrix square root method. Not going to happen.</p>
<p>For our purposes it is useful to split it into two parts. First, we write a <code>transformer()</code> function that returns a transformation matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> that we can use when sampling from multivariate normal with covariance matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D">:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">transformer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(sigma, method) {</span>
<span id="cb84-2">  </span>
<span id="cb84-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract necessary quantities from eigendecomposition </span></span>
<span id="cb84-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eigen-mass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eigen-mvtnorm"</span>)) {</span>
<span id="cb84-5">    eig <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eigen</span>(sigma)</span>
<span id="cb84-6">    Q <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> eig<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vectors             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matrix of eigenvectors</span></span>
<span id="cb84-7">    L <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(eig<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># diagonal matrix of sqrt eigenvalues</span></span>
<span id="cb84-8">  }</span>
<span id="cb84-9">  </span>
<span id="cb84-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the transformation matrix A for eigendecomposition</span></span>
<span id="cb84-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eigen-mass"</span>) A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> L <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(Q)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MASS-style</span></span>
<span id="cb84-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eigen-mvtnorm"</span>) A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> L <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(Q)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mvtnorm-style</span></span>
<span id="cb84-13">  </span>
<span id="cb84-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the transformation matrix A for cholesky with pivoting</span></span>
<span id="cb84-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chol-mvtnorm"</span>) {</span>
<span id="cb84-16">    U <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chol</span>(sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pivot =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upper triangular matrix </span></span>
<span id="cb84-17">    ord <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(U, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pivot"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reordering required due to pivot</span></span>
<span id="cb84-18">    A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> U[, ord]</span>
<span id="cb84-19">  }</span>
<span id="cb84-20">  </span>
<span id="cb84-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(A)</span>
<span id="cb84-22">}</span></code></pre></div>
</div>
<p>Then we write a <code>sampler()</code> function that uses the relevant transformation matrix to compute the multivariate normal random vectors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">sampler <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n, sigma, method, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb85-2">  </span>
<span id="cb85-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># construct the transformation matrix</span></span>
<span id="cb85-4">  A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transformer</span>(sigma, method)  </span>
<span id="cb85-5"></span>
<span id="cb85-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set seed if requested</span></span>
<span id="cb85-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb85-8">  </span>
<span id="cb85-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># construct samples</span></span>
<span id="cb85-10">  k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(sigma)</span>
<span id="cb85-11">  Z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n), n, k, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eigen-mass"</span>)</span>
<span id="cb85-12">  X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> A   </span>
<span id="cb85-13"></span>
<span id="cb85-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(X)</span>
<span id="cb85-15">}</span></code></pre></div>
</div>
<p>Fabulous. Wonderful. I am putting on my cheerleading outfit already. But just to be sure let‚Äôs do a quick sanity check and make certain that the code we just wrote actually mimics the behaviour of the original functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb86-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(withr)</span>
<span id="cb86-3"></span>
<span id="cb86-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smol test"</span>, {</span>
<span id="cb86-5">  </span>
<span id="cb86-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (n <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) {</span>
<span id="cb86-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (s <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb86-8">      </span>
<span id="cb86-9">      obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sampler</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eigen-mass"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> s)</span>
<span id="cb86-10">      ref <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_seed</span>(s, MASS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mvrnorm</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sigma =</span> cov1))</span>
<span id="cb86-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(ref, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dimnames"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb86-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(obj, ref)</span>
<span id="cb86-13">      </span>
<span id="cb86-14">      obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sampler</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eigen-mvtnorm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> s)</span>
<span id="cb86-15">      ref <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_seed</span>(s, mvtnorm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmvnorm</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eigen"</span>))</span>
<span id="cb86-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(obj, ref)</span>
<span id="cb86-17">      </span>
<span id="cb86-18">      obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sampler</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chol-mvtnorm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> s)</span>
<span id="cb86-19">      ref <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_seed</span>(s, mvtnorm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmvnorm</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> cov1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chol"</span>))</span>
<span id="cb86-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(obj, ref)</span>
<span id="cb86-21">      </span>
<span id="cb86-22">    }</span>
<span id="cb86-23">  }</span>
<span id="cb86-24">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed ü•á</code></pre>
</div>
</div>
<p>Okay it works. Relief. Pom poms are being waved as I write these words. Even so, I really wouldn‚Äôt use this implementation in the wild because my version is pretty lazy: I‚Äôm only doing this so that I can convince myself that I understand what‚Äôs going on, and also to separate the sampler from the transformer for simulation purposes. Speaking of which‚Ä¶</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/child-psychology.png" class="img-fluid figure-img"></p>
<figcaption>I stopped talking when I was six years old. Okay that‚Äôs not true but I probably should have</figcaption>
</figure>
</div>
</section>
<section id="simulations-or-an-excellent-way-to-convince-you-of-something-you-already-believe-is-true" class="level2">
<h2 class="anchored" data-anchor-id="simulations-or-an-excellent-way-to-convince-you-of-something-you-already-believe-is-true">Simulations, or, an excellent way to convince you of something you already believe is true</h2>
<p>Okay now comes the fun part. It would be nice to end the post with a little simulation. Nothing fancy, just something that highlights the fact that <code>mvtnorm::rmvnorm()</code> is safer than <code>MASS::mvrnorm()</code>, and ‚Äì as a side benefit ‚Äì might also show the condition number of the covariance matrix is not a useful diagnostic for this problem. With that in mind, how shall we generate some covariance matrices to play around with? Well, let‚Äôs start with three observations:</p>
<ul>
<li>We aren‚Äôt really interested in the well-behaved covariance matrices, we‚Äôre interested in covariance matrices that might be ill-conditioned for the purposes of multivariate normal sampling</li>
<li>If I fill up a symmetric matrix with random numbers, the resulting matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BS%7D"> is probably not going to be positive definite, and won‚Äôt even be a valid covariance matrix</li>
<li>There is a some scalar multiplication of the identity <img src="https://latex.codecogs.com/png.latex?%5Cepsilon%20%5Cmathbf%7BI%7D"> such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D%20=%20%5Cmathbf%7BS%7D%20+%20%5Cepsilon%20%5Cmathbf%7BI%7D"> is positive definite for any <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> that reaches some threshold value <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_%5Cmin"></li>
</ul>
<p>This suggests a hacky and probably hideously inefficient method for constructing covariance matrices that might be ill-conditioned for the sampling problem at hand. I call it the ‚Äú<em>yeet a bunch of randos into a symmat and keep adding to the main drag until it‚Äôs positive defo</em>‚Äù method:<sup>27</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generates a symmetric matrix with standard normal distributed entries</span></span>
<span id="cb88-2">symmetric_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>L) {</span>
<span id="cb88-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb88-4">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(nrow<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), nrow, nrow)</span>
<span id="cb88-5">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">upper.tri</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">diag =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  </span>
<span id="cb88-6">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(x))</span>
<span id="cb88-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seed"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> seed</span>
<span id="cb88-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb88-9">}  </span>
<span id="cb88-10"></span>
<span id="cb88-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generates a covariance matrix we know to be symmetric and positive definite</span></span>
<span id="cb88-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># but which has a pretty good chance of being ill-conditioned</span></span>
<span id="cb88-13">covariance_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">step =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>) {</span>
<span id="cb88-14">  </span>
<span id="cb88-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># base matrix is a random symmetric matrix</span></span>
<span id="cb88-16">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">symmetric_matrix</span>(seed, nrow)</span>
<span id="cb88-17">  </span>
<span id="cb88-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># increase the diagonal until positive definite</span></span>
<span id="cb88-19">  nstep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb88-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eigen</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb88-21">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(step, nrow))</span>
<span id="cb88-22">    nstep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nstep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb88-23">  }</span>
<span id="cb88-24">  </span>
<span id="cb88-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store other information</span></span>
<span id="cb88-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"steps"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nstep</span>
<span id="cb88-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kappa"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kappa</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exact =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb88-28"></span>
<span id="cb88-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb88-30">}</span></code></pre></div>
</div>
<p>We can now look at the sensitivity of the transformation matrices to perturbations added to the (probably evil) covariance matrix that we pass to our sampler. So here goes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb89-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb89-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eigen-mass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eigen-mvtnorm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chol-mvtnorm"</span>),</span>
<span id="cb89-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perturb =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb89-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tol =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb89-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kappa =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb89-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">okay =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb89-8">)</span>
<span id="cb89-9"></span>
<span id="cb89-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(out)) {</span>
<span id="cb89-11">  </span>
<span id="cb89-12">  sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">covariance_matrix</span>(out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seed[i])</span>
<span id="cb89-13">  eps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">symmetric_matrix</span>(out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seed[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb89-14">  </span>
<span id="cb89-15">  A1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transformer</span>(sigma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>method[i])</span>
<span id="cb89-16">  A2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transformer</span>(sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>perturb[i], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>method[i])</span>
<span id="cb89-17">  </span>
<span id="cb89-18">  a1_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(A1)</span>
<span id="cb89-19">  a2_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(A2)</span>
<span id="cb89-20">  </span>
<span id="cb89-21">  diffs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(a1_vec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a2_vec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb89-22">  </span>
<span id="cb89-23">  out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kappa[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(sigma, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kappa"</span>)</span>
<span id="cb89-24">  out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>okay[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(diffs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> a1_vec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb89-25">}</span>
<span id="cb89-26"></span>
<span id="cb89-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb89-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(out, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(okay), kappa)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb89-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw_quantiles =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb89-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb89-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>method) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb89-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb89-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb89-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is the transformation matrix unchanged?"</span>,</span>
<span id="cb89-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"condition number for matrix inversion"</span></span>
<span id="cb89-36">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/index_files/figure-html/unnamed-chunk-44-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>I love this plot. I mean, on the one hand it‚Äôs kind of stupid if you‚Äôre trying to extract nuance from the simulation results, because there is absolutely no nuance to be found here: the problem exists in MASS but not mvtnorm, and it has nothing at all to do with the usual matrix condition numbers. There are literally only two things to see here. But on the other hand, it‚Äôs pretty brutal about ramming home those two points, right?</p>
<p>To phrase it a little more precisely:</p>
<ul>
<li>The reproducibility issue that my colleagues encountered is specific to MASS choosing a transformation matrix that is always admissible, but wildly unstable when tiny perturbations are introduced to the computed covariance matrix</li>
<li>The ‚Äúusual‚Äù condition number that we compute to decide if a matrix is ‚Äúill conditioned‚Äù is entirely irrelevant to the issue at hand, because <code>kappa()</code> returns a condition number associated with a different computational problem that has different failure modes. Multivariate normal sampling is a different problem to matrix inversion, and you should not assume a condition number defined with respect to one problem will generalise to a different problem, even if the two are closely related.</li>
</ul>
<p>Is it unfair to us, the human users, that nothing that happens on a computer really works the way we expect it to? Well yes. Actually it is. It‚Äôs frustrating, it sucks, and for the vast majority of us this kind of problem is wholly beyond our training. But it is what is, and <a href="https://www.youtube.com/watch?v=HN8CPj9AkX4">as the song goes</a>:</p>
<blockquote class="blockquote">
<p>Life is unfair. Kill yourself or get over it</p>
</blockquote>
</section>
<section id="recommendations" class="level2">
<h2 class="anchored" data-anchor-id="recommendations">Recommendations</h2>
<p>Siiiiiiiiiiiiiiiigh. Once upon a time I was an academic, and a weirdly successful one at that. One of the things I used to see on a regular basis is people with expertise in Field X learning exactly one fact about Field Y, getting overly excited about it, writing entire papers filled with sweeping claims about what constitutes best practice for Field Y, and getting things catastrophically, dangerously wrong.<sup>28</sup> It is a <em>thing</em>. As such, I am wary of issuing recommendations. I‚Äôm basically an amateur in this area, and you should take my thoughts with a massive grain of salt. Nevertheless, I‚Äôm also aware that some R users with even less expertise than me would perhaps like some suggestions for how to avoid this particular nightmare in their own work, and in all likelihood they would like to be given some <em>practical</em> advice rather than the nihilistic offerings I provided at the end of the last section. And yeah, that‚Äôs fair.</p>
<p>So, here goes. My recommendations, in their entirety:</p>
<ul>
<li>Call <code>set.seed()</code> immediately before the sampling<sup>29</sup></li>
<li>Use <code>mvtnorm::rmvnorm()</code> instead of <code>MASS::rmvnorm()</code> to do the sampling</li>
<li>While you‚Äôre there, you might as well also set <code>method = "chol"</code>. It doesn‚Äôt hurt</li>
<li>Don‚Äôt put too much faith in condition numbers, they‚Äôre rough guides at best</li>
<li>Learn to stop worrying and love the bomb<sup>30</sup></li>
</ul>
<p>Make of them what thou wilt.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/unravel_36_3686.jpg" class="img-fluid figure-img"></p>
<figcaption>I originally titled this piece ‚Äúinteriority‚Äù. There were reasons</figcaption>
</figure>
</div>
</section>
<section id="further-reading" class="level2">
<h2 class="anchored" data-anchor-id="further-reading">Further reading</h2>
<ul>
<li><p><em>Introduction to mathematical statistics</em> by Hogg, McKean, and Craig. Or, alternatively, any decent mathematical statistics textbook that you have lying around. I happened to have the 6th edition of this one by my bed (it‚Äôs a sex thing, don‚Äôt ask) and they‚Äôre up to the 8th edition now, but really it doesn‚Äôt matter. My actual point here is that most mathematical statistics textbooks will spend a bit of time walking you through the multivariate normal distribution, and you quite quickly get a feel for why matrix decomposition lies at the heart of anything you do with correlated normal variates.</p></li>
<li><p><a href="https://archive.org/details/algebraiceigenva0000wilk_c5b6">The algebraic eigenvalue problem</a>. Written in 1965 by James Wilkinson, this book is the primary reference discussed in the R documentation to <code>eigen()</code> and is very much the definitive source on the topic. It‚Äôs also, thanks to the magic of the Internet Archive, quite easy to borrow online if you‚Äôre so inclined.</p></li>
<li><p><a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">What every computer scientist should know about floating-point arithmetic</a>, by David Goldberg, published in the March 1991 edition of ‚ÄúComputing Surveys‚Äù. Kind of a classic article, and one that I have found myself accidentally rediscovering over and over whenever I make the mistake of assuming that floating point numbers aren‚Äôt going to break my code.</p></li>
<li><p><a href="https://www.netlib.org/lapack/lug/lapack_lug.html">LAPACK users guide</a>. As a general life rule I have tried to learn as little as possible about BLAS and LAPACK: I‚Äôm not that kind of masochist. However, I will concede that sometimes it‚Äôs a necessary evil, and the LAPACK users guide and various other resources at <a href="https://www.netlib.org/lapack/">netlib.org/lapack</a> can be helpful whenever you find yourself in that terrible situation. Oh and naturally it‚Äôs on <a href="https://github.com/Reference-LAPACK/lapack">github</a> also.</p></li>
<li><p><a href="https://journal.r-project.org/archive/2013-2/hofert.pdf">On sampling from the multivariate t distribution</a>, by Marius Hofert, published by the R Journal in December 2013. As the title suggests, the focus is on the multivariate t distribution rather than the multivariate normal, but a lot of the lessons are relevant to both, and the article doubles as documentation of some key features of the mvtnorm R package. I didn‚Äôt really understand a lot of the nuances at first, but the further I got into the Wilkinson book the more I realised that mvtnorm tries pretty hard to do the right thing.</p></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>It‚Äôs quite bad. We should have some public health measures or whatevs to ameliorate the effects of this thing. Have we considered this, or what?‚Ü©Ô∏é</p></li>
<li id="fn2"><p>For the pharmacometricians: Yes, Steve Duffull was involved in this landing on my desk. If I have learned nothing else in my brief tenure in this field it is that every one of these ‚ÄúDanielle gets dragged into the pits of hell‚Äù style R questions is <em>always</em> Steve‚Äôs fault. Somehow.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>Somehow, Palpatine returned.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>Palpatine is floating point arithmetic.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>I only say this because the context tells me in advance that it was probably not going to be a date/time computation problem, a map projection, or a fucking geodetic datum issue. There are exactly 24 hours in a day, timezones do not exist, and the Earth is a perfect sphere. Possibly a cube. I will hear no further discussions.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>Later in the post I‚Äôm going to refer back to Wilkinson (1965) quite a bit, and for those of you that have never had the heart-rendingly cruel experience of reading the book, what I‚Äôm doing here is a tiresome and bland example of the kind of phenomenon that perturbation theory (chapter 2) seeks to describe. It‚Äôs not very clever, really.‚Ü©Ô∏é</p></li>
<li id="fn7"><p>Well, I should be a bit careful here. These differences are a few orders of magnitude higher than the rounding error you‚Äôd expect by truncating one real number to a floating point number on this machine, since <code>.Machine$double.eps</code> is approximately <img src="https://latex.codecogs.com/png.latex?2.2%20%5Ctimes%2010%5E%7B-16%7D">, but rounding errors have a nasty tendency to propagate so‚Ä¶ hush.‚Ü©Ô∏é</p></li>
<li id="fn8"><p>Honey, if you‚Äôre reading this footnote with the intention of doing a ‚Äúbut, but, what if we use this other representation that you haven‚Äôt talked about in your post and is very rarely used in the programming language that you happen to be talking about here‚Äù thing, go fuck yourself. You know perfectly well that every floating point number representation has problems, and as such you have better things to do with your life than annoy me by smugly telling me something we both already know.‚Ü©Ô∏é</p></li>
<li id="fn9"><p>Not a guarantee.‚Ü©Ô∏é</p></li>
<li id="fn10"><p>Okay fine you can get away with positive semidefinite covariance matrices but in such cases the density is undefined and anyway is not the point of any of this.‚Ü©Ô∏é</p></li>
<li id="fn11"><p>I love pretending to be a real mathematician and using those words. Like, it‚Äôs true here: the mean vector isn‚Äôt really relevant to the discussion here, it‚Äôs all about the covariance matrix, so I can just fix it at the origin and nothing changes. But it‚Äôs more fun to be a pretentious twat, so I‚Äôll use the conventional language here.‚Ü©Ô∏é</p></li>
<li id="fn12"><p>Careful readers of this post will notice that about half way through, once the code starts to appear, I start changing the framing of the problem so that we actually choose <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> such that we can compute <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BzA%7D"> for a row vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bz%7D">, rather than compute <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BAz%7D"> for a column vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bz%7D">. This is not interesting, it‚Äôs entirely because in R code we usually want to represent each sample as a row vector not a column vector. The mathematical problem isn‚Äôt any different. Unfortunately, that being said, there is in fact a section coming later where I actually have to dive into the ‚Äúrows are not columns‚Äù thing. If I weren‚Äôt already sick of this post I would fix the notation to be consistent throughout, but it has been dragging on forever, I‚Äôm not being paid for this, and I‚Äôm long past the point where I can afford to spend more time on it. Sigh.‚Ü©Ô∏é</p></li>
<li id="fn13"><p>I mean, it is true of course, but also this is a special case of the more general eigendecomposition for a square matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BM%7D%20=%20%5Cmathbf%7BQ%7D%20%5Cmathbf%7B%5CLambda%7D%20%5Cmathbf%7BQ%7D%5E%7B-1%7D">. But whatever.‚Ü©Ô∏é</p></li>
<li id="fn14"><p>One of the weirdest things in this post is that I haven‚Äôt actually checked that this is true. I haven‚Äôt looked into the LAPACK source code in any detail, nor have I run any simulations to confirm that both solutions to this eigendecomposition problem lead to appropropriate multivariate normal distributed samples. I have not done so because <em>I trust the maths</em>. I say this here and now because this is important: at one time or another we all make this choice and we all decide to trust the maths. But sometimes we are betrayed, because computers are not always capable of implementing that mathematics. If you work with data long enough, this will become an issue for you eventually and it will hurt. By the end of this post you‚Äôll have seen an unpleasant example where the authors of MASS got burned badly by this. And I will ask you to be kind. Because at some level we all trust the maths, and eventually the computers betray us. You should never be a bitch to someone who just got fucked in the arse by floating point.‚Ü©Ô∏é</p></li>
<li id="fn15"><p>Sometimes I wonder what comments this would receive from CRAN maintainers if MASS were a new package submitted by a new developer. As the CRAN maintainers have often said in their correspondence (one maintainer in particular being notorious for this), if you submit a package without properly reading every single word of the staggeringly long manuals and are not compliant with every word written in those manuals (and also with the undocumented shit that R-devel just pushed 20 minutes ago) you are a bad person who deserves to be publicly humiliated. Well, the documentation to <code>eigen()</code> very clearly tells users to read Wilkinson (1965), and it is very clear that had the authors of <code>MASS::mvrnorm()</code> fully understood all the implications of what is written in that book, they would never have submitted a function for multivariate normal sampling with these appalling numerical instability problems. So, should we publicly humiliate the writers of ‚ÄúMultivariate Applied Statistics with S‚Äù? According to at least one of those two authors, the answer to this question appears to be ‚Äúyes, we should do so with relish and with malice‚Äù. However, I think this is the wrong perspective to take. As much as I ‚Äì like every other R developer who has had the misfortune to make a mistake in his presence ‚Äì would <em>loooooooove</em> to have good cause to be a bitch to Brian Ripley and return all the venom that he has directed at the rest of us over the years‚Ä¶ actually, it‚Äôs unfair. MASS is a very important package. It‚Äôs become a bit clunky over the years and a lot of its specialised functions now have better alternatives (this is one of those cases), but in the early days of R adoption it was a godsend. It is often the nature of open source development that it works this way: there are a lot of batshit things that have been baked into R because some very diligent person tried their very best to supply a massive amount of functionality to users in a hurry, entirely free of charge and usually at great cost to themselves, and they did so slightly imperfectly. We should be gentle when we discover those imperfections. And yes, that principle applies to Brian Ripley too. He is quite famously three crotchety old men in a trenchcoat, and yes he has been a nasty cunt to me too, but MASS was and is a crucial piece of infrastructure, added to R at a time it was desperately needed. I dislike the man intensely as a human being, and I do think its unwise to rely on <code>MASS::mvrnorm()</code> given this particular issue, but I remain truly grateful to him for the service he has given. No, really: this is meant very seriously. Life is complicated, and we do our best to be kind even to people who irritate us. Even Brian.‚Ü©Ô∏é</p></li>
<li id="fn16"><p>I‚Äôm sure it exists, but I have spent so much more time on this post than I wanted to and I am <em>tired</em>.‚Ü©Ô∏é</p></li>
<li id="fn17"><p>In the bad way. Normally a girl doesn‚Äôt mind that kind of thing.‚Ü©Ô∏é</p></li>
<li id="fn18"><p>I agonised over whether to present this in terms of the lower triangular or upper triangular matrix, and then realised I don‚Äôt care. If you don‚Äôt like what I‚Äôve written, please feel free to seen me an angry email at <code>peta.credlin@skynews.com.au</code>‚Ü©Ô∏é</p></li>
<li id="fn19"><p>This is the footnote where the author reminds herself that in the <em>general</em> case eigenvectors need not be orthogonal, but for a real symmetric positive definite matrix then the eigenvectors will be orthogonal.‚Ü©Ô∏é</p></li>
<li id="fn20"><p>I think that‚Äôs imposed by the LAPACK routine. Also, studious observers might notice that I am attempting to write this entire post without making explicit reference to vector norms or (gods forbid) matrix norms and am not sure what any of these things mean anymore, but no doubt I will probably slip up somewhere.‚Ü©Ô∏é</p></li>
<li id="fn21"><p>Older versions of mvtnorm had the same issue that MASS has. It was fixed in version 0.9.9994. For backwards compatibility <code>mvtnorm::rmvnorm()</code> has an argument <code>pre0.9_9994</code> that allows you to reproduce the older behaviour, but there‚Äôs almost never a good reason to use it.‚Ü©Ô∏é</p></li>
<li id="fn22"><p>Not a criticism of the package authors: it‚Äôs a comment on how fucking stupid reality is.‚Ü©Ô∏é</p></li>
<li id="fn23"><p>Actually, there‚Äôs a long discussion in the book where he basically admits this is not guaranteed.‚Ü©Ô∏é</p></li>
<li id="fn24"><p>I think. Look, there‚Äôs a long discussion of Cholesky in the context of LR and QR decompositions in chapter 8 of the book but my brain was fried by then so I don‚Äôt even know anymore.‚Ü©Ô∏é</p></li>
<li id="fn25"><p>Ideally we would define some notion of a condition number for multivariate normal <em>sampling</em> with covariance <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CSigma%7D"> but since that isn‚Äôt discussed by Wilkinson and I am out of my depth at this point in the post we shall simply have to make do with matrix inversion.‚Ü©Ô∏é</p></li>
<li id="fn26"><p>If it‚Äôs not symmetric it‚Äôs the ratio of largest to smallest singular values.‚Ü©Ô∏é</p></li>
<li id="fn27"><p>Idiotic Australian phrasing notwithstanding, this actually does work, and has sometimes been proposed as a method for fixing matrices that theoretically should be positive definite but in practice are not because sampling error and floating point shenanigans mess it all up.‚Ü©Ô∏é</p></li>
<li id="fn28"><p>See for example, psychologists talking about statistics, or physicists talking about anything that isn‚Äôt physics.‚Ü©Ô∏é</p></li>
<li id="fn29"><p>Or alternatively, wrap the call to <code>mvtnorm::rmvnorm()</code> inside a call to <code>withr::with_seed()</code>. It does the same thing and in my experience can be a useful coding practice because it starts to ‚Äúnudge‚Äù you into working out which sections of your code you <em>really</em> need to protect, and then writing your code inside smaller ‚Äúprotected blocks‚Äù. That way, if one block fails to be reproducible because of some wild and unanticipated madness, the other blocks are still protected.‚Ü©Ô∏é</p></li>
<li id="fn30"><p>The bomb in this case being floating point arithmetic. It‚Äôs pure madness down there, and you can‚Äôt control everything. Accept it, and move on with your life.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {When Good Pseudorandom Numbers Go Bad},
  date = {2025-05-18},
  url = {https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúWhen Good Pseudorandom Numbers Go
Bad.‚Äù</span> May 18, 2025. <a href="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/">https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Reproducibility</category>
  <category>Statistics</category>
  <guid>https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/</guid>
  <pubDate>Sat, 17 May 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-05-18_multivariate-normal-sampling-floating-point/unravel_17_1769.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Making menacing hearts</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-04-17_making-menacing-hearts/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<blockquote class="blockquote">
<p>Emma‚Äôs in a part of town <br> where she doesn‚Äôt recognize the streets <br> named for famous native sons <br> and out of every crevice comes creeping <br> a threat in her direction <br> <br> Lucy‚Äôs outside her home <br> heading towards her corner store <br> she stays on well-travelled paths <br> and is always making sure <br> that she doesn‚Äôt develop patterns <br> <br> &nbsp;&nbsp; ‚Äì <em>Cowboy Junkies</em></p>
</blockquote>
<p>Over the last month or so, while the world burned and my emotions went entirely haywire thanks to the painful process of nicotine withdrawal, I‚Äôve been posting artwork on social media that eventually became the <a href="https://art.djnavarro.net/gallery/menacing-hearts/">slightly menacing hearts</a> series. Like most of my generative art series, I made the source code <a href="https://github.com/djnavarro/series-menacing-hearts">available on github</a>, and released a curated set of pieces on my art website. In the past when releasing a series that I particularly like, I‚Äôve written technical posts on this blog that show how the system is designed (examples <a href="../../posts/2024-01-26_splatter/">here</a>, <a href="../../posts/2023-03-13_shattered-landscapes/">here</a>, and <a href="../../posts/2021-09-07_water-colours/">here</a>). I thought about doing that again, but honestly I don‚Äôt think there‚Äôs much value to it this time because the implementation of the menacing hearts system isn‚Äôt that much different to the <a href="../../posts/2024-12-22_art-from-code-5/">tutorial on iterated function systems</a> that I wrote a few years ago. From a technical standpoint there‚Äôs really nothing new to say, and indeed this post does not contain any euqations or any code.</p>
<p>From an artistic perspective though, it seems to me that there is still something missing. For as long as I‚Äôve been making generative art I‚Äôve consistently talked about the fact that my creative process is driven by emotions. Here‚Äôs <a href="../../posts/2021-07-08_generative-art-in-r/">something I wrote</a> back in 2021:</p>
<blockquote class="blockquote">
<p>Most of the time the starting point for my art is an emotion. I might be angry or lonely or tired, or just in need of something to occupy my mind and distract me from something else. When I start implementing a new system it‚Äôs often (though not always) a modification of a previous one. In principle this modification process could go in any direction, but my aesthetic sensibilities depend a lot on my state of mind, and that imposes a bias. I tweak the code one way, and see what it produces. If I like it, I keep the change, if I don‚Äôt I reject it. It‚Äôs a lot like a Metropolis-Hastings sampler that way, but my mood strongly shapes the accept/reject decision, so the same starting point can lead to different outcomes.</p>
</blockquote>
<p>As I wrap the slightly menacing hearts series up, it strikes me that this work has been one of the most deeply personal things I‚Äôve ever done with my art. The emotions that drove this series are tied to trauma, and when I posted individual pieces to mastodon or bluesky I tended to provide captions or titles for the pieces. The captions were often sinister, but these do not appear in the <a href="https://art.djnavarro.net/gallery/menacing-hearts/">gallery</a> of images I released. That page is just 200 images displayed in a random order. The context has been stripped out, and the audience can‚Äôt see the progression over time as the series unfolded.</p>
<p>Maybe that doesn‚Äôt matter. Barthes wasn‚Äôt wrong when he wrote <a href="https://en.wikipedia.org/wiki/The_Death_of_the_Author">the death of the author</a>. Yes, I created the pieces. And yes, my emotions and experiences shape how and why I did that. But those experiences aren‚Äôt dispositive when interpreting the artwork. I have an interpretation of my work. Others are free to perceive and interpret the same pieces in a different way.</p>
<p>Nevertheless, I‚Äôm still going to say something about what the art means to me. So‚Ä¶ here goes.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Though it is primarily about art, this post talks openly about rape. There is quite a lot of misogyny and transphobia in the text, and references to homophobic hate crimes. It may not be an easy read.</p>
</div>
</div>
<section id="i.-desire" class="level2">
<h2 class="anchored" data-anchor-id="i.-desire">I. Desire</h2>
<p>The series started with a sense of joy and success. The mood partly captured my sense of accomplishment that I‚Äôd finally found a way to render the heart motif within this system in a way I found personally satisfying. It‚Äôs something I‚Äôd tried to do in two previous systems (<a href="https://art.djnavarro.net/gallery/heart-samples/">here</a> and <a href="https://art.djnavarro.net/gallery/love-in-the-lightning/">here</a>) but with less success than I would have liked. So I was cautiously hopeful when the sixth version of the code started producing pieces I liked. Not quite convinced it was going to work out, I posted this one to social media with the caption <strong>‚Äúmaybe‚Äù</strong>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_06_1504.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>maybe</strong> (version 06, seed 1504)</figcaption>
</figure>
</div>
<p>Admittedly, my cautious optimism about the system wasn‚Äôt the only reason for picking this title. I hadn‚Äôt chosen the heart motif by accident, after all. I wrote this into the code because I was distracted thinking about love, sex, and men. The sexual undercurrent, which became darker and more overt later in the series, was there from the outset.</p>
<p>The next piece I shared was literally the next image that the system created. The <strong>maybe</strong> piece was generated using the sixth version of the system, and like most of my systems the only input argument is the RNG seed. <strong>maybe</strong> sets the seed to 1504, and the next piece <strong>something</strong> comes from seed 1505. I honestly don‚Äôt know if the pairing of titles was intentional, but it does occur to me that ‚Äúmaybe [this is] something‚Ä¶‚Äù speaks more directly to the feeling I had at the time:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_06_1505.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>something</strong> (version 06, seed 1505)</figcaption>
</figure>
</div>
<p>Like <strong>maybe</strong>, there is something delicate about <strong>something</strong>, but this time there is more energy. The white in the centre of the heart feels like it‚Äôs glowing. It feels joyful to me, slightly dreamy. There is love in the art, and ‚Äì not entirely coincidentally ‚Äì I was thinking about a man, so when the next iteration of the code produced the image below, it‚Äôs hardly a surprise that the accompanying caption turned the subtext into the text. This one is <strong>he loves me, he loves me not</strong>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_07_1674.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>he loves me, he loves me not</strong> (version 07, seed 1674)</figcaption>
</figure>
</div>
<p>I adore this piece. The balance between the orange tones and the blue tones appeals to me, and this was one of the first pieces that made me think about the structural relationship between the ‚Äúglow‚Äù in these images and the boundary defined by the heart motif itself. The way the blue seems to grow outwards from the heart, but then cling to the vertical streaks that run through the piece feels very organic to me. It makes me happy every time I revisit it.</p>
<p>The piece that followed has a slightly different vibe. The red glow in this piece extends further than earlier ones, and the warmth of the red tones is a stark contrast against the dull flat grey background. So when I called it <strong>languid in the afterglow</strong>, yes, it was about sex. Or the bit after sex when you‚Äôre still happy and warm and safe even if the rest of the world is none of those things. The afterglow that never lasts as long as you want it to.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_07_1686.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>languid in the afterglow</strong> (version 07, seed 1686)</figcaption>
</figure>
</div>
<p>Sigh.</p>
<p>In any case, the next piece I shared on social media didn‚Äôt have an explicit title. The accompanying text wasn‚Äôt really intended to be a title. All I wrote was ‚Äúthis one has such a raw, exposed feel to me that fits my mood of late‚Äù and I later decided that <strong>raw, exposed</strong> made a good title for this one.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_09_1869.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>raw, exposed</strong> (version 09, seed 1869)</figcaption>
</figure>
</div>
<p>The mood is obvious, to me at least. Compared to previous pieces the heart is so much larger, giving this feeling like the viewer is zooming in. Juxtaposed with those pieces it feels like the audience is encroaching on the subject. It feels like an invasion of personal space, and the bright bursts feel too bright, too much, and to my mind this one marks the end of a ‚Äúphase‚Äù within the series. It‚Äôs the point at which the soft, gentle feeling starts to go away. The love and warmth seems to be gone, stripped away leaving something else exposed. It feels uncomfortable.</p>
</section>
<section id="ii.-rage" class="level2">
<h2 class="anchored" data-anchor-id="ii.-rage">II. Rage</h2>
<p>In the days that followed, my mood declined. Partly it was a reaction to the state of the world, but it was partly caused by nicotine withdrawal (that comes up again later). In truth, I‚Äôd stopped smoking six months ago, but because I‚Äôd given myself permission to use nicotine gum as much as I needed to, I hadn‚Äôt actually made much progress on breaking the physiological addiction: all I‚Äôd been doing was getting the smoke out of my lungs and transferring the psychological cravings from the cigarettes to the gum. Worthy accomplishments, of course, but once I switched over to patches the amount of nicotine in my system started to plummet and withdrawal symptoms hit me really, really hard. I was tired all the time, I had trouble concentrating, and most of all I was having difficulty managing my emotions.</p>
<p>I felt angry, and I felt hopeless. When I shared this piece, I didn‚Äôt post it directly. I‚Äôd sent it to a friend of mine via chat and bitterly remarked to her that I was <strong>making my stupid art as if somehow it will make me feel better about fascism</strong>. I know, I know, I‚Äôm not <em>supposed</em> to feel like that about my art. People tell me over and over that art matters even more in dark times, and that the art I share helps them cope with the feeling of dread they feel when yet another horrible news story breaks. That‚Äôs lovely, but none of that helps me cope with <em>my</em> feelings of dread. The artist is somehow supposed to soothe others with her art, but she is not herself a beneficiary of the magic.</p>
<p>That bitterness is what came through when messaging my friend, and when I shared the piece on social media the thing I shared was a screenshot of my message to her and not the piece itself.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_18_2762.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>making my stupid art as if somehow it will make me feel better about fascism</strong> (version 18, seed 2762)</figcaption>
</figure>
</div>
<p>As far as I can tell, this was the first time I shared one of these pieces that obscured the heart motif. It‚Äôs there ‚Äì every piece generated by these systems contains the heart motif in some sense ‚Äì but the black smudges blot it out. I suppose the dark amorphous shape blocking out the sense of love that would otherwise be present is intended to represent the creeping fascism spreading across much of the western world? It‚Äôs not exactly a subtle message, really.</p>
<p>In any case, the visual style becomes even bleaker in the next piece, <strong>waving tiny rainbow flags as the gender traitors are herded toward the gallows</strong>. Again, the intention behind the caption wasn‚Äôt subtle. It speaks directly to my bitterness about people who <em>think</em> they are allies to the trans community, but who might as well be our enemies for all the good they do us. These are the people who wave the pride flag every Mardi Gras, happily tell us on social media that ‚Äúlove is love‚Äù, ‚Äútrans women are women‚Äù, and ‚Äúyou are valid!‚Äù but remain deathly silent in the real world where our rights are being drastically eroded at a terrifying pace. And to be blunt about it, most cisgender progressives fall into this category.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_20_2909.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>waving tiny rainbow flags as the gender traitors are herded toward the gallows</strong> (version 20, seed 2909)</figcaption>
</figure>
</div>
<p>Both of these pieces are angrier in their intention, and neither one is visually appealing in the same way that the earlier hearts pieces were. They mark a shift in tone, but ‚Äì at least to me ‚Äì the emotion involved isn‚Äôt really connected to the earlier pieces. Thematically, neither of these ties closely to the ideas around sex and love expressed earlier.</p>
<p>The next piece I shared, on the other hand‚Ä¶</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_14_2374.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>her rapist got her pronouns right this time</strong> (version 14, seed 2374)</figcaption>
</figure>
</div>
<p>This one hurt to post, and still hurts for me to look at. Visually, the red/green/black palette is intense but it‚Äôs dark. The black stain in the middle blots out most of the heart, and the streaks feel more like slashes and cuts tearing through the heart. The piece is striking, but it‚Äôs not pleasant to me.</p>
<p>I posted it with the caption <strong>her rapist got her pronouns right this time</strong>.</p>
<p>I am still not sure why I did that. It is, I‚Äôm sorry to say, autobiographical. It bitterly references something that happened. Why I chose this moment and this piece to pivot into a darker and more personal place, I don‚Äôt really know. But I did. Earlier in the series there was a sexual undertone that was joyful; now the art is speaking about the artist being raped.</p>
<p>The reference to pronouns in the title isn‚Äôt arbitrary either. One of the horrifying messages that trans women get sent by society is that we are ‚Äúdisposable women‚Äù. We aren‚Äôt ‚Äúgood women‚Äù, we‚Äôre the other kind. The ones that men are allowed to rape. More than that, we‚Äôre taught to perceive our own rape as gender affirming: a man has validated my gender by treating me like a woman. Being raped is supposed to be a compliment, of sorts: it‚Äôs proof that I‚Äôm enough of a woman that men want to rape me too. These messages reverberate through my head every time I revisit my experiences with rape, and the rage I feel when these thoughts intrude upon my life is overwhelming.</p>
<p>With that as context, the superficial lightness of the next piece is a little jarring:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_13_2214.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>saccharine, sweet, and devoid of value</strong> (version 13, seed 2214)</figcaption>
</figure>
</div>
<p>It was never posted with an explicit title, and at the time I posted it I was focused on a specific art criticism that I frequently encounter on social media, namely that generative art can never really be art. Generative art is machine generated, so it cannot capture true human feeling. It is soulless and empty. I don‚Äôt agree with that claim, and when I posted this piece I did so with this as the alt text:</p>
<blockquote class="blockquote">
<p>sigh. okay look, this is another one of the ‚Äúslightly menacing hearts‚Äù pieces i‚Äôve been posting lately. and yes, it is generative art, the saccharine and bland stuff everyone on here loves to hate and deride. of course, the system is written entirely by myself in R and C++ as usual, and is not ‚Äútrained‚Äù on anything at all, much less the work of other artists. because my work is of course utter garbage, the colour palette is very bright bloody pink and deep green, watermelon colours. see, red heart against green? so pretty, so nice‚Ä¶ except the red heart has black rot in the middle, the colour is leeching into the surrounding canvas, and there are ugly slash marks marring the nice pretty background, as if something had corrupted something that should have been beautiful. perhaps the artist, quite publicly a repeated survivor of rape, is expressing a very human emotion through her machine-generated work? nope, can‚Äôt be that, because all generative art is inherently soulless, lacking in artistic value, and we should never draw distinctions of any kind when making broad sweeping generalisations is so easy?</p>
</blockquote>
<p>So yes, rape <em>is</em> present in this piece, just not as overtly as it was in the previous one. In the end I decided to call it <strong>saccharine, sweet, and devoid of value</strong> with two different intended interpretations: on the one hand it‚Äôs a reference to what people wrongly think generative art is, but on the other hand it‚Äôs also a nasty reference to how I‚Äôm supposed to think of myself as a trans woman. I am supposed to be sweet and nice just like one of the ‚Äúgood women‚Äù, but nevertheless I am one of the ‚Äúdisposable women‚Äù. In the language of the <a href="https://en.wikipedia.org/wiki/Madonna%E2%80%93whore_complex">Madonna/Whore complex</a>, trans women are <em>always</em> the whore. We exist to be sexually degraded, and can never aspire to be high-status women.</p>
</section>
<section id="iii.-shame" class="level2">
<h2 class="anchored" data-anchor-id="iii.-shame">III. Shame</h2>
<p>Given where my mood had taken me, is it any real surprise that feelings of shame and humiliation start to appear in the series? I posted these two pieces together with the caption <strong>degradation</strong>:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_30_3056.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>degradation part 1</strong> (version 30, seed 3056)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_30_3075.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>degradation part 2</strong> (version 30, seed 3075)</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>I suppose the intention here was to contrast the different feel that inverting the palette has in this version of the system. The white pieces on black background tended to be delicate and lovely, the black pieces on white background have a bleaker, coarser feel. It‚Äôs not an inherent feature of white/black palettes of course, just something that emerged from the dynamics of this particular system variant, and it felt striking to me.</p>
<p>Why call the joint piece <strong>degradation</strong> though? Only one of the two pieces feels degraded. My introspection fails me a little here: maybe it‚Äôs a before the rape / after the rape distinction, or maybe it‚Äôs another reference to the Madonna/Whore dynamic. I don‚Äôt know for sure. One way or another though, the degradation referred to is sexual degradation. It references the way men usually treat me during sex, and how that treatment has trained me to confuse abuse with affection, and conflate degradation with desire. Men have taught me many lessons in life, but their primary teaching has been this one: I am weak, I am worthless, and I am shameful. Yes, this is unfair. In a moral universe shame and self-loathing should attach to abusers and rapists; but we don‚Äôt live in that universe. In real life shame is for the victims.</p>
<p>The next shared piece was this one:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_31_3119.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>wants me to tell him something pretty</strong> (version 31, seed 3119)</figcaption>
</figure>
</div>
<p>Once again, the title provides interpretation: <strong>wants me to tell him something pretty</strong>. In this the heart motif is completely obscured, and focus is drawn instead on the black shapes blotting it out against the eerie red background. Even at a visual level this piece abandons the pretense that any of this is gentle or kind or loving. In artistic terms it is a deliberate repudiation of the same thing that <strong>saccharine, sweet, and devoid of value</strong> criticises. Art isn‚Äôt always nice. It isn‚Äôt always pretty. And the real world stories behind the art aren‚Äôt always pretty either. On another level, the ‚Äúsomething pretty‚Äù in the title partly references the expectation men have that women should make ourselves pretty for them, and the piece rejects that too.</p>
<p>Finally, the specific choice of phrasing is a deliberate cultural reference. It is the final line spoken in the TV series <a href="https://en.wikipedia.org/wiki/Deadwood_(TV_series)">Deadwood</a>, delivered by Al Swearengen as he cleans up the blood of yet another murder, sourly commenting on the fact that even after all the horrors, some people never get it. They still want to be told a pretty story.</p>
<p>Next came the triptych, <strong>her presence is a blight on the natural order</strong>:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_34_3421.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>her presence is a blight on the natural order, part 1</strong> (version 34, seed 3421)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_34_3440.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>her presence is a blight on the natural order, part 2</strong> (version 34, seed 3440)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_30_3049.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>her presence is a blight on the natural order, part 3</strong> (version 30, seed 3049)</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Yet again, there is little subtlety here. One of these pieces is not like the others. Two of them are beautiful, delicate, lovely pieces to be cherished and admired. The third is a degraded, bleak, ugly thing. Guess which one is me? Guess which one is the trans woman, the one whose mere presence is declared a blight upon the natural order? If images could feel shame, we <em>all</em> know which one should feel that shame.</p>
</section>
<section id="iv.-dread" class="level2">
<h2 class="anchored" data-anchor-id="iv.-dread">IV. Dread</h2>
<p>At this point I am going to slightly reorder the sequence of pieces from how I shared them on social media. There are two pieces I posted with captions that refer directly to the physiological experiences I was having at the time, <strong>unmedicated anxiety</strong> and <strong>nicotine withdrawal</strong>. I didn‚Äôt post them explicitly as a pair, but it feels like they go naturally together:</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_45_4526.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>unmedicated anxiety</strong> (version 45, seed 4526)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_45_4452.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>nicotine withdrawal</strong> (version 45, seed 4452)</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>From a purely visual perspective I love both of these. The glowing red background to <strong>unmedicated anxiety</strong> and the softer orange lighting in <strong>nicotine withdrawal</strong> give the black structural features in both pieces a slightly haunted feel, which is very much how I was feeling at the time. My body was not in a great place, and my mood was both fickle and awful. I would lie in bed in a state of exhaustion that wrapped my brain in a confused fog, only to have this feeling punctured by occasional spikes of anxiety and dread which certainly made me alert, but rarely made me feel functional.</p>
<p>At around the same time I also posted this one:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_37_3738.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>corrosion</strong> (version 37, seed 3738)</figcaption>
</figure>
</div>
<p>The title is mostly intended literally: the brown shading in the piece feels like <strong>corrosion</strong> to me. I suppose it should be a little redder to look like rusty iron, but as an artistic choice I rarely exercise control over my pieces at that low a level. I write down the rules for the art system, and curate the pieces it creates, but I don‚Äôt directly intervene to modify them.</p>
<p>At the time I posted it I honestly don‚Äôt think I had a specific authorial intent, but in hindsight it seems to work nicely with <strong>unmedicated anxiety</strong> and <strong>nicotine withdrawal</strong>. Internally I felt like my body was corroded due to the withdrawal symptoms, and of course the sense of being corrupted is tightly intertwined with my emotions about being a trans woman and a rape survivor. It fits.</p>
<p>Then there is this one. Visually it is quite stark, and flatter than some of the others. The orange and white feels like a sunset to me, with the long dark shadows that grow at the end of day.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_37_3702.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>dreamless eternal night awaited her, for she had no soul and had not been able to win one</strong> (version 37, seed 3702)</figcaption>
</figure>
</div>
<p>I posted this with the caption <strong>dreamless eternal night awaited her, for she had no soul and had not been able to win one</strong>, a quote from <a href="https://en.wikipedia.org/wiki/The_Little_Mermaid">The Little Mermaid</a>. After selling her voice to the sea witch to alter her body, the mute little mermaid lives in constant pain but dances for her prince in the hope that he will marry her and provide her the soul that she was born without. He doesn‚Äôt, of course. She isn‚Äôt a real woman, she isn‚Äôt important enough to marry a prince, so the reward for her suffering is death. Though she acts the part of the madonna, the little mermaid is a whore.</p>
<p>For obvious reasons, quite a few trans women empathise deeply with the little mermaid. We know only too well how painful the transformation is, and that the pain persists long after the transition itself. We too know what it means to be seen to be soulless, worthless, and unloveable. As I said earlier, trans women are never permitted to be the madonna. We are like the little mermaid. We are always whores no matter how lovely we look and act and dance. We are disposable women who are inevitably doomed once a man has done as he wishes with us.</p>
<p>The next piece is entitled <strong>and she put a wreath of white lilies round her hair,</strong> and again the title is a quote from the little mermaid, from the start of the story rather than the end:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_47_4709.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>and she put a wreath of white lilies round her hair,</strong> (version 47, seed 4709)</figcaption>
</figure>
</div>
<p>In this one the visual imagery is more clearly connected to the story. There are features in the piece that look a little like waves, the palette feels a little like the sea or the beach maybe, and might even be peaceful if you don‚Äôt connect it to the tragedy of the little mermaid. For me though, having made this connection, the piece has a feeling of dread or foreboding, knowing how the story will end.</p>
<p>Then came the ambiguously titled piece, <strong>little death at tamarama beach</strong>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_37_3772.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>little death at tamarama beach</strong> (version 37, seed 3772)</figcaption>
</figure>
</div>
<p>There is a lot going on in this one. Visually, the piece is dramatic and energetic. The palette is white hot and burns wildly against the black background. It feels alive, which is somewhat in contrast to the ‚Äúdeath‚Äù referred to in the title‚Ä¶ except the title refers to ‚Äúlittle death‚Äù, an expression that is often interpreted metaphorically. So perhaps it refers to sex. On the other hand, it was posted immediately after the two little mermaid pieces, so perhaps the piece refers to the death of the little mermaid as she dissolves into sea foam. Perhaps the brightness refers to the strange denoument in the story where the little mermaid doesn‚Äôt truly die at the end and is transformed into an air spirit with no real explanation given.</p>
<p>The location of the little death is important here too. I didn‚Äôt choose <a href="https://en.wikipedia.org/wiki/Tamarama">Tamarama Beach</a> arbitrarily. In real life it is the site of a memorial dedicated to gay men and transgender women targeted by hate crimes in Sydney during the 1970s and 1980s. If ‚Äúlittle death‚Äù is interpreted sexually, the ‚Äúlittle death at tamarama beach‚Äù might be read as sex at the beach: the parks and cliffs in the eastern suburbs of Sydney were gay beats at the time. Of course, if ‚Äúdeath‚Äù is taken literally it might refer to the homophobic murders that took place there too.</p>
<p>The ambiguity here is left unresolved. Make what you will of the piece.</p>
</section>
<section id="v.-hope" class="level2">
<h2 class="anchored" data-anchor-id="v.-hope">V. Hope</h2>
<p>At this point in the series, there was a small tonal shift, a slightly more upbeat (or at least less bleak) interruption before it all ends as badly as you might expect. The next piece I posted was captioned <strong>isolated motel room on a wintry night</strong>, and though the palette and structure feels icy and frozen, the piece as a whole still feels quite gentle to me:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_40_4015.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>isolated motel room on a wintry night</strong> (version 40, seed 4015)</figcaption>
</figure>
</div>
<p>The title is ‚Äì of course ‚Äì about sex. Almost everything in this series is connected to sex in one way or another. What might two people be doing in a motel room along on a cold night? Sex, obviously, and quite likely illicit sex. Narratively, meeting in a hotel room is so often used to signify affairs, and I have shamelessly adopted that connotation here. Indeed, the piece is a reference to a married man who was attracted to me, and by implication the affair he wanted. Oddly, this is a situation that has arisen for me many times. I don‚Äôt love the idea of being the homewrecker in the story (who does?) but married men do cheat on their wives, and sometimes they cheat with trans women. There is a twisted upside to it from the transfem perspective though: at least in this situation his shame and need for secrecy is because he‚Äôs cheating on his wife, it‚Äôs not <em>only</em> because he‚Äôs ashamed to be seen with a tranny. It almost elevates me to the status a cis woman would have in this situation. Being the mistress is the upper bound on what I can aspire to in my relationships with men.</p>
<p>Sigh. On reflection, there is sadness mixed in here.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_44_4472.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>he doesn‚Äôt give me roses</strong> (version 44, seed 4472)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_44_4458.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>he gives me thorns</strong> (version 44, seed 4458)</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>I posted these as a pair on social media, and at the time I simply called them ‚Äúthorns‚Äù. The visual imagery here is such that the points at the bottom of the hundreds of distorted versions of the heart motif (the design of the system ensures that this is always present in the pieces, but it isn‚Äôt always obvious) look more like thorns extruding from the image. I posted a few pieces from this variant of the system, and in a couple of others the titles/captions had explicit references to grindr. Again, sex is present, but rape is not. In the end I decided to be a little more descriptive in the titles: the piece in blue is <strong>he doesn‚Äôt give me roses</strong>, and the paired red piece is <strong>he gives me thorns</strong>. This ‚Äúthorns‚Äù reference has appeared in previous artwork of mine, and like the other cases it references sadomasochism. More specifically it refers to <a href="https://archive.org/details/screwrosessendme0000mill">Screw the Roses, Send me the Thorns</a>.</p>
<p>I have been involved with a few sadistic men, and ‚Äì in all honesty ‚Äì it has led to some incredibly satisfying sex. Sadism/masochism in kink is a very different proposition to the kind of sexual violence I‚Äôve experienced with men in other contexts. In almost every case, the men I‚Äôve subbed for in impact play have been extremely careful around consent and safety. Though my relationships with them didn‚Äôt usually end well, I think fondly of them, and feel very protective towards them. The dominant in impact play is quite vulnerable, in the sense that it would be very easy for the submissive to make false accusations and have those accusations appear to be supported by evidence. There is a bond of trust involved, one I would never and will never betray. And so for me, the emotional connotation to these thorns pieces is gentle and loving, despite the superficial harshness. As strange as it seems, this is a brief happy moment in the series.</p>
<p>It doesn‚Äôt last. The world is on fire, and that inevitably affects the artist:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_45_4558.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>and so she returns to her art because everything is burning</strong> (version 45, seed 4558)</figcaption>
</figure>
</div>
</section>
<section id="vi.-terror" class="level2">
<h2 class="anchored" data-anchor-id="vi.-terror">VI. Terror</h2>
<p>To the surprise of exactly no-one, the series does not end happily. Too many traumatic memories have intruded into the work, too many terrible things have happened in the world outside my home, and my mood is dark most of the time. It is simply the way things are in 2025.</p>
<p>The next piece I shared seems nice when you look at it, and it‚Äôs one of the few pieces in the series where the heart motif feels like a solid object, though the interior seems to be ripped or torn here:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_48_4860.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>she should have learned by now to keep her fucking mouth shut and her opinions to herself</strong> (version 48, seed 4860)</figcaption>
</figure>
</div>
<p>When I shared this piece, the caption for it was <strong>she should have learned by now to keep her fucking mouth shut and her opinions to herself</strong>. Given this as a title, the red shade doesn‚Äôt feel very loving to me. It feels more like blood, with an implied threat of violence attached. The caption has a striking similarity to my pinned post on mastodon, which reads</p>
<blockquote class="blockquote">
<p>I regret saying anything. I should keep my fucking thoughts to myself.</p>
</blockquote>
<p>This is a sentiment I feel a lot on social media. I‚Äôll often share something raw and/or vulnerable, capturing a strongly felt emotion I have about the state of the world, and I will almost always end up deleting it out of fear. This terror is only slightly correlated with the reactions that I receive from other people when I post. It is something deeper: I fear violent punishment for the things that I say and the things that I feel. The origin of that fear is not social media. It is simply that for most of my life my emotions have been punishable offences. I was a sissy. I was weak. I was <em>feminine</em>. These are crimes in the misogynistic canon that governed the kind of masculinity I was exposed to growing up. Sissy boys get beatings. It is how the world works, and that fear is deeply ingrained in me now. No matter where I go, no matter what I do, in every context, I fear violent punishment for my thoughts and feelings.</p>
<p>The only way to mitigate the risk of violence, especially post-transition, is to be a good girl. It is understood of course that trans women can never <em>truly</em> be good girls. We are whores canonically, but in fairness men rarely need an excuse to be violent to women. Transness is a convenient cover, but all women are at risk. Our best hope of escaping violence is to be <strong>demure</strong>, but we all know it only works sometimes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_48_4855.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>demure</strong> (version 48, seed 4855)</figcaption>
</figure>
</div>
<p>So now we come to one of the nastiest pieces I shared on social media:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_49_4910.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>bruises mark his hands at her throat‚Ä¶</strong> (version 49, seed 4910)</figcaption>
</figure>
</div>
<p>The art itself is completely at odds with the title. The piece is soft and pastel, almost cloyingly so, and I deliberately called it <strong>bruises mark his hands at her throat‚Ä¶</strong></p>
<p>This one is autobiographical too. It doesn‚Äôt refer to a specific event though. One of the most utterly terrifying thing about men, in my experience, is that they love choking women during sex. They don‚Äôt ask consent. I don‚Äôt know how to express how utterly terrifying this is. Every time it happens I freeze. In the kink world, one thing everyone knows is that breath play is high-risk. You‚Äôre far, far more likely to end up in the hospital from strangulation than from whipping. It‚Äôs something that is never done without a lot of care, because it‚Äôs inherently risky. Outside that world‚Ä¶ my god, men are cavalier about this. Few things in life make me as frightened as the thought of a man‚Äôs hands wrapping around my throat, and when I think back about my experiences it is horrifying to realise how many times this has happened without my consent.</p>
<p>What is even more horrifying, is that my experiences aren‚Äôt unusual. Something I learned after transitioning is that this happens to a lot of women. Men just do this, and they think nothing of it, as if strangulation is something that usually happens in sex. It is astonishing to me that this happens. So why did I choose to pair this title with this piece? Honestly, the answer is entirely for shock value. The jarring sensation of looking at the soft gentle piece and then being unexpectedly slammed by the cruelty of the title is, well, it‚Äôs a very very small proxy for what it feels like when a man unexpectedly grabs you by the throat.</p>
<p>Sigh. Moving along‚Ä¶</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_50_5093.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>good night princess, sweet dreams, lie still, don‚Äôt resist</strong> (version 50, seed 5093)</figcaption>
</figure>
</div>
<p>I like this piece. It‚Äôs genuinely gentle. It feels like I‚Äôm looking at stars twinkling in the night, with gorgeous little sparks rising from below. I can‚Äôt stop myself from thinking that the secondary contour around the heart motif represents the moon. Naturally, because my mood was so bleak, I used the title to twist the interpretation of the piece and make it sinister: <strong>good night princess, sweet dreams, lie still, don‚Äôt resist</strong>. The implication of sexual violence is only barely concealed, and now the night time scenery in the piece feels dangerous to me. The framing around the heart now feels like crosshairs. It feels like I am being <a href="https://www.youtube.com/watch?v=OUGjaBgR6SQ">hunted</a>.</p>
<p>That feeling intensifies in the next piece, <strong>he says he‚Äôll be gentle</strong>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_51_5142.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>he says he‚Äôll be gentle</strong> (version 51, seed 5142)</figcaption>
</figure>
</div>
<p>I think this might be my favourite piece in the series. It is the first one where the vines/tentacles truly emerge. The machinery that produces them had been latent in the previous variant: the sparks in the <strong>good night princess</strong> are produced by the same mechanism that creates tentacles in <strong>he says he‚Äôll be gentle</strong>, which to my mind makes both pieces a lot more sinister than they might otherwise appear. I hadn‚Äôt even included this mechanism intentionally: it‚Äôs a byproduct of the changes I made to produce the ‚Äúmoon‚Äù in the earlier piece.</p>
<p>But in any case, this piece feels to me like I am seeing deep red tentacles rising up from the depths to strangle the heart. Paired with title, it is of course intended as a representation of sexual violence, or at least the threat thereof, and when given that interpretation the red shade feels less like lipstick and more like blood. It is visually striking, but it is not at all nice.</p>
<p>Which brings me to one of the strangest pieces in the whole series, <strong>side effects include numbness and disorientation</strong>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_51_5108.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>side effects include numbness and disorientation</strong> (version 51, seed 5108)</figcaption>
</figure>
</div>
<p>This is one of those pieces where the system completely surprised me. The triangular shapes are another manifestation of the same mechanism that usually produces those tentacles. The expression is entirely different here: it only occasionally comes out like this. Similarly, the palette is a little unusual. The desaturated and faded look isn‚Äôt very common in the hearts pieces: this one is an exception to the usual rule. The piece feels distant, detached. The title echoes that feeling. Unfortunately, the event it references is one in which ‚Äì as far as I can tell ‚Äì a man appears to have drugged and raped me. I don‚Äôt really know though, because I don‚Äôt remember very much of the experience. He bought me a drink, I blacked out, and when my memory returned I was naked in his bed with his dick in my mouth. To say that it was a frightening moment to regain conscious recollection is something of an understatement.</p>
<p>My therapist had some stern words for me about it about proper safety behaviour around men, and how this does <em>not</em> include letting them buy you drinks. In hindsight, I have to admit she had a point. In brutal honesty, my risk-taking behaviour around men is shockingly dangerous. There‚Äôs a reason that these things have happened to me so often: I put <em>myself</em> in situations where they are likely to happen. I expose myself to risks when it comes to men, and the thing about taking risks is that sometimes you don‚Äôt win.</p>
<p>Case in point. The story of how I met a man who later stalked and raped me is neatly captured by the title of the next piece <strong>the bar is crowded but it‚Äôs mardi gras, so no-one but her will mind if he slides his hand under her skirt and grabs her by the</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_52_5207.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>the bar is crowded but it‚Äôs mardi gras, so no-one but her will mind if he slides his hand under her skirt and grabs her by the</strong> (version 52, seed 5207)</figcaption>
</figure>
</div>
<p>The piece is‚Ä¶ actually it‚Äôs amazing. The pale gold and black palette is gorgeous, the vines and tentacles are foreboding but not as actively hostile as in some of these pieces. It‚Äôs another one I adore on a purely visual level, but paired with that title the tentacles feel threatening, much like a man who unexpectedly slides his hand under your skirt and grabs you by the‚Ä¶</p>
<p>‚Ä¶well, that‚Äôs a dangerous sentence for a trans woman to complete, no? Let‚Äôs not.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-menacing-hearts/image/languid_52_5237.jpg" class="img-fluid figure-img"></p>
<figcaption><strong>she tries to leave</strong> (version 52, seed 5237)</figcaption>
</figure>
</div>
<p>The series ends with an ambiguous piece, one that ‚Äì thankfully ‚Äì is not autobiographical. Everyone knows the most dangerous moment in an abusive relationship is when the victim tries to leave. That‚Äôs when he‚Äôs most likely to kill her. The series ends with <strong>she tries to leave</strong>, and I don‚Äôt know what happens to her next. I hope she makes it.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {Making Menacing Hearts},
  date = {2025-04-17},
  url = {https://blog.djnavarro.net/posts/2025-04-17_making-menacing-hearts/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúMaking Menacing Hearts.‚Äù</span> April
17, 2025. <a href="https://blog.djnavarro.net/posts/2025-04-17_making-menacing-hearts/">https://blog.djnavarro.net/posts/2025-04-17_making-menacing-hearts/</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2025-04-17_making-menacing-hearts/</guid>
  <pubDate>Wed, 16 Apr 2025 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-04-17_making-menacing-hearts/languid_13_2214.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Three short stories about targets</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-01-08_using-targets/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>About 18 months ago I wrote a post about <a href="../../posts/2023-06-30_makefiles/">balrogs and makefiles</a>. The post was long, strange, but also cathartic. It had bothered me for years that I didn‚Äôt really understand <a href="https://www.gnu.org/software/make/">make</a> as well as I wanted to, and it was really helpful to write up some notes about it as a way of teaching myself how to use it more effectively than I had done in the past.<sup>1</sup> Buried at the very end of the post is an almost-apologetic reference to the <a href="https://docs.ropensci.org/targets/">targets</a> R package by Will Landau, which provides a similar toolkit designed to work cleanly for R users.</p>
<p>Even then I knew that I was going to need to learn how to use targets, but somehow I never quite got around to it‚Ä¶ life gets in the way, I suppose. I have been preoccupied by other tasks, sadly, and it has taken me until now to (a) sit down and read through the <a href="https://books.ropensci.org/targets/">targets user manual</a>, and (b) come up with some fun side projects that would give me the opportunity to try it out.</p>
<p>Thankfully, I recently managed to set some time aside to teach myself how to use the package, using three toy projects that I bundled together into a <a href="https://github.com/djnavarro/tartoys">small github repository</a>. Realising that I would inevitably forget what I‚Äôve learned if I didn‚Äôt write up some notes on the projects, I decided to write them up as a blog post.</p>
<p>So, here goes. This is a tale of three targets‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(targets)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(legendry)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyselect)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(fs)</span></code></pre></div>
</div>
<p><br><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/img/chuttersnap-_EFvjSgbw1c-unsplash.jpg" class="img-fluid figure-img"></p>
<figcaption>Pipelines, of course</figcaption>
</figure>
</div>
<p><br></p>
<section id="story-1-an-analysis-pipeline" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="story-1-an-analysis-pipeline">Story 1: An analysis pipeline</h2>
<p>The first pipeline I built using targets was based the fun <a href="https://github.com/rfordatascience/tidytuesday/tree/main/data/2024/2024-12-17">Tidy Tuesday</a> visualisations that I described in my <a href="../../posts/2025-01-01_schools-of-magic/">last post</a>. In that post, I talked about two images I made using a data set about Dungeons &amp; Dragons spells. When I wrote that post, I didn‚Äôt talk about targets at all, and none of the code presented in that blog post is written in a ‚Äútargets-friendly‚Äù way. However, although that form of the code was the simplest way to write it up, it‚Äôs not how I originally wrote it. It was originally written as a targets pipeline.</p>
<p>As it happens, I have a slightly-modified copy of the project in the <code>spells</code> directory within this blog post, so that I can play with the project within this post. Yay! But this in turn brings us to the first point to make about targets: it‚Äôs a <em>project-oriented</em> tool, in the sense that each project corresponds to a single folder (and its sub-folders), and not surprisingly it‚Äôs easiest to use from within the project. To make my life easier I‚Äôll sometimes change that directory so that when I‚Äôm discussing a specific targets project, the code will execute from the root directory of that project. At the R console we would use <code>setwd()</code> to do so, but that‚Äôs not the best approach within a knitr-based tool (quarto, rmarkdown, etc), and you will get warning messages if you try to do it that way. The preferred method for changing directories with an R markdown or quarto document is to set the <code>root.dir</code> knitr option. Because I‚Äôll be doing that several times in this post, I‚Äôll write a little convenience function to take care of this whenever I need to switch to a new project:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">set_knitr_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">post =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-01-08_using-targets"</span>) {</span>
<span id="cb2-2">  knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_knit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">root.dir =</span> here<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts"</span>, post, dir))</span>
<span id="cb2-3">}</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_knitr_dir</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spells"</span>)</span></code></pre></div>
</div>
<p>Next, let‚Äôs take a look at the structure of this project. At the moment this is a clean project (i.e., no code has been run yet), so it contains only the source files. There are only three:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.
‚îú‚îÄ‚îÄ _targets.R
‚îú‚îÄ‚îÄ analysis.R
‚îî‚îÄ‚îÄ spells.csv</code></pre>
</div>
</div>
<p>Here‚Äôs what each file does:</p>
<ul>
<li>The <code>spells.csv</code> file is the data set I wish to analyse</li>
<li>The <code>analysis.R</code> script defines a collection of functions which, when called, will perform the required analyses and generate the outputs</li>
<li>The <code>_targets.R</code> script is (unsurprisingly) the build script</li>
</ul>
<p>In a moment I‚Äôll talk about the <code>_targets.R</code> script, but first I‚Äôll quickly describe what the analysis itself does.</p>
<section id="what-does-the-analysis-do" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="what-does-the-analysis-do">What does the analysis do?</h3>
<p>If you read the <a href="../../posts/2025-01-01_schools-of-magic/">schools of magic</a> post that I wrote earlier this year, you‚Äôve already seen the code underpinning the analysis. The only difference between the version in the previous post and the version I‚Äôve used here is that the <code>analysis.R</code> script wraps each step of the analysis into a function. This is pretty crucial to constructing a targets pipeline, actually, and the targets user manual has a whole section discussing <a href="https://books.ropensci.org/targets/functions.html">function-oriented workflow</a>.</p>
<blockquote class="blockquote">
<p>Functions are the building blocks of most computer code. They make code easier to think about, and they break down complicated ideas into small manageable pieces. Out of context, you can develop and test a function in isolation without mentally juggling the rest of the project. In the context of the whole workflow, functions are convenient shorthand to make your work easier to read.</p>
</blockquote>
<p>One thing that continually surprises me about analysis scripts that I encounter in the wild is that <em>analysts don‚Äôt write functions enough</em>. It‚Äôs easily the most common trap I see people falling into, to be honest, and it leads to some very dangerous and hard-to-isolate bugs because the dependencies between different parts of the code become hard to see as the script gets longer. So I am a big fan of the design feature in targets that pushes the user to break a big analysis into a smaller number of functions that perform specific tasks. For example, once the <code>spells</code> data set has been loaded, the pipeline that constructs the ‚Äúspell dice‚Äù plot is encapsulated by two key functions:</p>
<ul>
<li><code>dice_data()</code> takes the spells data as input, and performs all the data wrangling steps required to construct a tidied version of the data that is suitable for visualisation</li>
<li><code>dice_plot()</code> takes the tidied dice data as input, specifies the ‚Äúspell dice‚Äù plot, and writes it to an output file</li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/spells-cache/dice_pic.png" class="img-fluid figure-img"></p>
<figcaption>dice_pic.png</figcaption>
</figure>
</div>
</div></div><p>The ‚Äúschools of magic‚Äù plot is slightly more elaborate, and uses three functions:</p>
<ul>
<li><code>scholastic_data()</code> takes the spells data as input, and performs the data wrangling steps required to create tidy data suitable for constructing the heatmap</li>
<li><code>scholastic_clusters()</code> takes this tidy data as input, and the performs additional steps required to construct the hierarchical clustering used to draw dendrograms alongside the heatmap</li>
<li><code>scholastic_plot()</code> takes the data set and the clustering as input, and uses them to build the ‚Äúschools of magic‚Äù plot that is written to an output file</li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/spells-cache/scholastic_pic.png" class="img-fluid figure-img"></p>
<figcaption>scholastic_pic.png</figcaption>
</figure>
</div>
</div></div><p>The actual code for these functions isn‚Äôt very important for the purposes of understanding the targets pipelinem, and in any case I‚Äôve described the plots in detail before. But for what it‚Äôs worth, the exact code is included below the fold here:</p>
<div class="cell">
<div class="code-with-filename">
<details class="code-fold">
<summary>Click to show/hide the analysis.R code</summary>
<div class="code-with-filename-file">
<pre><strong>analysis.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># spell dice plot ---------------------------------------------------------</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">dice_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(spells) {</span>
<span id="cb5-4">  dice_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> spells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, level, description) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_txt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(description, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span>),</span>
<span id="cb5-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_txt =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(dice_txt, unique)</span>
<span id="cb5-9">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_longer</span>(</span>
<span id="cb5-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dice_txt"</span>,</span>
<span id="cb5-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dice_txt"</span>,</span>
<span id="cb5-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">indices_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"position"</span></span>
<span id="cb5-14">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_num =</span> dice_txt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+(?=d)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(),</span>
<span id="cb5-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_die =</span> dice_txt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(?&lt;=d)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(),</span>
<span id="cb5-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_val =</span> dice_num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (dice_die <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb5-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_txt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(dice_txt) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(dice_val)</span>
<span id="cb5-20">    )</span>
<span id="cb5-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(dice_dat)</span>
<span id="cb5-22">}</span>
<span id="cb5-23"></span>
<span id="cb5-24">dice_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dice_dat) {</span>
<span id="cb5-25">  </span>
<span id="cb5-26">  palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hcl.colors</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PuOr"</span>)</span>
<span id="cb5-27">  </span>
<span id="cb5-28">  labs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dice_dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb5-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_txt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span>(dice_txt),</span>
<span id="cb5-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb5-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> dice_txt</span>
<span id="cb5-33">    )</span>
<span id="cb5-34">  </span>
<span id="cb5-35">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb5-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dice_dat,</span>
<span id="cb5-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb5-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> dice_txt,</span>
<span id="cb5-39">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(level)</span>
<span id="cb5-40">    )</span>
<span id="cb5-41">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_label_repel</span>(</span>
<span id="cb5-44">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> labs,</span>
<span id="cb5-45">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb5-46">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> dice_txt,</span>
<span id="cb5-47">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> count,</span>
<span id="cb5-48">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> dice_txt</span>
<span id="cb5-49">      ),</span>
<span id="cb5-50">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb5-51">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">direction =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb5-52">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-53">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nudge_y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb5-54">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>,</span>
<span id="cb5-55">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>,</span>
<span id="cb5-56">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb5-57">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb5-58">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-59">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_manual</span>(</span>
<span id="cb5-60">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spell level"</span>,</span>
<span id="cb5-61">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> palette</span>
<span id="cb5-62">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-63">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_discrete</span>(</span>
<span id="cb5-64">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Increasing average outcome \u27a1"</span>,</span>
<span id="cb5-65">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb5-66">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>)</span>
<span id="cb5-67">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-68">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-69">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dice rolls described in D&amp;D spell descriptions"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-70">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-71">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb5-72">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>),</span>
<span id="cb5-73">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb5-74">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb5-75">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb5-76">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.margin =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>),</span>
<span id="cb5-77">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inside"</span>,</span>
<span id="cb5-78">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position.inside =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">825</span>),</span>
<span id="cb5-79">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.direction =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"horizontal"</span>,</span>
<span id="cb5-80">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.title.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>,</span>
<span id="cb5-81">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-82">    )</span>
<span id="cb5-83">  </span>
<span id="cb5-84">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(</span>
<span id="cb5-85">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dice_pic.png"</span>,</span>
<span id="cb5-86">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> pic,</span>
<span id="cb5-87">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb5-88">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb5-89">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"px"</span>,</span>
<span id="cb5-90">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span></span>
<span id="cb5-91">  )</span>
<span id="cb5-92">  </span>
<span id="cb5-93">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dice_pic.png"</span>)</span>
<span id="cb5-94">}</span>
<span id="cb5-95"></span>
<span id="cb5-96"></span>
<span id="cb5-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># schools of magic plot ---------------------------------------------------</span></span>
<span id="cb5-98"></span>
<span id="cb5-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constructs the data frame used by geom_tile() later</span></span>
<span id="cb5-100">scholastic_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(spells) {</span>
<span id="cb5-101">  spells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-102">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, school, bard<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>wizard) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-103">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb5-104">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> bard<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>wizard,</span>
<span id="cb5-105">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>,</span>
<span id="cb5-106">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"castable"</span></span>
<span id="cb5-107">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-108">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb5-109">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(castable),</span>
<span id="cb5-110">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"school"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>)</span>
<span id="cb5-111">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-112">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-113">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">school =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_to_title</span>(school),</span>
<span id="cb5-114">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_to_title</span>(class)</span>
<span id="cb5-115">    )</span>
<span id="cb5-116">}</span>
<span id="cb5-117"></span>
<span id="cb5-118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hierarchical clustering for the schools and classes</span></span>
<span id="cb5-119">scholastic_clusters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat) {</span>
<span id="cb5-120">  </span>
<span id="cb5-121">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matrix of counts for each school/class combination</span></span>
<span id="cb5-122">  mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-123">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(</span>
<span id="cb5-124">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"school"</span>,</span>
<span id="cb5-125">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span></span>
<span id="cb5-126">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-127">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>()</span>
<span id="cb5-128">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(mat) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class</span>
<span id="cb5-129">  mat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb5-130">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(mat)</span>
<span id="cb5-131">  </span>
<span id="cb5-132">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each school is a distribution over classes,</span></span>
<span id="cb5-133">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each class is a distribution over schools</span></span>
<span id="cb5-134">  class_distribution  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(mat), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(mat))</span>
<span id="cb5-135">  school_distribution <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(mat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mat), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(mat)))</span>
<span id="cb5-136">  </span>
<span id="cb5-137">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pairwise distances</span></span>
<span id="cb5-138">  class_dissimilarity  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dist</span>(class_distribution)</span>
<span id="cb5-139">  school_dissimilarity <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dist</span>(school_distribution)</span>
<span id="cb5-140">  </span>
<span id="cb5-141">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hierarchical clustering</span></span>
<span id="cb5-142">  clusters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-143">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hclust</span>(class_dissimilarity, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"average"</span>),</span>
<span id="cb5-144">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">school =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hclust</span>(school_dissimilarity, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"average"</span>)</span>
<span id="cb5-145">  )</span>
<span id="cb5-146">  </span>
<span id="cb5-147">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(clusters)</span>
<span id="cb5-148">}</span>
<span id="cb5-149"></span>
<span id="cb5-150">scholastic_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, clusters) {</span>
<span id="cb5-151">  </span>
<span id="cb5-152">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(school, class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> count)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-153">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_tile</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-154">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_dendro</span>(</span>
<span id="cb5-155">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clust =</span> clusters<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>school,</span>
<span id="cb5-156">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guide =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_axis_dendro</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.dodge =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb5-157">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb5-158">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span></span>
<span id="cb5-159">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-160">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_dendro</span>(</span>
<span id="cb5-161">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clust =</span> clusters<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class,</span>
<span id="cb5-162">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-163">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-164">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_distiller</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RdPu"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-165">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb5-166">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Schools of Magic"</span>,</span>
<span id="cb5-167">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Classes of Character"</span>,</span>
<span id="cb5-168">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Learnable Spells"</span></span>
<span id="cb5-169">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-170">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-171">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb5-172">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>),</span>
<span id="cb5-173">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.margin =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>),</span>
<span id="cb5-174">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb5-175">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb5-176">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb5-177">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb5-178">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>,</span>
<span id="cb5-179">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>)</span>
<span id="cb5-180">    )</span>
<span id="cb5-181">  </span>
<span id="cb5-182">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(</span>
<span id="cb5-183">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scholastic_pic.png"</span>,</span>
<span id="cb5-184">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> pic,</span>
<span id="cb5-185">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb5-186">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb5-187">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"px"</span>,</span>
<span id="cb5-188">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span></span>
<span id="cb5-189">  )</span>
<span id="cb5-190">  </span>
<span id="cb5-191">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scholastic_pic.png"</span>)</span>
<span id="cb5-192">}</span></code></pre></div>
</details>
</div>
</div>
</section>
<section id="defining-the-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="defining-the-pipeline">Defining the pipeline</h3>
<p>Now that you‚Äôve read the verbal description of what each function does, it‚Äôs intuitively pretty clear how the analysis pipeline is supposed to work. Roughly speaking, you‚Äôd expect the analysis to be executed using a script like this:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>run_analysis.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load packages</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(forcats)</span>
<span id="cb6-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggrepel)</span>
<span id="cb6-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(legendry)</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read analysis script</span></span>
<span id="cb6-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analysis.R"</span>)</span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup</span></span>
<span id="cb6-16">input  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spells.csv"</span></span>
<span id="cb6-17">spells <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(input, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make the spell dice plot &amp; write to output</span></span>
<span id="cb6-20">dice_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dice_data</span>(spells)</span>
<span id="cb6-21">dice_pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dice_plot</span>(dice_dat)</span>
<span id="cb6-22"></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make the schools of magic plot &amp; write to output</span></span>
<span id="cb6-24">scholastic_dat  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scholastic_data</span>(spells)</span>
<span id="cb6-25">scholastic_clus <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scholastic_clusters</span>(scholastic_dat)</span>
<span id="cb6-26">scholastic_pic  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scholastic_plot</span>(scholastic_dat, scholastic_clus)</span></code></pre></div>
</div>
</div>
<p>So, how does it work with targets? Well, if we take a look at the <code>_targets.R</code> script, we can see it looks suspiciously similar to the code above:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_targets.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(targets)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify required packages</span></span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_option_set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">packages =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb7-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tibble"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"readr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>, </span>
<span id="cb7-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"forcats"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggrepel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"legendry"</span></span>
<span id="cb7-7">))</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read analysis script</span></span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analysis.R"</span>)</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb7-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup</span></span>
<span id="cb7-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(input, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spells.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span>),</span>
<span id="cb7-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(spells, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(input, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)),</span>
<span id="cb7-16">  </span>
<span id="cb7-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dice plot</span></span>
<span id="cb7-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(dice_dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dice_data</span>(spells)),</span>
<span id="cb7-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(dice_pic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dice_plot</span>(dice_dat)),</span>
<span id="cb7-20">  </span>
<span id="cb7-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scholastic plot</span></span>
<span id="cb7-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(scholastic_dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scholastic_data</span>(spells)),</span>
<span id="cb7-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(scholastic_clus, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scholastic_clusters</span>(scholastic_dat)),</span>
<span id="cb7-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb7-25">    scholastic_pic,</span>
<span id="cb7-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scholastic_plot</span>(scholastic_dat, scholastic_clus)</span>
<span id="cb7-27">  )</span>
<span id="cb7-28">)</span></code></pre></div>
</div>
</div>
<p>In this pipeline, the set up involves two steps:</p>
<ul>
<li>I‚Äôve used <a href="https://docs.ropensci.org/targets/reference/tar_option_set.html"><code>tar_option_set()</code></a> to declare the required R packages, thereby making those packages available to the pipeline</li>
<li>I‚Äôve used <a href="https://docs.ropensci.org/targets/reference/tar_source.html"><code>tar_source()</code></a> to read the analysis script, thereby making the functions in that file accessible to the pipeline</li>
</ul>
<p>Having taken care of the preliminaries, the pipeline is specified via a list of targets, each of which is defined by a call to <a href="https://docs.ropensci.org/targets/reference/tar_target.html"><code>tar_target()</code></a>. Each target has a <code>name</code>, and is associated with a <code>command</code> that is to be executed. If I‚Äôd named the arguments on line 18 in my <code>_targets.R</code> script, the code would look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> dice_dat, </span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dice_data</span>(spells)</span>
<span id="cb8-4">)</span></code></pre></div>
</div>
<p>Notice the similarity to line 20 of the <code>run_analysis.R</code> script:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">dice_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dice_data</span>(spells)</span></code></pre></div>
</div>
<p>In essence, that‚Äôs what I‚Äôm doing with the call to <code>tar_target()</code>. I‚Äôm specifying that the command <code>dice_data(spells)</code> is to be executed, and the results should be stored as the variable <code>dice_dat</code>. However, instead of immediately executing this code in the current R environment, what <code>tar_target()</code> does is create the infrastructure so that this command can be incorporated into the pipeline when it actually gets built. With one exception, this is the recipe I followed for constructing all the targets in my <code>_targets.R</code> script.</p>
<p>The one exception to this pattern occurs on line 14 of <code>_targets.R</code>, where my target is defined by this call to <code>tar_target()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> input, </span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spells.csv"</span>, </span>
<span id="cb10-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span></span>
<span id="cb10-5">)</span></code></pre></div>
</div>
<p>In one sense, this target is pretty much the same as the others: it defines a variable called <code>input</code> using the ‚Äúcommand‚Äù <code>"spells.csv"</code>, and so in that respect it‚Äôs much the same as line 16 of the <code>run_analysis.R</code> script. However, notice that I‚Äôve also specified that <code>format = "file"</code>. This tells targets that <code>"spells.csv"</code> isn‚Äôt <em>just</em> a string, it‚Äôs also the name of a file that needs to be tracked. By declaring it as a file target, I‚Äôm ensuring that if the <code>spells.csv</code> file gets altered in some way, this target and any target that depends on it will need to be rebuilt.</p>
<p>The <a href="https://docs.ropensci.org/targets/reference/tar_visnetwork.html"><code>tar_visnetwork()</code></a> function provides a handy way of visualising the structure of a pipeline as a little HTML widget. To keep things as simple as possible, at least for the moment, I‚Äôll set <code>targets_only = TRUE</code> so that the graph ignores the functions defined in <code>analysis.R</code>, and only focuses on the targets themselves:<sup>2</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_visnetwork</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">targets_only =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="visNetwork html-widget html-fill-item" id="htmlwidget-06484ed42468d86de4a4" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-06484ed42468d86de4a4">{"x":{"nodes":{"name":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells"],"type":["stem","stem","stem","stem","stem","stem","stem"],"description":[null,null,null,null,null,null,null],"status":["outdated","outdated","outdated","outdated","outdated","outdated","outdated"],"seconds":[null,null,null,null,null,null,null],"bytes":[null,null,null,null,null,null,null],"branches":[null,null,null,null,null,null,null],"label":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells"],"color":["#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5"],"id":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells"],"level":[3,4,1,4,3,5,2],"shape":["dot","dot","dot","dot","dot","dot","dot"]},"edges":{"from":["scholastic_dat","spells","input","scholastic_clus","scholastic_dat","dice_dat","spells"],"to":["scholastic_clus","scholastic_dat","spells","scholastic_pic","scholastic_pic","dice_pic","dice_dat"],"arrows":["to","to","to","to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","physics":false},"manipulation":{"enabled":false},"edges":{"smooth":{"type":"cubicBezier","forceDirection":"horizontal"}},"physics":{"stabilization":false},"interaction":{"zoomSpeed":1},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":null,"width":null,"height":null,"idselection":{"enabled":false,"style":"width: 150px; height: 26px","useLabels":true,"main":"Select by id"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"","style":"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;"},"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":{"from":1,"to":1},"algorithm":"hierarchical","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":true,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"},"legend":{"width":0.2,"useGroups":false,"position":"right","ncol":1,"stepX":100,"stepY":100,"zoom":true,"nodes":{"label":["Outdated","Stem"],"color":["#78B7C5","#899DA4"],"shape":["dot","dot"]},"nodesToDataframe":true},"tooltipStay":300,"tooltipStyle":"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>All these targets are shown in blue, indicating that they are ‚Äúoutdated‚Äù. That‚Äôs to be expected at this point, of course: I haven‚Äôt actually run anything yet! I‚Äôll get to that momentarily, but before I do I‚Äôll call <a href="https://docs.ropensci.org/targets/reference/tar_outdated.html"><code>tar_outdated()</code></a> to confirm the obvious:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_outdated</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "scholastic_clus" "scholastic_dat"  "spells"          "scholastic_pic" 
[5] "dice_pic"        "input"           "dice_dat"       </code></pre>
</div>
</div>
<p>These are the targets that need to be (re)run.</p>
</section>
<section id="running-the-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="running-the-pipeline">Running the pipeline</h3>
<p>Okay, it is now time to run the pipeline. We can do this by calling <a href="https://docs.ropensci.org/targets/reference/tar_make.html"><code>tar_make()</code></a>. Here‚Äôs what happens when we do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚ñ∂ dispatched target input
‚óè completed target input [0.314 seconds, 302.514 kilobytes]
‚ñ∂ dispatched target spells
‚óè completed target spells [0.111 seconds, 73.966 kilobytes]
‚ñ∂ dispatched target scholastic_dat
‚óè completed target scholastic_dat [0.016 seconds, 401 bytes]
‚ñ∂ dispatched target dice_dat
‚óè completed target dice_dat [0.024 seconds, 33.486 kilobytes]
‚ñ∂ dispatched target scholastic_clus
‚óè completed target scholastic_clus [0.014 seconds, 634 bytes]
‚ñ∂ dispatched target dice_pic
‚óè completed target dice_pic [0.908 seconds, 65 bytes]
‚ñ∂ dispatched target scholastic_pic
‚óè completed target scholastic_pic [0.229 seconds, 71 bytes]
‚ñ∂ ended pipeline [1.708 seconds]</code></pre>
</div>
</div>
<p>The output here is pretty descriptive, but it‚Äôs still worth expanding on it a little. For each target, there are two lines of output that look like this:</p>
<pre><code>‚ñ∂ dispatched target TARGETNAME
‚óè completed target TARGETNAME [blah seconds, blah kilobytes]</code></pre>
<p>What these two lines mean is that, under the hood, targets ‚Äúdispatches‚Äù the task to a separate R session using the <a href="https://github.com/r-lib/callr/">callr</a> package, and the code is executed there. The target is deemed ‚Äúcompleted‚Äù once that R session finishes running the code and returns the output. This approach has two advantages over simply running the code at the console. First, it is more reproducible, because each target is run in a clean R session. Second, this design makes it waaaaaaaay easier to parallelise the execution. More on that later.</p>
<p>In any case, now that we‚Äôve finished running the pipeline, let‚Äôs take a look at the state of our ‚Äúspells‚Äù project folder:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.
‚îú‚îÄ‚îÄ _targets
‚îú‚îÄ‚îÄ _targets.R
‚îú‚îÄ‚îÄ analysis.R
‚îú‚îÄ‚îÄ dice_pic.png
‚îú‚îÄ‚îÄ scholastic_pic.png
‚îî‚îÄ‚îÄ spells.csv</code></pre>
</div>
</div>
<p>There are three new things here. First, as expected, we have two image files <code>dice_pic.png</code> and <code>scholastic_pic.png</code>. These are the outputs produced by our analysis script. Yay, it worked! There‚Äôs also a <code>_targets</code> folder: this is the place where the targets package stashes all its metadata and stores copies of the built targets. I‚Äôll talk more about the contents of this folder later, but just to give a sense of it now, here‚Äôs a sneak peek at what is stored in that folder:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_targets"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>_targets
‚îú‚îÄ‚îÄ meta
‚îÇ   ‚îú‚îÄ‚îÄ meta
‚îÇ   ‚îú‚îÄ‚îÄ process
‚îÇ   ‚îî‚îÄ‚îÄ progress
‚îú‚îÄ‚îÄ objects
‚îÇ   ‚îú‚îÄ‚îÄ dice_dat
‚îÇ   ‚îú‚îÄ‚îÄ dice_pic
‚îÇ   ‚îú‚îÄ‚îÄ scholastic_clus
‚îÇ   ‚îú‚îÄ‚îÄ scholastic_dat
‚îÇ   ‚îú‚îÄ‚îÄ scholastic_pic
‚îÇ   ‚îî‚îÄ‚îÄ spells
‚îî‚îÄ‚îÄ user</code></pre>
</div>
</div>
</section>
<section id="when-the-project-changes" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="when-the-project-changes">When the project changes</h3>
<p>Now that we‚Äôve run the pipeline, let‚Äôs take another look at the network. The structure of it hasn‚Äôt changed, but all the targets are showing as ‚Äúup to date‚Äù:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_visnetwork</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">targets_only =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="visNetwork html-widget html-fill-item" id="htmlwidget-21697d58abce2053a245" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-21697d58abce2053a245">{"x":{"nodes":{"name":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells"],"type":["stem","stem","stem","stem","stem","stem","stem"],"description":[null,null,null,null,null,null,null],"status":["uptodate","uptodate","uptodate","uptodate","uptodate","uptodate","uptodate"],"seconds":[0.024,0.908,0.314,0.014,0.016,0.229,0.111],"bytes":[33486,65,302514,634,401,71,73966],"branches":[null,null,null,null,null,null,null],"label":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells"],"color":["#354823","#354823","#354823","#354823","#354823","#354823","#354823"],"id":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells"],"level":[3,4,1,4,3,5,2],"shape":["dot","dot","dot","dot","dot","dot","dot"]},"edges":{"from":["scholastic_dat","spells","input","scholastic_clus","scholastic_dat","dice_dat","spells"],"to":["scholastic_clus","scholastic_dat","spells","scholastic_pic","scholastic_pic","dice_pic","dice_dat"],"arrows":["to","to","to","to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","physics":false},"manipulation":{"enabled":false},"edges":{"smooth":{"type":"cubicBezier","forceDirection":"horizontal"}},"physics":{"stabilization":false},"interaction":{"zoomSpeed":1},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":null,"width":null,"height":null,"idselection":{"enabled":false,"style":"width: 150px; height: 26px","useLabels":true,"main":"Select by id"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"","style":"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;"},"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":{"from":1,"to":1},"algorithm":"hierarchical","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":true,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"},"legend":{"width":0.2,"useGroups":false,"position":"right","ncol":1,"stepX":100,"stepY":100,"zoom":true,"nodes":{"label":["Up to date","Stem"],"color":["#354823","#899DA4"],"shape":["dot","dot"]},"nodesToDataframe":true},"tooltipStay":300,"tooltipStyle":"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>If I call <code>tar_make()</code> again, essentially nothing happens. All the targets are up to date, so everything is skipped:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚úî skipped target input
‚úî skipped target spells
‚úî skipped target scholastic_dat
‚úî skipped target dice_dat
‚úî skipped target scholastic_clus
‚úî skipped target dice_pic
‚úî skipped target scholastic_pic
‚úî skipped pipeline [0.069 seconds]</code></pre>
</div>
</div>
<p>Nice!</p>
<p>Actually, you know what? Now feels like a good time to show the full network, including all the functions that contribute to the pipeline‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_visnetwork</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="visNetwork html-widget html-fill-item" id="htmlwidget-4929a56e939b13f92b78" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-4929a56e939b13f92b78">{"x":{"nodes":{"name":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells","scholastic_data","scholastic_plot","dice_data","scholastic_clusters","dice_plot"],"type":["stem","stem","stem","stem","stem","stem","stem","function","function","function","function","function"],"description":[null,null,null,null,null,null,null,null,null,null,null,null],"status":["uptodate","uptodate","uptodate","uptodate","uptodate","uptodate","uptodate","uptodate","uptodate","uptodate","uptodate","uptodate"],"seconds":[0.024,0.908,0.314,0.014,0.016,0.229,0.111,null,null,null,null,null],"bytes":[33486,65,302514,634,401,71,73966,null,null,null,null,null],"branches":[null,null,null,null,null,null,null,null,null,null,null,null],"label":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells","scholastic_data","scholastic_plot","dice_data","scholastic_clusters","dice_plot"],"color":["#354823","#354823","#354823","#354823","#354823","#354823","#354823","#354823","#354823","#354823","#354823","#354823"],"id":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells","scholastic_data","scholastic_plot","dice_data","scholastic_clusters","dice_plot"],"level":[3,4,1,4,3,5,2,1,1,1,1,1],"shape":["dot","dot","dot","dot","dot","dot","dot","triangle","triangle","triangle","triangle","triangle"]},"edges":{"from":["scholastic_clusters","scholastic_dat","scholastic_data","spells","input","scholastic_clus","scholastic_dat","scholastic_plot","dice_dat","dice_plot","dice_data","spells"],"to":["scholastic_clus","scholastic_clus","scholastic_dat","scholastic_dat","spells","scholastic_pic","scholastic_pic","scholastic_pic","dice_pic","dice_pic","dice_dat","dice_dat"],"arrows":["to","to","to","to","to","to","to","to","to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","physics":false},"manipulation":{"enabled":false},"edges":{"smooth":{"type":"cubicBezier","forceDirection":"horizontal"}},"physics":{"stabilization":false},"interaction":{"zoomSpeed":1},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":null,"width":null,"height":null,"idselection":{"enabled":false,"style":"width: 150px; height: 26px","useLabels":true,"main":"Select by id"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"","style":"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;"},"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":{"from":1,"to":1},"algorithm":"hierarchical","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":true,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"},"legend":{"width":0.2,"useGroups":false,"position":"right","ncol":1,"stepX":100,"stepY":100,"zoom":true,"nodes":{"label":["Up to date","Stem","Function"],"color":["#354823","#899DA4","#899DA4"],"shape":["dot","dot","triangle"]},"nodesToDataframe":true},"tooltipStay":300,"tooltipStyle":"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Now let‚Äôs suppose that, for whatever reason, I tinker with the plotting code for the ‚Äúschools of magic‚Äù image. Perhaps I want to use a different colour scheme or something. So I go back into my code and change the code for the <code>scholastic_plot()</code> function, but <em>only</em> that function <em>&lt;edits the file behind the scenes‚Ä¶&gt;</em>. Let‚Äôs see what this does to the pipeline visualisation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_visnetwork</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="visNetwork html-widget html-fill-item" id="htmlwidget-56457827ab1876f7c579" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-56457827ab1876f7c579">{"x":{"nodes":{"name":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells","scholastic_data","scholastic_plot","dice_data","scholastic_clusters","dice_plot"],"type":["stem","stem","stem","stem","stem","stem","stem","function","function","function","function","function"],"description":[null,null,null,null,null,null,null,null,null,null,null,null],"status":["uptodate","uptodate","uptodate","uptodate","uptodate","outdated","uptodate","uptodate","outdated","uptodate","uptodate","uptodate"],"seconds":[0.024,0.908,0.314,0.014,0.016,0.229,0.111,null,null,null,null,null],"bytes":[33486,65,302514,634,401,71,73966,null,null,null,null,null],"branches":[null,null,null,null,null,null,null,null,null,null,null,null],"label":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells","scholastic_data","scholastic_plot","dice_data","scholastic_clusters","dice_plot"],"color":["#354823","#354823","#354823","#354823","#354823","#78B7C5","#354823","#354823","#78B7C5","#354823","#354823","#354823"],"id":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells","scholastic_data","scholastic_plot","dice_data","scholastic_clusters","dice_plot"],"level":[3,4,1,4,3,5,2,1,1,1,1,1],"shape":["dot","dot","dot","dot","dot","dot","dot","triangle","triangle","triangle","triangle","triangle"]},"edges":{"from":["scholastic_clusters","scholastic_dat","scholastic_data","spells","input","scholastic_clus","scholastic_dat","scholastic_plot","dice_dat","dice_plot","dice_data","spells"],"to":["scholastic_clus","scholastic_clus","scholastic_dat","scholastic_dat","spells","scholastic_pic","scholastic_pic","scholastic_pic","dice_pic","dice_pic","dice_dat","dice_dat"],"arrows":["to","to","to","to","to","to","to","to","to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","physics":false},"manipulation":{"enabled":false},"edges":{"smooth":{"type":"cubicBezier","forceDirection":"horizontal"}},"physics":{"stabilization":false},"interaction":{"zoomSpeed":1},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":null,"width":null,"height":null,"idselection":{"enabled":false,"style":"width: 150px; height: 26px","useLabels":true,"main":"Select by id"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"","style":"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;"},"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":{"from":1,"to":1},"algorithm":"hierarchical","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":true,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"},"legend":{"width":0.2,"useGroups":false,"position":"right","ncol":1,"stepX":100,"stepY":100,"zoom":true,"nodes":{"label":["Up to date","Outdated","Stem","Function"],"color":["#354823","#78B7C5","#899DA4","#899DA4"],"shape":["dot","dot","dot","triangle"]},"nodesToDataframe":true},"tooltipStay":300,"tooltipStyle":"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Not only does targets detect that the function has been altered, it also recognises that the <code>scholastic_pic</code> target (and only that target) is now outdated:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_outdated</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "scholastic_pic"</code></pre>
</div>
</div>
<p>Taking this a little further, suppose I also decide to tinker with the <code>dice_data()</code> function <em>&lt;edits the file again‚Ä¶&gt;</em>. Perhaps I‚Äôve decided that actually I would like the plot to count every <em>instance</em> of a dice roll description in each spell, not merely the unique instances as the previous version did. Let‚Äôs see what our network visualisation looks like now:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_visnetwork</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="visNetwork html-widget html-fill-item" id="htmlwidget-26b22985179f0d812c91" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-26b22985179f0d812c91">{"x":{"nodes":{"name":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells","scholastic_data","scholastic_plot","dice_data","scholastic_clusters","dice_plot"],"type":["stem","stem","stem","stem","stem","stem","stem","function","function","function","function","function"],"description":[null,null,null,null,null,null,null,null,null,null,null,null],"status":["outdated","outdated","uptodate","uptodate","uptodate","outdated","uptodate","uptodate","outdated","outdated","uptodate","uptodate"],"seconds":[0.024,0.908,0.314,0.014,0.016,0.229,0.111,null,null,null,null,null],"bytes":[33486,65,302514,634,401,71,73966,null,null,null,null,null],"branches":[null,null,null,null,null,null,null,null,null,null,null,null],"label":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells","scholastic_data","scholastic_plot","dice_data","scholastic_clusters","dice_plot"],"color":["#78B7C5","#78B7C5","#354823","#354823","#354823","#78B7C5","#354823","#354823","#78B7C5","#78B7C5","#354823","#354823"],"id":["dice_dat","dice_pic","input","scholastic_clus","scholastic_dat","scholastic_pic","spells","scholastic_data","scholastic_plot","dice_data","scholastic_clusters","dice_plot"],"level":[3,4,1,4,3,5,2,1,1,1,1,1],"shape":["dot","dot","dot","dot","dot","dot","dot","triangle","triangle","triangle","triangle","triangle"]},"edges":{"from":["scholastic_clusters","scholastic_dat","scholastic_data","spells","input","scholastic_clus","scholastic_dat","scholastic_plot","dice_dat","dice_plot","dice_data","spells"],"to":["scholastic_clus","scholastic_clus","scholastic_dat","scholastic_dat","spells","scholastic_pic","scholastic_pic","scholastic_pic","dice_pic","dice_pic","dice_dat","dice_dat"],"arrows":["to","to","to","to","to","to","to","to","to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","physics":false},"manipulation":{"enabled":false},"edges":{"smooth":{"type":"cubicBezier","forceDirection":"horizontal"}},"physics":{"stabilization":false},"interaction":{"zoomSpeed":1},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":null,"width":null,"height":null,"idselection":{"enabled":false,"style":"width: 150px; height: 26px","useLabels":true,"main":"Select by id"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"","style":"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;"},"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":{"from":1,"to":1},"algorithm":"hierarchical","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":true,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"},"legend":{"width":0.2,"useGroups":false,"position":"right","ncol":1,"stepX":100,"stepY":100,"zoom":true,"nodes":{"label":["Outdated","Up to date","Stem","Function"],"color":["#78B7C5","#354823","#899DA4","#899DA4"],"shape":["dot","dot","dot","triangle"]},"nodesToDataframe":true},"tooltipStay":300,"tooltipStyle":"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>That makes sense too: the <code>dice_data()</code> function affects the <code>dice_dat</code> target, but that also has implications for the <code>dice_pic</code> target because it depends on <code>dice_dat</code>. So now our list of outdated targets looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_outdated</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "scholastic_pic" "dice_pic"       "dice_dat"      </code></pre>
</div>
</div>
<p>When we re-run the pipeline this time, those three targets (and only those three targets) are rebuilt. The others are skipped:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚úî skipped target input
‚úî skipped target spells
‚úî skipped target scholastic_dat
‚ñ∂ dispatched target dice_dat
‚óè completed target dice_dat [0.03 seconds, 35.004 kilobytes]
‚úî skipped target scholastic_clus
‚ñ∂ dispatched target dice_pic
‚óè completed target dice_pic [0.989 seconds, 65 bytes]
‚ñ∂ dispatched target scholastic_pic
‚óè completed target scholastic_pic [0.219 seconds, 71 bytes]
‚ñ∂ ended pipeline [1.584 seconds]</code></pre>
</div>
</div>
<p>This, as you might imagine, is extremely useful in situations where you have a project that involves hundreds of analyses and figures that take a really long time to execute if you re-run everything from the beginning‚Ä¶ but all you actually want to do is change the fontsize on figure 312.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/spells-cache/dice_pic_2.png" class="img-fluid figure-img"></p>
<figcaption>dice_pic_2.png</figcaption>
</figure>
</div>
</div><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/spells-cache/scholastic_pic_2.png" class="img-fluid figure-img"></p>
<figcaption>scholastic_pic_2.png</figcaption>
</figure>
</div>
</div></div>
</section>
<section id="epilogue" class="level3">
<h3 class="anchored" data-anchor-id="epilogue">Epilogue</h3>
<p>For a first attempt at using targets, I‚Äôm not unhappy with this. It did what I needed it to do, and I was able to understand the basic structure of the package.</p>
<p>But there are some limitations. One thing that really bothers me is the way I handled the ggplot code. My thinking at the time was based on the thinking that real life analysis pipelines often have some <em>very</em> slow ggplot2 code, but the slow part is not the construction of the object itself, but rather the build, render, and draw stages. It‚Äôs not much of an issue in this specific example because everything is runs fast, but you can see why I had this worry by looking at what <code>benchplot()</code> has to say about the plots I created here:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_load</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(scholastic_dat, scholastic_clus))</span>
<span id="cb33-2"></span>
<span id="cb33-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">benchplot</span>(</span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(scholastic_dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(school, class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> count)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_tile</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_dendro</span>(</span>
<span id="cb33-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clust =</span> scholastic_clus<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>school,</span>
<span id="cb33-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guide =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_axis_dendro</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.dodge =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb33-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb33-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span></span>
<span id="cb33-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_dendro</span>(</span>
<span id="cb33-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clust =</span> scholastic_clus<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class,</span>
<span id="cb33-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb33-15">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span>
<span id="cb33-17">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/index_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>       step user.self sys.self elapsed
1 construct     0.018    0.001   0.018
2     build     0.037    0.000   0.038
3    render     0.047    0.002   0.046
4      draw     0.028    0.000   0.028
5     TOTAL     0.130    0.003   0.130</code></pre>
</div>
</div>
<p>Even in this example, where there isn‚Äôt very much that needs to be drawn to the graphics device, constructing the plot isn‚Äôt the step that takes the most time. So it makes very little sense to treat the plot specification (i.e., the <code>gg</code> plot object) as the terminal target of a plotting pipeline, because 90% of the compute time takes place <em>after</em> the <code>gg</code> object is specified (this is even more obvious when you have a scatterplot that needs to draw millions of dots to the canvas).</p>
<p>Having been burned by this in the past, I made the decision that my plotting target would encapsulate <em>all</em> stages in the plot rendering process. Only once the image has been written to a file would my plot target be deemed complete. As far as it goes, this is very sensible reasoning, but in retrospect I think it might have made a lot more sense to split the plotting target into stages. Saving the <code>gg</code> object as an intermediate target (and possibly other stages of the plot construction too) might have been sensible. It might seem like I‚Äôm being weirdly nitpicky, but my motivation here is very practical: I have a couple of projects where rerunning the analysis very time-consuming, and the biggest bottleneck (by far) is rendering and drawing some very unpleasant <code>gg</code> objects. I‚Äôve been using a variety of tricks to work around this issue, none of which have been satisfying.<sup>3</sup> Targets offers a much cleaner solution to my problem, but it‚Äôs clear to me just from this toy exercise that I will need to be careful about how I set up targets for these analysis pipelines.</p>
<p>Still, it seems very clear to me that the problem can be solved with targets. My toy example is a kind of worst case solution‚Ä¶ if all else fails, I can define the output image itself as the the target to be built. From that perspective, mission accomplished babes.</p>
<p><br><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/img/joanna-kosinska-B6yDtYs2IgY-unsplash.jpg" class="img-fluid figure-img"></p>
<figcaption>An even more lightweight blog</figcaption>
</figure>
</div>
<p><br></p>
</section>
</section>
<section id="story-2-building-a-blog" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="story-2-building-a-blog">Story 2: Building a blog</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_knitr_dir</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"liteblog"</span>)</span></code></pre></div>
</div>
<p>Okay, so the first project went better than I‚Äôd hoped. Shall we try something different then? This time around I decided I‚Äôd be a little more ambitious, and attempted to write a lightweight blogging tool using <a href="https://yihui.org/litedown/">litedown</a> as a drop-in replacement for R markdown or quarto, and using targets to manage the build process for the site as a whole. I had two reasons for picking this as my second attempt. First, personal preference: I seem to have developed a habit for rolling my own half-arsed blogging tools. A very long time ago I wrote a bad blogging package called <a href="https://caladown.djnavarro.net/">caladown</a> that I would not recommend anyone use ever, and about a about a year ago I repeated the foolishness over my summer break when I got bored and built a very silly <a href="https://knitr-11ty.djnavarro.net/">blog based on knitr and eleventy</a>, for literally no reason. Neither exercise was particularly useful, but both were fun.</p>
<p>The second reason for choosing this project is a little more serious. Unlike a simple analysis pipeline, there are a lot of details about the blog you don‚Äôt know in advance. You don‚Äôt know what the files will be called, you don‚Äôt know how many of them there will be, and so on. On top of that, even if you are able to write a target for ‚Äúbuild a blog post‚Äù, you will need to build dozens or hundreds of tiny variations of the same target. There is <em>no way in hell</em> anyone wants to hand-code a targets pipeline for this situation: instead, we‚Äôll need a mechanism for defining and building targets on the fly, rather than trying to specify all the targets in advance.</p>
<p>In other words, we‚Äôll need to think about <a href="https://books.ropensci.org/targets/dynamic.html">dynamic branching</a>.<sup>4</sup></p>
<section id="designing-the-blog" class="level3">
<h3 class="anchored" data-anchor-id="designing-the-blog">Designing the blog</h3>
<p>Just like last time, before we talk about the targets pipeline, it‚Äôs helpful to understand the rest of the project. After a bit of thought, I decided that a ‚Äúliteblog‚Äù project would have a structure that looks something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.
‚îú‚îÄ‚îÄ _liteblog-footer.html
‚îú‚îÄ‚îÄ _liteblog-header.html
‚îú‚îÄ‚îÄ _liteblog.R
‚îú‚îÄ‚îÄ _liteblog.css
‚îú‚îÄ‚îÄ _targets.R
‚îî‚îÄ‚îÄ source
    ‚îú‚îÄ‚îÄ 404.rmd
    ‚îú‚îÄ‚îÄ _001_hello-cruel-world.rmd
    ‚îú‚îÄ‚îÄ _002_blog-object.rmd
    ‚îî‚îÄ‚îÄ index.rmd</code></pre>
</div>
</div>
<p>This is what a clean project looks like <em>before</em> the blog has been built. Inside the <code>source</code> folder there are four R markdown documents, corresponding to the four HTML documents that will be created when the site is built. Specifically:<sup>5</sup></p>
<ul>
<li><code>index.rmd</code> becomes the blog homepage <code>index.html</code></li>
<li><code>404.rmd</code> becomes the 404 page <code>404.html</code></li>
<li><code>_001_hello-cruel-world.rmd</code> becomes <code>/001/hello-cruel-world/index.html</code></li>
<li><code>_002_blog-object.rmd</code> becomes <code>/002/blog-object/index.html</code></li>
</ul>
<p>The other files are used to define blog structure, style, and build process:</p>
<ul>
<li><code>_liteblog-header.html</code> provides HTML for the blog navbar</li>
<li><code>_liteblog-footer.html</code> provides HTML for the blog footer</li>
<li><code>_liteblog.css</code> provides the visual styling</li>
<li><code>_liteblog.R</code> supplies an <a href="https://r6.r-lib.org/">R6</a> class called <code>Liteblog</code> used to configure the blog</li>
<li><code>_targets.R</code> defines the build process</li>
</ul>
<p>The header, footer, and css files aren‚Äôt very important for our purposes, and neither is the content of the R markdown files. All the heavy lifting is done by <code>_liteblog.R</code> and <code>_targets.R</code>. I‚Äôll talk about each of these in turn.</p>
</section>
<section id="the-liteblog-class" class="level3">
<h3 class="anchored" data-anchor-id="the-liteblog-class">The Liteblog class</h3>
<p>For reasons that I have already forgotten, I made a decision to implement the blogging tool as an R6 class. This blog post isn‚Äôt the place to talk about how R6 works, but conveniently <a href="https://adv-r.hadley.nz/r6.html">Hadley already did this better than I could</a> so now I don‚Äôt have to. Even more conveniently, it doesn‚Äôt matter too much for this post if you don‚Äôt already know R6. But for those who do, here‚Äôs the code:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_liteblog.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb38-1">Liteblog <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R6<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb38-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Liteblog"</span>,</span>
<span id="cb38-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb38-4">    </span>
<span id="cb38-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initialize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">root =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>,</span>
<span id="cb38-6">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>,</span>
<span id="cb38-7">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"site"</span>,</span>
<span id="cb38-8">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb38-9">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>root <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> root</span>
<span id="cb38-10">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>source <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> source</span>
<span id="cb38-11">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> output</span>
<span id="cb38-12">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> url</span>
<span id="cb38-13">    },</span>
<span id="cb38-14">    </span>
<span id="cb38-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">root =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb38-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb38-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb38-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb38-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[.][rR]?md$"</span>,</span>
<span id="cb38-20">    </span>
<span id="cb38-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">find_posts =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb38-22">      files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(</span>
<span id="cb38-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>root, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>source),</span>
<span id="cb38-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb38-25">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">regexp =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pattern,</span>
<span id="cb38-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span></span>
<span id="cb38-27">      )</span>
<span id="cb38-28">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(files))</span>
<span id="cb38-29">    },</span>
<span id="cb38-30">    </span>
<span id="cb38-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">find_static =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb38-32">      files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(</span>
<span id="cb38-33">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>root, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>source),</span>
<span id="cb38-34">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb38-35">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">regexp =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pattern,</span>
<span id="cb38-36">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">invert =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb38-37">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb38-38">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span></span>
<span id="cb38-39">      )</span>
<span id="cb38-40">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(files))</span>
<span id="cb38-41">    },</span>
<span id="cb38-42">    </span>
<span id="cb38-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fuse_post =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(file, ...) {</span>
<span id="cb38-44">      output_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> litedown<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fuse</span>(file)</span>
<span id="cb38-45">      output_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_file</span>(output_path)</span>
<span id="cb38-46">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(output_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^_"</span>)) {</span>
<span id="cb38-47">        destination <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> output_file <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-48">          stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-49">          stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.html$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/index.html"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-50">          stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>output, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>))</span>
<span id="cb38-51">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb38-52">        destination <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>output, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, output_file)</span>
<span id="cb38-53">      }</span>
<span id="cb38-54">      destination <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>root, destination)</span>
<span id="cb38-55">      fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_dir</span>(destination))</span>
<span id="cb38-56">      fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_move</span>(output_path, destination)</span>
<span id="cb38-57">    },</span>
<span id="cb38-58">    </span>
<span id="cb38-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">copy_static =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(file) {</span>
<span id="cb38-60">      destination <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> file <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-61">        stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(</span>
<span id="cb38-62">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>source, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>),</span>
<span id="cb38-63">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>output, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb38-64">        )</span>
<span id="cb38-65">      fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_dir</span>(destination))</span>
<span id="cb38-66">      fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_copy</span>(</span>
<span id="cb38-67">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> file,</span>
<span id="cb38-68">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_path =</span> destination,</span>
<span id="cb38-69">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb38-70">      )</span>
<span id="cb38-71">    }</span>
<span id="cb38-72">  )</span>
<span id="cb38-73">)</span></code></pre></div>
</div>
</div>
<p>It‚Äôs‚Ä¶ honestly not that great.<sup>6</sup> It is fit for purpose, so to speak, but if I were ever intending to use this in real life I‚Äôd want to give it a lot more love than I have to date. Nevertheless, just to give you a sense of how it works, I‚Äôll create a new blog object by calling <code>Liteblog$new()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">blog <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Liteblog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb39-2">blog</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Liteblog&gt;
  Public:
    clone: function (deep = FALSE) 
    copy_static: function (file) 
    find_posts: function () 
    find_static: function () 
    fuse_post: function (file, ...) 
    initialize: function (root = ".", source = "source", output = "site", url = NULL) 
    output: site
    pattern: [.][rR]?md$
    root: .
    source: source
    url: NULL</code></pre>
</div>
</div>
<p>Ignoring the boring parts of this output, you can see that this <code>blog</code> object has four methods that will get used when the site gets built by our targets pipeline:</p>
<ul>
<li><code>$find_posts()</code> detects R markdown documents in the source folder</li>
<li><code>$find_static()</code> detects other files in the source folder</li>
<li><code>$fuse_post()</code> converts an R markdown file to HTML in the output folder</li>
<li><code>$copy_static()</code> copies a file to the output folder</li>
</ul>
<p>There‚Äôs not much to be gained by diving very deep into these functions, but as an example, here‚Äôs what you would do to discover all the R markdown posts in this project:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">blog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_posts</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "./source/404.rmd"                   
[2] "./source/_001_hello-cruel-world.rmd"
[3] "./source/_002_blog-object.rmd"      
[4] "./source/index.rmd"                 </code></pre>
</div>
</div>
<p>This provides the core blogging toolkit that I‚Äôll now use when writing my target pipeline. It‚Äôs <em>extremely</em> bare bones, and not very customisable, but of course my intention here isn‚Äôt to build a proper blogging platform. It‚Äôs just a toy that I can play with when building a more complex build pipeline. Speaking of which‚Ä¶</p>
</section>
<section id="the-build-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="the-build-pipeline">The build pipeline</h3>
<p>The <code>_targets.R</code> file for this project is a little more complicated than the one I used for the D&amp;D spells plots, and will take a bit of effort to unpack all of it. Let‚Äôs start by looking at the file as a whole:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_targets.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(targets)</span>
<span id="cb43-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_liteblog.R"</span>)</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb43-5">  </span>
<span id="cb43-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define blog configuration</span></span>
<span id="cb43-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb43-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> blog,</span>
<span id="cb43-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> Liteblog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(</span>
<span id="cb43-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">root =</span> rprojroot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_root</span>(</span>
<span id="cb43-11">        rprojroot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_liteblog.R"</span>)</span>
<span id="cb43-12">      ),</span>
<span id="cb43-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>,</span>
<span id="cb43-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"site"</span>,</span>
<span id="cb43-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"liteblog.djnavarro.net"</span></span>
<span id="cb43-16">    )</span>
<span id="cb43-17">  ),</span>
<span id="cb43-18">  </span>
<span id="cb43-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># track configuration files</span></span>
<span id="cb43-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb43-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> blog_rds, </span>
<span id="cb43-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(blog, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_liteblog.rds"</span>), </span>
<span id="cb43-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span></span>
<span id="cb43-24">  ),</span>
<span id="cb43-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(blog_css, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_liteblog.css"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span>),</span>
<span id="cb43-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(blog_hdr, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_liteblog-header.html"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span>),</span>
<span id="cb43-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(blog_ftr, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_liteblog-footer.html"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span>),</span>
<span id="cb43-28">  </span>
<span id="cb43-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># detect file paths (always run)</span></span>
<span id="cb43-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb43-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> post_paths, </span>
<span id="cb43-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> blog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_posts</span>(), </span>
<span id="cb43-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cue =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_cue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"always"</span>)</span>
<span id="cb43-34">  ),</span>
<span id="cb43-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb43-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> static_paths, </span>
<span id="cb43-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> blog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_static</span>(), </span>
<span id="cb43-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cue =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_cue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"always"</span>)</span>
<span id="cb43-39">  ),</span>
<span id="cb43-40">  </span>
<span id="cb43-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify file targets</span></span>
<span id="cb43-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb43-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> post_files, </span>
<span id="cb43-44">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> post_paths, </span>
<span id="cb43-45">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(post_paths), </span>
<span id="cb43-46">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span></span>
<span id="cb43-47">  ),</span>
<span id="cb43-48">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb43-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> static_files, </span>
<span id="cb43-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> static_paths, </span>
<span id="cb43-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(static_paths), </span>
<span id="cb43-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span></span>
<span id="cb43-53">  ),</span>
<span id="cb43-54">  </span>
<span id="cb43-55">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fuse targets depend on blog configuration files</span></span>
<span id="cb43-56">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copy targets don't need dependencies</span></span>
<span id="cb43-57">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb43-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> post_fuse,</span>
<span id="cb43-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> blog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fuse_post</span>(</span>
<span id="cb43-60">      post_files,</span>
<span id="cb43-61">      blog_css,</span>
<span id="cb43-62">      blog_hdr,</span>
<span id="cb43-63">      blog_ftr</span>
<span id="cb43-64">    ),</span>
<span id="cb43-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(post_files)</span>
<span id="cb43-66">  ),</span>
<span id="cb43-67">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb43-68">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> static_copy, </span>
<span id="cb43-69">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> blog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">copy_static</span>(static_files), </span>
<span id="cb43-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(static_files)</span>
<span id="cb43-71">  )</span>
<span id="cb43-72">)</span></code></pre></div>
</div>
</div>
<p>Okay, yes, there‚Äôs a lot to unpack here as the young people<sup>7</sup> say. Not only is the code considerably longer than it was last time, I‚Äôm also making use of several targets features that weren‚Äôt present last time. Rather than try to explain it all at once, I‚Äôll start by calling <code>tar_visnetwork()</code> again, focusing only on the targets that form the core of my build pipeline:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_visnetwork</span>(</span>
<span id="cb44-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">allow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any_of</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb44-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"static_paths"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"post_paths"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"post_files"</span>, </span>
<span id="cb44-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"static_files"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"post_fuse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"static_copy"</span></span>
<span id="cb44-5">  ))</span>
<span id="cb44-6">)</span></code></pre></div>
<div class="cell-output-display">
<div class="visNetwork html-widget html-fill-item" id="htmlwidget-15cde5c072f26745d6fe" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-15cde5c072f26745d6fe">{"x":{"nodes":{"name":["post_files","post_fuse","post_paths","static_copy","static_files","static_paths"],"type":["pattern","pattern","stem","pattern","pattern","stem"],"description":[null,null,null,null,null,null],"status":["outdated","outdated","outdated","outdated","outdated","outdated"],"seconds":[null,null,null,null,null,null],"bytes":[null,null,null,null,null,null],"branches":[null,null,null,null,null,null],"label":["post_files","post_fuse","post_paths","static_copy","static_files","static_paths"],"color":["#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5"],"id":["post_files","post_fuse","post_paths","static_copy","static_files","static_paths"],"level":[2,3,1,3,2,1],"shape":["square","square","dot","square","square","dot"]},"edges":{"from":["post_files","static_paths","post_paths","static_files"],"to":["post_fuse","static_files","post_files","static_copy"],"arrows":["to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","physics":false},"manipulation":{"enabled":false},"edges":{"smooth":{"type":"cubicBezier","forceDirection":"horizontal"}},"physics":{"stabilization":false},"interaction":{"zoomSpeed":1},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":null,"width":null,"height":null,"idselection":{"enabled":false,"style":"width: 150px; height: 26px","useLabels":true,"main":"Select by id"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"","style":"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;"},"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":{"from":1,"to":1},"algorithm":"hierarchical","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":true,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"},"legend":{"width":0.2,"useGroups":false,"position":"right","ncol":1,"stepX":100,"stepY":100,"zoom":true,"nodes":{"label":["Outdated","Pattern","Stem"],"color":["#78B7C5","#899DA4","#899DA4"],"shape":["dot","square","dot"]},"nodesToDataframe":true},"tooltipStay":300,"tooltipStyle":"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Let‚Äôs look at the top path first. It comprises the following steps:</p>
<ol type="1">
<li>Find the R markdown documents using <code>blog$find_posts()</code>. This creates a single build target, a character vector <code>post_paths</code>.</li>
<li>Declare that <em>every</em> R markdown document should be a tracked file. This is the role of the <code>post_files</code> target, but it‚Äôs a target comprised of several <em>branches</em>, and those branches are defined using a <em>pattern</em>. More on this later.</li>
<li>For each tracked R markdown document, use <code>blog$post_fuse()</code> to build the post and move the resulting HTML file to the correct location. This is the role of <code>post_fuse</code>, and again this is a pattern target comprised of many branches.</li>
</ol>
<p>The second path in the pipeline is analogous, but simpler:</p>
<ol type="1">
<li>The <code>static_paths</code> target tracks the paths to static files</li>
<li>The <code>static_files</code> target tracks the content of the static files</li>
<li>The <code>static_copy</code> target copies the static files to the output folder</li>
</ol>
<p>These two paths form the core of the build process, but it‚Äôs not the whole story. So let‚Äôs zoom out now and take a look at the complete network:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_visnetwork</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="visNetwork html-widget html-fill-item" id="htmlwidget-eb4567664ad0e30c27d8" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-eb4567664ad0e30c27d8">{"x":{"nodes":{"name":["blog","blog_css","blog_ftr","blog_hdr","blog_rds","post_files","post_fuse","post_paths","static_copy","static_files","static_paths","Liteblog"],"type":["stem","stem","stem","stem","stem","pattern","pattern","stem","pattern","pattern","stem","object"],"description":[null,null,null,null,null,null,null,null,null,null,null,null],"status":["outdated","outdated","outdated","outdated","outdated","outdated","outdated","outdated","outdated","outdated","outdated","outdated"],"seconds":[null,null,null,null,null,null,null,null,null,null,null,null],"bytes":[null,null,null,null,null,null,null,null,null,null,null,null],"branches":[null,null,null,null,null,null,null,null,null,null,null,null],"label":["blog","blog_css","blog_ftr","blog_hdr","blog_rds","post_files","post_fuse","post_paths","static_copy","static_files","static_paths","Liteblog"],"color":["#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5"],"id":["blog","blog_css","blog_ftr","blog_hdr","blog_rds","post_files","post_fuse","post_paths","static_copy","static_files","static_paths","Liteblog"],"level":[2,1,1,1,3,4,5,3,5,4,3,1],"shape":["dot","dot","dot","dot","dot","square","square","dot","square","square","dot","triangleDown"]},"edges":{"from":["blog","blog","blog_css","blog_ftr","blog_hdr","post_files","static_paths","post_paths","blog","static_files","blog","Liteblog","blog"],"to":["static_paths","post_fuse","post_fuse","post_fuse","post_fuse","post_fuse","static_files","post_files","static_copy","static_copy","blog_rds","blog","post_paths"],"arrows":["to","to","to","to","to","to","to","to","to","to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","physics":false},"manipulation":{"enabled":false},"edges":{"smooth":{"type":"cubicBezier","forceDirection":"horizontal"}},"physics":{"stabilization":false},"interaction":{"zoomSpeed":1},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":null,"width":null,"height":null,"idselection":{"enabled":false,"style":"width: 150px; height: 26px","useLabels":true,"main":"Select by id"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"","style":"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;"},"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":{"from":1,"to":1},"algorithm":"hierarchical","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":true,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"},"legend":{"width":0.2,"useGroups":false,"position":"right","ncol":1,"stepX":100,"stepY":100,"zoom":true,"nodes":{"label":["Outdated","Stem","Pattern","Object"],"color":["#78B7C5","#899DA4","#899DA4","#899DA4"],"shape":["dot","dot","square","triangleDown"]},"nodesToDataframe":true},"tooltipStay":300,"tooltipStyle":"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>In this version, you can see that most of the build pipeline depends on the <code>blog</code> object: that makes sense because this is the R6 object that defines methods like <code>$find_posts()</code> and <code>$fuse_post()</code>, and it‚Äôs these functions that are called when the blog is built. Similarly, since <code>blog</code> is itself an instance of the <code>Liteblog</code> class, the class itself is an upstream dependency of <code>blog</code>.</p>
<p>The other four targets are less interesting. Three of them (<code>blog_css</code>, <code>blog_hdr</code>, and <code>blog_ftr</code>) are used to keep track of the style files (i.e.&nbsp;<code>_liteblog.css</code>, <code>_liteblog-header.html</code>, and <code>_liteblog-footer.html</code>), so that if any of those files are modified the it will trigger a rebuild of any target that uses those files. The fourth one, <code>blog_rds</code>, is a bit of an odd one and I‚Äôm not sure I like it: this target saves the <code>blog</code> object to an rds file. The reason for this is that it makes this object easier to access from <em>within</em> an R markdown post, by loading the file. This in turn makes it easier to construct the post listing on the home page. But I keep thinking there must be a better way to do this. Eh, whatever, it‚Äôs not a serious project.</p>
</section>
<section id="building-the-blog" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="building-the-blog">Building the blog</h3>
<p>At this point, you probably (hopefully!) have a general sense of what the build process looks like for this blog. I haven‚Äôt explained all the details yet, but I hope the gist is clear already. So let‚Äôs ignore those tiresome details for a little longer and call <code>tar_make()</code> to build the blog. The output is long, but there‚Äôs not much in there that we didn‚Äôt already see earlier with the D&amp;D spells project:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚ñ∂ dispatched target blog
‚óè completed target blog [0.003 seconds, 9.905 kilobytes]
‚ñ∂ dispatched target blog_css
‚óè completed target blog_css [0 seconds, 3.759 kilobytes]
‚ñ∂ dispatched target blog_ftr
‚óè completed target blog_ftr [0 seconds, 115 bytes]
‚ñ∂ dispatched target blog_hdr
‚óè completed target blog_hdr [0 seconds, 271 bytes]
‚ñ∂ dispatched target static_paths
‚óè completed target static_paths [0.032 seconds, 140 bytes]
‚ñ∂ dispatched target post_paths
‚óè completed target post_paths [0 seconds, 186 bytes]
‚ñ∂ dispatched target blog_rds
‚óè completed target blog_rds [0.003 seconds, 0 bytes]
‚ñ∂ dispatched branch static_files_1725c3c24144eb91
‚óè completed branch static_files_1725c3c24144eb91 [0.001 seconds, 0 bytes]
‚óè completed pattern static_files 
‚ñ∂ dispatched branch post_files_9bbb5ae3d1d3f95b
‚óè completed branch post_files_9bbb5ae3d1d3f95b [0 seconds, 320 bytes]
‚ñ∂ dispatched branch post_files_0a8225f176a1d698
‚óè completed branch post_files_0a8225f176a1d698 [0 seconds, 4.667 kilobytes]
‚ñ∂ dispatched branch post_files_2ed928ff2eafb31e
‚óè completed branch post_files_2ed928ff2eafb31e [0 seconds, 2.451 kilobytes]
‚ñ∂ dispatched branch post_files_b12b144c84b5b3a0
‚óè completed branch post_files_b12b144c84b5b3a0 [0 seconds, 1.777 kilobytes]
‚óè completed pattern post_files 
‚ñ∂ dispatched branch static_copy_dfa803e4dbdaa48f
‚óè completed branch static_copy_dfa803e4dbdaa48f [0.023 seconds, 173 bytes]
‚óè completed pattern static_copy 
‚ñ∂ dispatched branch post_fuse_c2dd6a62cc9d9565
‚óè completed branch post_fuse_c2dd6a62cc9d9565 [0.62 seconds, 171 bytes]
‚ñ∂ dispatched branch post_fuse_bb77d7e34f5b9d8d
‚óè completed branch post_fuse_bb77d7e34f5b9d8d [0.654 seconds, 187 bytes]
‚ñ∂ dispatched branch post_fuse_bb123c5d7a5d991e
‚óè completed branch post_fuse_bb123c5d7a5d991e [0.092 seconds, 182 bytes]
‚ñ∂ dispatched branch post_fuse_b2591b053d5431f7
‚óè completed branch post_fuse_b2591b053d5431f7 [0.044 seconds, 173 bytes]
‚óè completed pattern post_fuse 
‚ñ∂ ended pipeline [1.663 seconds]</code></pre>
</div>
</div>
<p>Setting aside obvious questions like ‚Äúwhat‚Äôs going on with all those weirdly named ‚Äòbranch‚Äô targets like <code>post_files_bfe2f528519c0ff0</code>???‚Äù, the gist of this is pretty clear: everything has run smoothly and the blog has been built. In fact, you can see a live version of the blog, built from the source as it exists up to this point: it‚Äôs <a href="./site-1/index.html">here</a>). The project folder now looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_tree</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.
‚îú‚îÄ‚îÄ _liteblog-footer.html
‚îú‚îÄ‚îÄ _liteblog-header.html
‚îú‚îÄ‚îÄ _liteblog.R
‚îú‚îÄ‚îÄ _liteblog.css
‚îú‚îÄ‚îÄ _liteblog.rds
‚îú‚îÄ‚îÄ _targets
‚îÇ   ‚îú‚îÄ‚îÄ meta
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ meta
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ process
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ progress
‚îÇ   ‚îú‚îÄ‚îÄ objects
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ blog
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ post_fuse_b2591b053d5431f7
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ post_fuse_bb123c5d7a5d991e
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ post_fuse_bb77d7e34f5b9d8d
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ post_fuse_c2dd6a62cc9d9565
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ post_paths
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ static_copy_dfa803e4dbdaa48f
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ static_paths
‚îÇ   ‚îî‚îÄ‚îÄ user
‚îú‚îÄ‚îÄ _targets.R
‚îú‚îÄ‚îÄ site
‚îÇ   ‚îú‚îÄ‚îÄ 001
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ hello-cruel-world
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ index.html
‚îÇ   ‚îú‚îÄ‚îÄ 002
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ blog-object
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ index.html
‚îÇ   ‚îú‚îÄ‚îÄ 404.html
‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îî‚îÄ‚îÄ source
    ‚îú‚îÄ‚îÄ 404.rmd
    ‚îú‚îÄ‚îÄ _001_hello-cruel-world.rmd
    ‚îú‚îÄ‚îÄ _002_blog-object.rmd
    ‚îî‚îÄ‚îÄ index.rmd</code></pre>
</div>
</div>
<p>The key thing to notice here is that two new folders have been created: <code>_targets</code> stores metadata and tracked objects for the pipeline, and <code>site</code> contains the built website. Yay! It works!</p>
<p>So now let‚Äôs start digging into the details‚Ä¶</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./site-1/index.html"><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/img/liteblog-home.png" class="img-fluid figure-img" alt="the blog homepage"></a></p>
<figcaption>the blog homepage</figcaption>
</figure>
</div>
</div></div></section>
<section id="always-run-targets" class="level3">
<h3 class="anchored" data-anchor-id="always-run-targets">Always-run targets</h3>
<p>One of the problems I ran into pretty early in this project was how to monitor the source directory properly. It‚Äôs easy enough to scan a directory to find the files that live there: the <code>$find_posts()</code> and <code>$find_static()</code> methods for <code>Liteblog</code> objects do exactly this. But consider a target like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(post_paths, blog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_posts</span>())</span></code></pre></div>
</div>
<p>This target stores a list of all R markdown posts, but it has only one dependency: the <code>blog</code> object itself. It is not dependent on the state of the source folder. It can‚Äôt be: a folder in the file system isn‚Äôt an R object. So, if the state of the folder changes (e.g., a new blog post is added), targets would have no way to know that the <code>post_paths</code> target needs to be updated.</p>
<p>A simple solution is to declare that the <code>post_paths</code> target must always be run whenever <code>tar_make()</code> is called. We can do this by using <a href="https://docs.ropensci.org/targets/reference/tar_cue.html"><code>tar_cue()</code></a>, and that‚Äôs why the actual target is defined like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb51-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> post_paths, </span>
<span id="cb51-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> blog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_posts</span>(), </span>
<span id="cb51-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cue =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_cue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"always"</span>)</span>
<span id="cb51-5">)</span></code></pre></div>
</div>
<p>A similar approach is taken when defining the <code>static_paths</code> target. These two targets are always executed at build time. What this means, in practice, is that even though I have just run <code>tar_make()</code> and haven‚Äôt changed any of the files since then, the network visualisation appears like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_visnetwork</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="visNetwork html-widget html-fill-item" id="htmlwidget-af58166d53661c8cfb95" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-af58166d53661c8cfb95">{"x":{"nodes":{"name":["blog","blog_css","blog_ftr","blog_hdr","blog_rds","post_files","post_fuse","post_paths","static_copy","static_files","static_paths","Liteblog"],"type":["stem","stem","stem","stem","stem","pattern","pattern","stem","pattern","pattern","stem","object"],"description":[null,null,null,null,null,null,null,null,null,null,null,null],"status":["uptodate","uptodate","uptodate","uptodate","uptodate","outdated","outdated","outdated","outdated","outdated","outdated","uptodate"],"seconds":[0.003,0,0,0,0.003,0,1.41,0,0.023,0.001,0.032,null],"bytes":[9905,3759,115,271,0,9215,713,186,173,0,140,null],"branches":[null,null,null,null,null,4,4,null,1,1,null,null],"label":["blog","blog_css","blog_ftr","blog_hdr","blog_rds","post_files","post_fuse","post_paths","static_copy","static_files","static_paths","Liteblog"],"color":["#354823","#354823","#354823","#354823","#354823","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#354823"],"id":["blog","blog_css","blog_ftr","blog_hdr","blog_rds","post_files","post_fuse","post_paths","static_copy","static_files","static_paths","Liteblog"],"level":[2,1,1,1,3,4,5,3,5,4,3,1],"shape":["dot","dot","dot","dot","dot","square","square","dot","square","square","dot","triangleDown"]},"edges":{"from":["blog","blog","blog_css","blog_ftr","blog_hdr","post_files","static_paths","post_paths","blog","static_files","blog","Liteblog","blog"],"to":["static_paths","post_fuse","post_fuse","post_fuse","post_fuse","post_fuse","static_files","post_files","static_copy","static_copy","blog_rds","blog","post_paths"],"arrows":["to","to","to","to","to","to","to","to","to","to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","physics":false},"manipulation":{"enabled":false},"edges":{"smooth":{"type":"cubicBezier","forceDirection":"horizontal"}},"physics":{"stabilization":false},"interaction":{"zoomSpeed":1},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":null,"width":null,"height":null,"idselection":{"enabled":false,"style":"width: 150px; height: 26px","useLabels":true,"main":"Select by id"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"","style":"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;"},"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":{"from":1,"to":1},"algorithm":"hierarchical","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":true,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"},"legend":{"width":0.2,"useGroups":false,"position":"right","ncol":1,"stepX":100,"stepY":100,"zoom":true,"nodes":{"label":["Up to date","Outdated","Stem","Pattern","Object"],"color":["#354823","#78B7C5","#899DA4","#899DA4","#899DA4"],"shape":["dot","dot","dot","square","triangleDown"]},"nodesToDataframe":true},"tooltipStay":300,"tooltipStyle":"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>As expected, <code>static_paths</code> and <code>post_paths</code> both show up as outdated targets, and so does everything downstream of those two. Again, this makes sense: until those two targets are re-run, the targets package has no way to know if the downstream targets will also need to be rebuilt. Consequently, calling <code>tar_outdated()</code> gives us this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_outdated</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "static_paths" "post_fuse"    "static_files" "post_files"  
[5] "static_copy"  "post_paths"  </code></pre>
</div>
</div>
<p>However, the fact that the downstream targets are flagged as outdated doesn‚Äôt mean these targets will need to be executed again. To see this, let‚Äôs call <code>tar_make()</code> again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚úî skipped target blog
‚úî skipped target blog_css
‚úî skipped target blog_ftr
‚úî skipped target blog_hdr
‚ñ∂ dispatched target static_paths
‚óè completed target static_paths [0.032 seconds, 140 bytes]
‚ñ∂ dispatched target post_paths
‚óè completed target post_paths [0 seconds, 186 bytes]
‚úî skipped target blog_rds
‚úî skipped branch static_files_1725c3c24144eb91
‚úî skipped pattern static_files
‚úî skipped branch post_files_9bbb5ae3d1d3f95b
‚úî skipped branch post_files_0a8225f176a1d698
‚úî skipped branch post_files_2ed928ff2eafb31e
‚úî skipped branch post_files_b12b144c84b5b3a0
‚úî skipped pattern post_files
‚úî skipped branch static_copy_dfa803e4dbdaa48f
‚úî skipped pattern static_copy
‚úî skipped branch post_fuse_c2dd6a62cc9d9565
‚úî skipped branch post_fuse_bb77d7e34f5b9d8d
‚úî skipped branch post_fuse_bb123c5d7a5d991e
‚úî skipped branch post_fuse_b2591b053d5431f7
‚úî skipped pattern post_fuse
‚ñ∂ ended pipeline [0.114 seconds]</code></pre>
</div>
</div>
<p>As expected, the <code>static_paths</code> and <code>post_paths</code> targets are both re-run, as instructed by <code>tar_cue("always")</code>. However, once those targets are completed, the targets package is smart enough to detect that nothing has actually changed. The <code>static_paths</code> and <code>post_paths</code> objects are exactly the same as they were previously, so there is no need to execute any of the downstream targets. In other words, at build time the blog will always check to see if the content in the source folder has changed, but if nothing has changed the fuse and copy targets are skipped.</p>
</section>
<section id="dynamic-branching" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="dynamic-branching">Dynamic branching</h3>
<p>The second design feature that caused me some grief was how to write a <code>_targets.R</code> file that would build every R markdown post in the source folder, even though I wouldn‚Äôt know in advance how many of those documents exist or what they would be called. As described in the last section, one part of the solution was to define the <code>post_paths</code> target, which would always be executed at build time, and would store the names of all the R markdown documents. I‚Äôll use <a href="https://docs.ropensci.org/targets/reference/tar_read.html"><code>tar_read()</code></a> to pull these paths from targets storage:<sup>8</sup></p>
<div class="cell column-page-right">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_read</span>(post_paths)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/home/danielle/GitHub/djnavarro/blog/posts/2025-01-08_using-targets/liteblog/source/404.rmd"                   
[2] "/home/danielle/GitHub/djnavarro/blog/posts/2025-01-08_using-targets/liteblog/source/_001_hello-cruel-world.rmd"
[3] "/home/danielle/GitHub/djnavarro/blog/posts/2025-01-08_using-targets/liteblog/source/_002_blog-object.rmd"      
[4] "/home/danielle/GitHub/djnavarro/blog/posts/2025-01-08_using-targets/liteblog/source/index.rmd"                 </code></pre>
</div>
</div>
<p>Each of these corresponds to a file that needs to be tracked, in much the same way I treated <code>spells.csv</code> as a tracked file in the D&amp;D plots project. There are multiple ways you can do this in targets, but after a few different tries I decided to use <a href="https://books.ropensci.org/targets/dynamic.html">dynamic branching</a>, a trick in which a single target is split at build time into multiple distinct branches. For the liteblog project, I defined <code>post_file</code> like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(</span>
<span id="cb59-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> post_files, </span>
<span id="cb59-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">command =</span> post_paths, </span>
<span id="cb59-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(post_paths), </span>
<span id="cb59-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span></span>
<span id="cb59-6">)</span></code></pre></div>
</div>
<p>By including the argument <code>pattern = map(post_paths)</code>, I am telling targets to create a separate branch for <code>post_files</code> for every element in the <code>post_paths</code> vector. Specifically, since I‚Äôve also set <code>format = "file"</code>, I‚Äôm instructing each of these branches to track the state of one of these files. If that file changes, the branch that tracks the file will become outdated and need to be rebuilt. To get a little more information about the branches, I can call <a href="https://docs.ropensci.org/targets/reference/tar_branches.html"><code>tar_branches()</code></a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_branches</span>(post_files)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 √ó 2
  post_files                  post_paths                 
  &lt;chr&gt;                       &lt;chr&gt;                      
1 post_files_9bbb5ae3d1d3f95b post_paths_b1b0e0a7d31afe4b
2 post_files_0a8225f176a1d698 post_paths_3444a4f5b2ff26a6
3 post_files_2ed928ff2eafb31e post_paths_b75d461c06347275
4 post_files_b12b144c84b5b3a0 post_paths_a853bb7ccac490b8</code></pre>
</div>
</div>
<p>Each branch corresponds to a single row in this table: the value of the <code>post_files</code> column records the name assigned by targets to that branch, and the value of the <code>post_paths</code> column assigns a name to the corresponding element of the <code>post_paths</code> target over which we have branched. These names aren‚Äôt particularly user-friendly, to be sure, but nevertheless my problem is solved.</p>
<p>To see how this dynamic branching plays out in practice, let‚Äôs see what happens when I modify the content of the blog in different ways.</p>
</section>
<section id="editing-an-existing-page" class="level3">
<h3 class="anchored" data-anchor-id="editing-an-existing-page">Editing an existing page</h3>
<p>Let‚Äôs modify the source for the 404 page. I‚Äôll change it so that the title of the page now reads ‚Äú404 PAGE NOT FOUND‚Äù rather than simply ‚Äú404‚Äù as it had previously. Okay‚Ä¶ <em><tweaks some="" files="" behind="" the="" scenes=""></tweaks></em>‚Ä¶ yep, done. I‚Äôve edited the file now.</p>
<p>How does this edit get picked up in the targets build process? This time around, I‚Äôll build it in stages so that the output is a little easier to read. We can do this by asking <code>tar_make()</code> to build a specific target, rather than build the entire project. First, let‚Äôs build the <code>post_files</code> target again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>(post_files)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚úî skipped target blog
‚ñ∂ dispatched target post_paths
‚óè completed target post_paths [0.033 seconds, 186 bytes]
‚ñ∂ dispatched branch post_files_9bbb5ae3d1d3f95b
‚óè completed branch post_files_9bbb5ae3d1d3f95b [0 seconds, 335 bytes]
‚úî skipped branch post_files_0a8225f176a1d698
‚úî skipped branch post_files_2ed928ff2eafb31e
‚úî skipped branch post_files_b12b144c84b5b3a0
‚óè completed pattern post_files 
‚ñ∂ ended pipeline [0.101 seconds]</code></pre>
</div>
</div>
<p>As we hoped, we see that one (and only one) of the <code>post_files</code> branches has been rebuilt, specifically the one corresponding to the <code>404.rmd</code> file that I just edited. So far so good. Next, let‚Äôs see what happens when <code>post_fuse</code> is rebuilt:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>(post_fuse)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚úî skipped target blog
‚úî skipped target blog_css
‚úî skipped target blog_ftr
‚úî skipped target blog_hdr
‚ñ∂ dispatched target post_paths
‚óè completed target post_paths [0.033 seconds, 186 bytes]
‚úî skipped branch post_files_9bbb5ae3d1d3f95b
‚úî skipped branch post_files_0a8225f176a1d698
‚úî skipped branch post_files_2ed928ff2eafb31e
‚úî skipped branch post_files_b12b144c84b5b3a0
‚úî skipped pattern post_files
‚ñ∂ dispatched branch post_fuse_c2dd6a62cc9d9565
‚óè completed branch post_fuse_c2dd6a62cc9d9565 [0.12 seconds, 171 bytes]
‚úî skipped branch post_fuse_bb77d7e34f5b9d8d
‚úî skipped branch post_fuse_bb123c5d7a5d991e
‚úî skipped branch post_fuse_b2591b053d5431f7
‚óè completed pattern post_fuse 
‚ñ∂ ended pipeline [0.242 seconds]</code></pre>
</div>
</div>
<p>Again, notice all the skipped targets. The only targets that are dispatched are <code>post_paths</code> (because we instructed that one to always run), and one branch of <code>post_fuse</code>. In other words, the only thing that happens here is that the outdated post gets rebuilt.</p>
<p>Yay!</p>
</section>
<section id="adding-new-pages" class="level3">
<h3 class="anchored" data-anchor-id="adding-new-pages">Adding new pages</h3>
<p>As the next check that the blog functionality is working as expected, let‚Äôs have a look at what happens when‚Ä¶ <em><more tinkering="" behind="" the="" scenes=""></more></em>‚Ä¶ two new blog posts are added to the <code>source</code> folder, along with a new static file:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>source
‚îú‚îÄ‚îÄ 404.rmd
‚îú‚îÄ‚îÄ _001_hello-cruel-world.rmd
‚îú‚îÄ‚îÄ _002_blog-object.rmd
‚îú‚îÄ‚îÄ _003_schools-of-magic.rmd
‚îú‚îÄ‚îÄ _004_spell-dice.rmd
‚îú‚îÄ‚îÄ data
‚îÇ   ‚îî‚îÄ‚îÄ spells.csv
‚îî‚îÄ‚îÄ index.rmd</code></pre>
</div>
</div>
<p>Again, I‚Äôll do it in stages so that the output is a little easier to read:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>(post_files)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚úî skipped target blog
‚ñ∂ dispatched target post_paths
‚óè completed target post_paths [0.037 seconds, 218 bytes]
‚úî skipped branch post_files_9bbb5ae3d1d3f95b
‚úî skipped branch post_files_0a8225f176a1d698
‚úî skipped branch post_files_2ed928ff2eafb31e
‚ñ∂ dispatched branch post_files_454f9b18b99302f6
‚óè completed branch post_files_454f9b18b99302f6 [0 seconds, 11.136 kilobytes]
‚ñ∂ dispatched branch post_files_b77b5ec03a0b7e01
‚óè completed branch post_files_b77b5ec03a0b7e01 [0.001 seconds, 3.631 kilobytes]
‚úî skipped branch post_files_b12b144c84b5b3a0
‚óè completed pattern post_files 
‚ñ∂ ended pipeline [0.117 seconds]</code></pre>
</div>
</div>
<p>The four existing R markdown files are skipped, as they are already being tracked and none of them have changed. The two new R markdown files are added, and we can see that the corresponding <code>post_files</code> branches have both been updated. We are now tracking these files.</p>
<p>Next, we build the pages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>(post_fuse)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚úî skipped target blog
‚úî skipped target blog_css
‚úî skipped target blog_ftr
‚úî skipped target blog_hdr
‚ñ∂ dispatched target post_paths
‚óè completed target post_paths [0.034 seconds, 218 bytes]
‚úî skipped branch post_files_9bbb5ae3d1d3f95b
‚úî skipped branch post_files_0a8225f176a1d698
‚úî skipped branch post_files_2ed928ff2eafb31e
‚úî skipped branch post_files_454f9b18b99302f6
‚úî skipped branch post_files_b77b5ec03a0b7e01
‚úî skipped branch post_files_b12b144c84b5b3a0
‚úî skipped pattern post_files
‚úî skipped branch post_fuse_c2dd6a62cc9d9565
‚úî skipped branch post_fuse_bb77d7e34f5b9d8d
‚úî skipped branch post_fuse_bb123c5d7a5d991e
‚ñ∂ dispatched branch post_fuse_f59600e87d9d07da
‚óè completed branch post_fuse_f59600e87d9d07da [1.1 seconds, 185 bytes]
‚ñ∂ dispatched branch post_fuse_a98becd61e7088dd
‚óè completed branch post_fuse_a98becd61e7088dd [1.015 seconds, 183 bytes]
‚úî skipped branch post_fuse_b2591b053d5431f7
‚óè completed pattern post_fuse 
‚ñ∂ ended pipeline [2.239 seconds]</code></pre>
</div>
</div>
<p>Again, works as expected. Most targets get skipped, and only the two new posts are built to HTML pages.</p>
<p>Finally, because we‚Äôve added a new static file, I‚Äôll now rebuild everything to ensure that this file gets copied over to the site correctly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚úî skipped target blog
‚úî skipped target blog_css
‚úî skipped target blog_ftr
‚úî skipped target blog_hdr
‚ñ∂ dispatched target static_paths
‚óè completed target static_paths [0.032 seconds, 159 bytes]
‚ñ∂ dispatched target post_paths
‚óè completed target post_paths [0 seconds, 218 bytes]
‚úî skipped target blog_rds
‚úî skipped branch static_files_1725c3c24144eb91
‚ñ∂ dispatched branch static_files_cfb2777954f617d0
‚óè completed branch static_files_cfb2777954f617d0 [0 seconds, 302.514 kilobytes]
‚óè completed pattern static_files 
‚úî skipped branch post_files_9bbb5ae3d1d3f95b
‚úî skipped branch post_files_0a8225f176a1d698
‚úî skipped branch post_files_2ed928ff2eafb31e
‚úî skipped branch post_files_454f9b18b99302f6
‚úî skipped branch post_files_b77b5ec03a0b7e01
‚úî skipped branch post_files_b12b144c84b5b3a0
‚úî skipped pattern post_files
‚úî skipped branch static_copy_dfa803e4dbdaa48f
‚ñ∂ dispatched branch static_copy_501faf107279df5b
‚óè completed branch static_copy_501faf107279df5b [0.015 seconds, 173 bytes]
‚óè completed pattern static_copy 
‚úî skipped branch post_fuse_c2dd6a62cc9d9565
‚úî skipped branch post_fuse_bb77d7e34f5b9d8d
‚úî skipped branch post_fuse_bb123c5d7a5d991e
‚úî skipped branch post_fuse_f59600e87d9d07da
‚úî skipped branch post_fuse_a98becd61e7088dd
‚úî skipped branch post_fuse_b2591b053d5431f7
‚úî skipped pattern post_fuse
‚ñ∂ ended pipeline [0.144 seconds]</code></pre>
</div>
</div>
<p>You can browse the built website, as it appears at this stage in the process, at the cached location <a href="./site-2/index.html">here</a>.</p>
</section>
<section id="editing-the-style-files" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="editing-the-style-files">Editing the style files</h3>
<p>There‚Äôs one last thing I want to check. Let‚Äôs suppose I created a light-themed version of the blog by editing <code>_liteblog.css</code>. Or, to be more accurate, let‚Äôs suppose I made a quick and dirty edit to the CSS file that almost creates a light theme but actually leaves a lot of weirdness unfixed because the author was too lazy to do it properly and frankly isn‚Äôt very strong at CSS.</p>
<p>Let‚Äôs see what this does to the network visualisation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_visnetwork</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="visNetwork html-widget html-fill-item" id="htmlwidget-dc9b6b2f202c941e6590" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-dc9b6b2f202c941e6590">{"x":{"nodes":{"name":["blog","blog_css","blog_ftr","blog_hdr","blog_rds","post_files","post_fuse","post_paths","static_copy","static_files","static_paths","Liteblog"],"type":["stem","stem","stem","stem","stem","pattern","pattern","stem","pattern","pattern","stem","object"],"description":[null,null,null,null,null,null,null,null,null,null,null,null],"status":["uptodate","outdated","uptodate","uptodate","uptodate","outdated","outdated","outdated","outdated","outdated","outdated","uptodate"],"seconds":[0.003,0,0,0,0.003,0.001,2.115,0,0.015,0,0.032,null],"bytes":[9905,3759,115,271,0,14767,368,218,173,302514,159,null],"branches":[null,null,null,null,null,6,6,null,2,2,null,null],"label":["blog","blog_css","blog_ftr","blog_hdr","blog_rds","post_files","post_fuse","post_paths","static_copy","static_files","static_paths","Liteblog"],"color":["#354823","#78B7C5","#354823","#354823","#354823","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#354823"],"id":["blog","blog_css","blog_ftr","blog_hdr","blog_rds","post_files","post_fuse","post_paths","static_copy","static_files","static_paths","Liteblog"],"level":[2,1,1,1,3,4,5,3,5,4,3,1],"shape":["dot","dot","dot","dot","dot","square","square","dot","square","square","dot","triangleDown"]},"edges":{"from":["blog","blog","blog_css","blog_ftr","blog_hdr","post_files","static_paths","post_paths","blog","static_files","blog","Liteblog","blog"],"to":["static_paths","post_fuse","post_fuse","post_fuse","post_fuse","post_fuse","static_files","post_files","static_copy","static_copy","blog_rds","blog","post_paths"],"arrows":["to","to","to","to","to","to","to","to","to","to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","physics":false},"manipulation":{"enabled":false},"edges":{"smooth":{"type":"cubicBezier","forceDirection":"horizontal"}},"physics":{"stabilization":false},"interaction":{"zoomSpeed":1},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":null,"width":null,"height":null,"idselection":{"enabled":false,"style":"width: 150px; height: 26px","useLabels":true,"main":"Select by id"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"","style":"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;"},"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":{"from":1,"to":1},"algorithm":"hierarchical","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":true,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"},"legend":{"width":0.2,"useGroups":false,"position":"right","ncol":1,"stepX":100,"stepY":100,"zoom":true,"nodes":{"label":["Up to date","Outdated","Stem","Pattern","Object"],"color":["#354823","#78B7C5","#899DA4","#899DA4","#899DA4"],"shape":["dot","dot","dot","square","triangleDown"]},"nodesToDataframe":true},"tooltipStay":300,"tooltipStyle":"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Targets has detected the edit, but notice that there is a dependency between <code>blog_css</code> and <code>fuse_post</code>. This dependency is added because for this blog the CSS is embedded<sup>9</sup> within the HTML file at build time: as a consequence, editing the CSS means that <em>all</em> pages will need to be rebuilt. And indeed‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚úî skipped target blog
‚ñ∂ dispatched target blog_css
‚óè completed target blog_css [0 seconds, 3.759 kilobytes]
‚úî skipped target blog_ftr
‚úî skipped target blog_hdr
‚ñ∂ dispatched target static_paths
‚óè completed target static_paths [0.032 seconds, 159 bytes]
‚ñ∂ dispatched target post_paths
‚óè completed target post_paths [0 seconds, 218 bytes]
‚úî skipped target blog_rds
‚úî skipped branch static_files_1725c3c24144eb91
‚úî skipped branch static_files_cfb2777954f617d0
‚úî skipped pattern static_files
‚úî skipped branch post_files_9bbb5ae3d1d3f95b
‚úî skipped branch post_files_0a8225f176a1d698
‚úî skipped branch post_files_2ed928ff2eafb31e
‚úî skipped branch post_files_454f9b18b99302f6
‚úî skipped branch post_files_b77b5ec03a0b7e01
‚úî skipped branch post_files_b12b144c84b5b3a0
‚úî skipped pattern post_files
‚úî skipped branch static_copy_dfa803e4dbdaa48f
‚úî skipped branch static_copy_501faf107279df5b
‚úî skipped pattern static_copy
‚ñ∂ dispatched branch post_fuse_c2dd6a62cc9d9565
‚óè completed branch post_fuse_c2dd6a62cc9d9565 [0.229 seconds, 171 bytes]
‚ñ∂ dispatched branch post_fuse_bb77d7e34f5b9d8d
‚óè completed branch post_fuse_bb77d7e34f5b9d8d [0.761 seconds, 187 bytes]
‚ñ∂ dispatched branch post_fuse_bb123c5d7a5d991e
‚óè completed branch post_fuse_bb123c5d7a5d991e [0.149 seconds, 182 bytes]
‚ñ∂ dispatched branch post_fuse_f59600e87d9d07da
‚óè completed branch post_fuse_f59600e87d9d07da [0.674 seconds, 185 bytes]
‚ñ∂ dispatched branch post_fuse_a98becd61e7088dd
‚óè completed branch post_fuse_a98becd61e7088dd [1.053 seconds, 183 bytes]
‚ñ∂ dispatched branch post_fuse_b2591b053d5431f7
‚óè completed branch post_fuse_b2591b053d5431f7 [0.044 seconds, 173 bytes]
‚óè completed pattern post_fuse 
‚ñ∂ ended pipeline [3.052 seconds]</code></pre>
</div>
</div>
<p>‚Ä¶that‚Äôs exactly what happens. Again, you can browse the built website, horrible CSS failures and all, at the cached location <a href="./site-3/index.html">here</a>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./site-3/index.html"><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/img/liteblog-home-2.png" class="img-fluid figure-img" alt="light-themed blog homepage"></a></p>
<figcaption>light-themed blog homepage</figcaption>
</figure>
</div>
</div></div></section>
<section id="epilogue-1" class="level3">
<h3 class="anchored" data-anchor-id="epilogue-1">Epilogue</h3>
<p>That‚Ä¶ went about as well as could be expected, I suppose? This ‚Äúliteblog‚Äù project was never intended to be a serious effort at writing a blogging tool, but it does actually work, and maybe one day I‚Äôll use it for something. Probably not though. Having gotten as far as I have into building this, I can see a lot of design limitations that would cause difficulties if I ever tried to use it for real.</p>
<p>So what was the point? Well, I now have a basic understanding of litedown, and I have a better grasp of dynamic branching in targets. That‚Äôs a big win as far as I‚Äôm concerned.</p>
<p><br><br></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/img/kamran-gholami-20T7ctRArtA-unsplash.jpg" class="img-fluid figure-img"></p>
<figcaption>Multiple threads in parallel</figcaption>
</figure>
</div>
<p><br></p>
</section>
</section>
<section id="story-3-parallel-computing" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="story-3-parallel-computing">Story 3: Parallel computing</h2>
<p>For my third foray into targets ‚Äì and the last one for this blog post ‚Äì I wanted to take a look at how a targets pipeline can be distributed across multiple parallel threads. Happily, parallel computing is supported out of the box in targets, using the <a href="https://wlandau.github.io/crew/">crew</a> package to distribute the targets across multiple workers. This ended up being the smallest of my three projects, but there are a couple slightly different variations on how I looked at this, and I‚Äôll go through them each in turn.</p>
<section id="minimal-version" class="level3">
<h3 class="anchored" data-anchor-id="minimal-version">Minimal version</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_knitr_dir</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"threading1"</span>)</span></code></pre></div>
</div>
<p>As a very minimal implementation, consider this pipeline:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_targets.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(targets)</span>
<span id="cb77-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(crew)</span>
<span id="cb77-3"></span>
<span id="cb77-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_option_set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">controller =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crew_controller_local</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb77-5"></span>
<span id="cb77-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb77-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(wait1, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb77-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(wait2, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),</span>
<span id="cb77-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(wait3, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb77-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(wait4, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb77-11">)</span></code></pre></div>
</div>
</div>
<p>There are four targets here, and all they do is pause execution. If these were run serially, you would expect this to take about 10 seconds to complete. But that‚Äôs not what happens because I‚Äôm using <a href="https://wlandau.github.io/crew/reference/crew_controller_local.html"><code>crew_controller_local()</code></a> to define a controller that will split the processing across three parallel workers. Here‚Äôs what actually happens:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚ñ∂ dispatched target wait1
‚ñ∂ dispatched target wait2
‚ñ∂ dispatched target wait3
‚óè completed target wait1 [1.015 seconds, 44 bytes]
‚ñ∂ dispatched target wait4
‚óè completed target wait2 [2.01 seconds, 44 bytes]
‚óè completed target wait3 [3.011 seconds, 44 bytes]
‚óè completed target wait4 [4.004 seconds, 44 bytes]
‚ñ∂ ended pipeline [6.962 seconds]</code></pre>
</div>
</div>
<p>Upon starting the job, the first three targets (<code>wait1</code>, <code>wait2</code>, and <code>wait3</code>) are dispatched to the three workers and they all start running concurrently. The fourth job (<code>wait4</code>) is placed on hold, and doesn‚Äôt start until the first of the three jobs finishes (<code>wait1</code>). Only then does the fourth job start. As the remaining jobs complete, the user is notified, and once they are all finalised targets reports that the pipeline is complete. You can get a high-level summary of the allocation of tasks across workers by calling <a href="https://docs.ropensci.org/targets/reference/tar_crew.html"><code>tar_crew()</code></a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_crew</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 4
  controller               worker seconds targets
  &lt;chr&gt;                    &lt;chr&gt;    &lt;dbl&gt;   &lt;int&gt;
1 e0ea4b4586b1458cc4d537c3 1         5.11       2
2 e0ea4b4586b1458cc4d537c3 2         2.10       1
3 e0ea4b4586b1458cc4d537c3 3         3.10       1</code></pre>
</div>
</div>
<p>As expected based on the intuitive description above, this output confirms that there‚Äôs one worker process that handled two of the targets, and one each handled by the other two.</p>
</section>
<section id="slightly-less-minimal-version" class="level3">
<h3 class="anchored" data-anchor-id="slightly-less-minimal-version">Slightly less minimal version</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_knitr_dir</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"threading2"</span>)</span></code></pre></div>
</div>
<p>The previous example gives a general sense of how parallel execution works in a crew/targets pipeline, but ‚Äì possibly because once upon a time I used <a href="https://callr.r-lib.org/">callr</a> to write my own R6 implementation of a multi-threaded <a href="../../posts/2022-12-22_queue/">queue</a>,<sup>10</sup> which piqued my curiosity about how these things play out ‚Äì I found myself wanting a finer-grained description of what each of the workers is doing at each point in time.</p>
<p>As far as I can tell, neither targets nor crew provides an easy way to do this (edited to add: I later realised that <a href="https://docs.ropensci.org/targets/reference/tar_meta.html"><code>tar_meta()</code></a> provides a lot of what I need), so I wrote a slightly more elaborate version of the previous pipeline, in which the targets themselves keep track of the time at which execution starts and stops, as well as the pid of the R process in which they are being executed. In this version, there are three functions that do the work:</p>
<ul>
<li><code>startup()</code> is called to build the first target (<code>start</code>), and its primary job is to capture the system time at which execution of the first target begins</li>
<li><code>sleeper()</code> is used to build the <code>wait1</code>, <code>wait2</code>, <code>wait3</code>, and <code>wait4</code> targets. These targets are analogous to the wait targets in the original version, but they also capture information about when execution of these targets started and stopped</li>
<li><code>collate()</code> is called at the very end, and is used to construct the <code>trace</code> target. This target aggregates all the information from the other targets</li>
</ul>
<p>Here‚Äôs the entire code:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>_targets.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb83-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(targets)</span>
<span id="cb83-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(crew)</span>
<span id="cb83-3"></span>
<span id="cb83-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_option_set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">controller =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crew_controller_local</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">workers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb83-5"></span>
<span id="cb83-6">sleeper <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(duration, pipeline_start, name) {</span>
<span id="cb83-7">  sleep_start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb83-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(duration)</span>
<span id="cb83-9">  sleep_stop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb83-10">  tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb83-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name           =</span> name,</span>
<span id="cb83-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pipeline_start =</span> pipeline_start,</span>
<span id="cb83-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">worker_pid     =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getpid</span>(),</span>
<span id="cb83-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">begins_at      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(sleep_start, pipeline_start),</span>
<span id="cb83-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">finishes_at    =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(sleep_stop, pipeline_start)</span>
<span id="cb83-16">  )</span>
<span id="cb83-17">}</span>
<span id="cb83-18"></span>
<span id="cb83-19">startup <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb83-20">  tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb83-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>,</span>
<span id="cb83-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pipeline_start =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(),</span>
<span id="cb83-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">worker_pid     =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getpid</span>(),</span>
<span id="cb83-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">begins_at      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.difftime</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secs"</span>),</span>
<span id="cb83-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">finishes_at    =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), pipeline_start)</span>
<span id="cb83-26">  )</span>
<span id="cb83-27">}</span>
<span id="cb83-28"></span>
<span id="cb83-29">collate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(...) {</span>
<span id="cb83-30">  start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb83-31">  na_difftime <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.difftime</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secs"</span>)</span>
<span id="cb83-32">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(...)</span>
<span id="cb83-33">  pipeline_start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pipeline_start[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb83-34">  out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pipeline_start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb83-35">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(</span>
<span id="cb83-36">    out,</span>
<span id="cb83-37">    tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb83-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name         =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trace"</span>,</span>
<span id="cb83-39">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">worker_pid   =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getpid</span>(),</span>
<span id="cb83-40">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">begins_at    =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(start, pipeline_start),</span>
<span id="cb83-41">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">finishes_at  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), pipeline_start)</span>
<span id="cb83-42">    )</span>
<span id="cb83-43">  )</span>
<span id="cb83-44">  out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>duration    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>finishes_at <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>begins_at</span>
<span id="cb83-45">  out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>begins_at   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>begins_at), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb83-46">  out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>finishes_at <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>finishes_at), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb83-47">  out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>duration    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>duration), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb83-48">  out</span>
<span id="cb83-49">}</span>
<span id="cb83-50"></span>
<span id="cb83-51"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb83-52">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(start, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">startup</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cue =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_cue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"always"</span>)),</span>
<span id="cb83-53">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(wait1, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleeper</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pipeline_start, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wait1"</span>)),</span>
<span id="cb83-54">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(wait2, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleeper</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pipeline_start, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wait2"</span>)),</span>
<span id="cb83-55">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(wait3, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleeper</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pipeline_start, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wait3"</span>)),</span>
<span id="cb83-56">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(wait4, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleeper</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pipeline_start, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wait4"</span>)),</span>
<span id="cb83-57">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_target</span>(trace, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collate</span>(start, wait1, wait2, wait3, wait4))</span>
<span id="cb83-58">)</span></code></pre></div>
</div>
</div>
<p>To give you a sense of the dependencies, this is what the targets network looks like for this version of the pipeline. All four <code>wait</code> targets depend on the <code>start</code> target, and the <code>trace</code> target depends on everything:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_visnetwork</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">targets_only =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="visNetwork html-widget html-fill-item" id="htmlwidget-48e6565275f1592f6a3f" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-48e6565275f1592f6a3f">{"x":{"nodes":{"name":["start","trace","wait1","wait2","wait3","wait4"],"type":["stem","stem","stem","stem","stem","stem"],"description":[null,null,null,null,null,null],"status":["outdated","outdated","outdated","outdated","outdated","outdated"],"seconds":[null,null,null,null,null,null],"bytes":[null,null,null,null,null,null],"branches":[null,null,null,null,null,null],"label":["start","trace","wait1","wait2","wait3","wait4"],"color":["#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5","#78B7C5"],"id":["start","trace","wait1","wait2","wait3","wait4"],"level":[1,3,2,2,2,2],"shape":["dot","dot","dot","dot","dot","dot"]},"edges":{"from":["start","start","start","start","start","wait1","wait2","wait3","wait4"],"to":["wait1","wait2","wait3","wait4","trace","trace","trace","trace","trace"],"arrows":["to","to","to","to","to","to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","physics":false},"manipulation":{"enabled":false},"edges":{"smooth":{"type":"cubicBezier","forceDirection":"horizontal"}},"physics":{"stabilization":false},"interaction":{"zoomSpeed":1},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":null,"width":null,"height":null,"idselection":{"enabled":false,"style":"width: 150px; height: 26px","useLabels":true,"main":"Select by id"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"","style":"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;"},"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":{"from":1,"to":1},"algorithm":"hierarchical","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":true,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"},"legend":{"width":0.2,"useGroups":false,"position":"right","ncol":1,"stepX":100,"stepY":100,"zoom":true,"nodes":{"label":["Outdated","Stem"],"color":["#78B7C5","#899DA4"],"shape":["dot","dot"]},"nodesToDataframe":true},"tooltipStay":300,"tooltipStyle":"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>In hindsight, I realised that this could have been done more efficiently, but efficiency is not the primary goal here. I just want a pipeline in which all the targets report some detailed information about their execution. So let‚Äôs run it and see what we get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_make</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚ñ∂ dispatched target start
‚óè completed target start [0.009 seconds, 274 bytes]
‚ñ∂ dispatched target wait1
‚ñ∂ dispatched target wait2
‚ñ∂ dispatched target wait3
‚óè completed target wait1 [1.003 seconds, 281 bytes]
‚ñ∂ dispatched target wait4
‚óè completed target wait2 [2.015 seconds, 284 bytes]
‚óè completed target wait3 [3.005 seconds, 284 bytes]
‚óè completed target wait4 [4.022 seconds, 284 bytes]
‚ñ∂ dispatched target trace
‚óè completed target trace [0.021 seconds, 343 bytes]
‚ñ∂ ended pipeline [7.136 seconds]</code></pre>
</div>
</div>
<p>Okay yes this makes sense. Every other target is dependent on <code>start</code>, and by design this target is <em>always</em> treated as outdated. So when the pipeline begins, the first thing that happens is that the <code>start</code> target is dispatched to a worker; the other two workers do nothing. Once <code>start</code> completes, all four wait targets are eligible for dispatch, but we only have three workers and so <code>wait1</code>, <code>wait2</code>, and <code>wait4</code> are farmed out to workers while <code>wait4</code> remains in the queue. When <code>wait1</code> completes, one of the workers is freed up, thereby allowing <code>wait4</code> to be dispatched. Once all four of the wait targets are completed, the final <code>trace</code> target is built.</p>
<p>If we call <code>tar_crew()</code>, we get the same high-level overview that we got last time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">crew  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_crew</span>()</span>
<span id="cb87-2">crew</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 4
  controller               worker seconds targets
  &lt;chr&gt;                    &lt;chr&gt;    &lt;dbl&gt;   &lt;int&gt;
1 ee4c5b3554e06b8b84c75f3a 1         4.12       4
2 ee4c5b3554e06b8b84c75f3a 2         4.11       1
3 ee4c5b3554e06b8b84c75f3a 3         2.1        1</code></pre>
</div>
</div>
<p>However, this time around we also have access to the <code>trace</code> target that provides a more detailed summary of which R process excecuted each target, and at what time that execution started and stopped:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1">trace <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_read</span>(trace)</span>
<span id="cb89-2">trace</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 √ó 5
  name  worker_pid begins_at finishes_at duration
  &lt;chr&gt;      &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;    &lt;dbl&gt;
1 start    1227869     0            0       0    
2 wait1    1227869     0.038        1.04    1.00 
3 wait2    1227931     1.28         3.28    2.00 
4 wait3    1227869     1.04         4.05    3.00 
5 wait4    1227925     1.27         5.27    4.00 
6 trace    1227869     5.32         5.32    0.004</code></pre>
</div>
</div>
<p>In this data frame, the <code>begins_at</code> column records the amount of time that has passed between the time at which the pipeline started, and the time at which the current target begins execution. Similarly <code>finishes_at</code> records the time from pipeline start to the current target finishing. The <code>duration</code> column is the difference between the two. That being said, if you look at the code I used to calculate these, it‚Äôs clearly an approximation. But it will suffice.</p>
<p>The nice thing about the <code>trace</code> data is that the <code>worker_pid</code> column associates each target with a specific pid for the R process used to build that target. This is slightly finer-grained information than what we got by calling <code>tar_crew()</code>. For example, I now know that <code>start</code> and <code>wait1</code> were both executed by the same R process (i.e., pid 1227869). Admittedly this is not much of a revelation: I could have guessed that just by looking at the logs when I called <code>tar_make()</code> and a few reasonable assumptions about how the scheduler<sup>11</sup> works.</p>
<p>One minor irritation I have with the <code>trace</code> output is that it doesn‚Äôt directly allow me to match the <code>worker_pid</code> column against the <code>worker</code> column produced by <code>tar_crew()</code>. You can see the issue most cleanly if I aggregate the <code>trace</code> data frame by <code>worker_pid</code> like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1">trace_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> trace <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb91-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(worker_pid, duration) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb91-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb91-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seconds =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(duration), </span>
<span id="cb91-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">targets =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), </span>
<span id="cb91-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> worker_pid</span>
<span id="cb91-7">  )</span>
<span id="cb91-8">trace_sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 3
  worker_pid seconds targets
       &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;
1    1227869    4.01       4
2    1227931    2.00       1
3    1227925    4.00       1</code></pre>
</div>
</div>
<p>Looking at this it‚Äôs immediately apparent that worker 1 must corresponded to the R process with pid 1227869, since <code>trace</code> and <code>crew</code> both agree that this is the only worker that executed four distinct targets. However, workers 2 and 3 both executed a single target, so we‚Äôll have to resolve the ambiguity by looking at the <code>seconds</code> column. This is a little awkward because <code>trace_sum$seconds</code> will necessarily be slightly lower than <code>crew$seconds</code> because the time estimate in the <code>trace</code> data is constructed from <em>within</em> the R process that builds the target, but <code>tar_crew()</code> would (I assume) estimate the time from outside that process. The differences will be small, but noticeable. So I‚Äôll use a rolling join:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1">worker_lookup <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> crew <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb93-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(</span>
<span id="cb93-3">    trace_sum, </span>
<span id="cb93-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_by</span>(targets, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">closest</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seconds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seconds))</span>
<span id="cb93-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb93-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(worker, worker_pid)</span>
<span id="cb93-7">worker_lookup</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 2
  worker worker_pid
  &lt;chr&gt;       &lt;int&gt;
1 1         1227869
2 2         1227925
3 3         1227931</code></pre>
</div>
</div>
<p>It‚Äôs not ideal but it works: we now have a mapping between the numeric <code>worker</code> value returned by <code>tar_crew()</code> and the <code>worker_pid</code> value returned when <code>Sys.getpid()</code> is called from within the target function. Joining this gives us the following table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1">target_trace <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> trace <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb95-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(worker_lookup, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker_pid"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb95-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb95-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relocate</span>(worker, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.before =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker_pid"</span>)</span>
<span id="cb95-5">target_trace</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 √ó 7
  name  worker worker_pid begins_at finishes_at duration    id
  &lt;chr&gt; &lt;chr&gt;       &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;    &lt;dbl&gt; &lt;int&gt;
1 start 1         1227869     0            0       0         1
2 wait1 1         1227869     0.038        1.04    1.00      2
3 wait2 3         1227931     1.28         3.28    2.00      3
4 wait3 1         1227869     1.04         4.05    3.00      4
5 wait4 2         1227925     1.27         5.27    4.00      5
6 trace 1         1227869     5.32         5.32    0.004     6</code></pre>
</div>
</div>
<p>Or, to adopt a slightly nicer way of looking at it, we can draw a picture:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(target_trace, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(begins_at, worker, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> name)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb97-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> finishes_at, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> worker)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb97-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb97-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> finishes_at)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb97-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb97-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb97-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worker"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-08_using-targets/index_files/figure-html/threading-2-trace-plot-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Okay yes, this now gives a detailed sense of which targets are dispatched to which workers, and at what time, but it does leave one thing missing: the total elapsed time shown by <code>target_trace</code> is about 5-6 seconds, but when I called <code>tar_make()</code> the total elapsed time was reported to be a little over 7 seconds. The discrepancy between the two is that the timing information recorded by my code doesn‚Äôt account for the time that the targets package spends setting up the pipeline, and recording metadata and target values in the <code>_targets</code> folder.</p>
</section>
<section id="epilogue-2" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="epilogue-2">Epilogue</h3>
<p>One thing that bothered me a <em>lot</em> about the second version, when I implemented it, was this nagging intuition that most of what I was doing felt unnecessary. Certainly, there‚Äôs a limitation to the output of <code>tar_crew()</code> in the sense that it doesn‚Äôt tell you the worker to which each target was assigned, nor does it report the pid for each worker. That seems a little odd to me, but I am very willing to believe there‚Äôs a good reason for that.</p>
<p>The part that seemed utterly baffling to me was seeing that the on-screen output to <code>tar_make()</code> reports the execution time for each target, but (at the time) I couldn‚Äôt work out how to extract that information programmatically. It beggars belief to think that a package as sophisticated as targets wouldn‚Äôt record that information somewhere and‚Ä¶</p>
<p>‚Ä¶yeah, of course it does. I was just looking in the wrong place. If you call <code>tar_meta()</code> it returns a tibble that stores a detailed listing of all targets ‚Äì including the ‚Äúsecret‚Äù<sup>12</sup> one that records the value of <a href="../../posts/2023-12-27_seedcatcher/"><code>.Random.seed</code></a> ‚Äì that includes their execution time, any warnings or errors produced during their execution, and a great deal more besides:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb98-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar_meta</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 √ó 18
   name         type     data             command          depend                  seed path      time                size             bytes format repository iteration parent children  seconds warnings error
   &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;                  &lt;int&gt; &lt;list&gt;    &lt;dttm&gt;              &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;  &lt;list&gt;      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;
 1 startup      function 050b477467191bc8 &lt;NA&gt;             &lt;NA&gt;                      NA &lt;chr [1]&gt; NA                  &lt;NA&gt;                NA &lt;NA&gt;   &lt;NA&gt;       &lt;NA&gt;      &lt;NA&gt;   &lt;chr [1]&gt;  NA     &lt;NA&gt;     &lt;NA&gt; 
 2 collate      function e1dc164dfb76a1e6 &lt;NA&gt;             &lt;NA&gt;                      NA &lt;chr [1]&gt; NA                  &lt;NA&gt;                NA &lt;NA&gt;   &lt;NA&gt;       &lt;NA&gt;      &lt;NA&gt;   &lt;chr [1]&gt;  NA     &lt;NA&gt;     &lt;NA&gt; 
 3 .Random.seed object   28950222af780342 &lt;NA&gt;             &lt;NA&gt;                      NA &lt;chr [1]&gt; NA                  &lt;NA&gt;                NA &lt;NA&gt;   &lt;NA&gt;       &lt;NA&gt;      &lt;NA&gt;   &lt;chr [1]&gt;  NA     &lt;NA&gt;     &lt;NA&gt; 
 4 sleeper      function 5ead800f7ec58068 &lt;NA&gt;             &lt;NA&gt;                      NA &lt;chr [1]&gt; NA                  &lt;NA&gt;                NA &lt;NA&gt;   &lt;NA&gt;       &lt;NA&gt;      &lt;NA&gt;   &lt;chr [1]&gt;  NA     &lt;NA&gt;     &lt;NA&gt; 
 5 start        stem     0c77f67e87bc43d2 2098fa32bc94d489 b151447ecf216509 -1013159115 &lt;chr [1]&gt; 2025-01-10 11:37:51 7588b18ac8276279   274 rds    local      vector    &lt;NA&gt;   &lt;chr [1]&gt;   0.009 &lt;NA&gt;     &lt;NA&gt; 
 6 wait1        stem     00f655abfa250dcd 8900681d4f1181ad ca20d184fd39fc55  1208061404 &lt;chr [1]&gt; 2025-01-10 11:37:52 1945721079faa963   281 rds    local      vector    &lt;NA&gt;   &lt;chr [1]&gt;   1.00  &lt;NA&gt;     &lt;NA&gt; 
 7 wait2        stem     ec6076acf46bb83c adfb6c7b6993720a ca20d184fd39fc55 -2106940369 &lt;chr [1]&gt; 2025-01-10 11:37:54 38b61ce0f7e2cdb4   284 rds    local      vector    &lt;NA&gt;   &lt;chr [1]&gt;   2.02  &lt;NA&gt;     &lt;NA&gt; 
 8 wait3        stem     ca7bfe83a30cc415 71bbae8135d59048 ca20d184fd39fc55   216419040 &lt;chr [1]&gt; 2025-01-10 11:37:55 38b61ce0f7e2cdb4   284 rds    local      vector    &lt;NA&gt;   &lt;chr [1]&gt;   3.00  &lt;NA&gt;     &lt;NA&gt; 
 9 wait4        stem     2d48f39a97604a5e 709dbf0fe45e36da ca20d184fd39fc55 -1433985599 &lt;chr [1]&gt; 2025-01-10 11:37:56 38b61ce0f7e2cdb4   284 rds    local      vector    &lt;NA&gt;   &lt;chr [1]&gt;   4.02  &lt;NA&gt;     &lt;NA&gt; 
10 trace        stem     62abcec67fd170f4 e0601f48904584d2 75a31c5a5fd79694   -31475585 &lt;chr [1]&gt; 2025-01-10 11:37:56 c206c709607ca69c   343 rds    local      vector    &lt;NA&gt;   &lt;chr [1]&gt;   0.021 &lt;NA&gt;     &lt;NA&gt; </code></pre>
</div>
</div>
<p>True, it doesn‚Äôt contain information about the system pid that executes the target, so I‚Äôd still have some work to do, but at least now I have the correct timing information for each target.</p>
<p>Oh well. I‚Äôll know better next time, and anyway the entire point of this exercise was to teach myself how to use the package, so it‚Äôs all good really.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In all fairness, this is the <em>primary</em> purpose of this blog. Yes, it makes me very happy that other people find my posts useful and/or enjoyable, but that is actually a secondary goal. I write these posts for myself, because the act of writing is also an act of learning for me.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>You can also call <code>tar_manifest()</code> to get a slightly more precise list of the targets and the commands with which they are associated, but I‚Äôm not going to bother with that here.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>I mean, if you‚Äôve reached the point where you‚Äôre <em>manually</em> invalidating parts of the R markdown cache to spare yourself 15 minutes of compute time every time you want to tinker with a figure, girl he‚Äôs not the man for you and it‚Äôs time to look for better options.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>Okay fine, yes, if you‚Äôve read the user manual you‚Äôd probably recognise that static branching would also work here if you were clever enough, and if I‚Äôm honest that was what I tried first. But then I realised that a blog is genuinely better suited to dynamic branching and the code was soooooo much simpler this way, so that‚Äôs what I ran with in the end.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>In all honesty I don‚Äôt think this decision to use underscores to represent folder structure is a great design feature. Yes there was some logic for it at the time, but the underscore has an accepted meaning in the various R-based literate programming tools, and it is not good practice to violate user expectations the way I‚Äôm doing here. However, this is a silly side project that is not intended to be used for anything, so I feel no compunction at all about violating conventions.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>Why is the <code>url</code> field never used? Should <code>pattern</code> really be called that? Shouldn‚Äôt some of these be private methods/fields? Blah blah blah. I threw this together quickly, it‚Äôs not meant to be taken seriously.‚Ü©Ô∏é</p></li>
<li id="fn7"><p>Well, millenials. Not young people. The actual young people in my life keep talking about ‚Äúrizz‚Äù and telling me what slaps, and sending memes I don‚Äôt understand. Frankly I need them to stop. My brain melted when my daughter tried to explain ‚Äúskibidi‚Äù and it has never truly recovered.‚Ü©Ô∏é</p></li>
<li id="fn8"><p>These are absolute paths on my local filesystem, but in hindsight this seems like a bad choice: it would make more sense for them to be relative paths, taken from the blog root folder. Oh well.‚Ü©Ô∏é</p></li>
<li id="fn9"><p>This is the default behaviour for litedown, and while I believe you can change this, I‚Äôm still learning litedown and frankly I like this as a default, so I left it as is.‚Ü©Ô∏é</p></li>
<li id="fn10"><p>I hasten to add that nobody should be using the <a href="https://queue.djnavarro.net/">queue</a> package. Like most of my side-projects it was something I wrote just to prove to myself that I could do it, but it‚Äôs little more than a toy.‚Ü©Ô∏é</p></li>
<li id="fn11"><p>Scheduling in <code>crew</code> is handled with the <a href="https://shikokuchuo.net/mirai/">mirai</a> package, which looks amazing and is now on my to-do list to learn.‚Ü©Ô∏é</p></li>
<li id="fn12"><p>Not very secret.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {Three Short Stories about Targets},
  date = {2025-01-08},
  url = {https://blog.djnavarro.net/posts/2025-01-08_using-targets/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúThree Short Stories about
Targets.‚Äù</span> January 8, 2025. <a href="https://blog.djnavarro.net/posts/2025-01-08_using-targets/">https://blog.djnavarro.net/posts/2025-01-08_using-targets/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Reproducibility</category>
  <category>Parallel Computing</category>
  <category>Blogging</category>
  <category>Literate Programming</category>
  <guid>https://blog.djnavarro.net/posts/2025-01-08_using-targets/</guid>
  <pubDate>Tue, 07 Jan 2025 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-01-08_using-targets/img/engin-akyurt-lVD6WBdY_5M-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The schools of magic</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>In the dying days of 2024 I found myself doing <a href="https://www.tidytuesday.com/">Tidy Tuesday</a> again. I really like playing around with data wrangling and visualisation in these exercises, and I wish I were able to find the time to do it more often. But life so often gets in the way, and I suppose I should simply be happy that I get to do it sometimes. Anyway, one of the recent Tidy Tuesday data sets is related to Dungeons &amp; Dragons, which I used to play when I was a teenager, and my children are pestering me to play again now that they‚Äôre old enough to get into it. So I decided to play around with this data set as part of a totally unrelated side project (for a different post!) and I ended up posting these two images to social media:</p>
<div>

</div>
<div class="column-page quarto-layout-panel" data-layout="[2,1]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 66.7%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/dice.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/schools.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>A couple of people emailed me asking for the code for these, and I haven‚Äôt gotten around to replying to them yet. Part of the reason I didn‚Äôt reply initially was that the code was tangled up with the code for the other side project, which made it a little awkward to explain without going down a whole other rabbit hole.</p>
<p>So now I find myself rewriting the code in a slightly more palatable form and posting it to this blog. I mean, why not? It‚Äôs the first day of a new year, and I have nothing better to do this morning.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(forcats)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggrepel)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(legendry)</span></code></pre></div>
</div>
<section id="the-spells-data" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-spells-data">The spells data</h2>
<p>The <code>spells</code> data that I‚Äôm using here comes from the <a href="https://github.com/rfordatascience/tidytuesday/tree/main/data/2024/2024-12-17">TidyTuesday D&amp;D Spells</a> data set. The data set was compiled by Jon Harmon, and originates in the recently released <a href="https://www.dndbeyond.com/sources/dnd/free-rules">Dungeons &amp; Dragons Free Rules</a>. If you‚Äôve played D&amp;D before, this should be quite familiar:</p>
<div class="cell" data-print="print_tinker">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">spells <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./spells.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(spells)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 314 √ó 27
   name      level school bard  cleric druid paladin ranger sorcerer warlock
   &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;lgl&gt; &lt;lgl&gt;  &lt;lgl&gt; &lt;lgl&gt;   &lt;lgl&gt;  &lt;lgl&gt;    &lt;lgl&gt;  
 1 Acid Spl‚Ä¶     0 evoca‚Ä¶ FALSE FALSE  FALSE FALSE   FALSE  TRUE     FALSE  
 2 Aid           2 abjur‚Ä¶ TRUE  TRUE   TRUE  TRUE    TRUE   FALSE    FALSE  
 3 Alarm         1 abjur‚Ä¶ FALSE FALSE  FALSE FALSE   TRUE   FALSE    FALSE  
 4 Alter Se‚Ä¶     2 trans‚Ä¶ FALSE FALSE  FALSE FALSE   FALSE  TRUE     FALSE  
 5 Animal F‚Ä¶     1 encha‚Ä¶ TRUE  FALSE  TRUE  FALSE   TRUE   FALSE    FALSE  
 6 Animal M‚Ä¶     2 encha‚Ä¶ TRUE  FALSE  TRUE  FALSE   TRUE   FALSE    FALSE  
 7 Animal S‚Ä¶     8 trans‚Ä¶ FALSE FALSE  TRUE  FALSE   FALSE  FALSE    FALSE  
 8 Animate ‚Ä¶     3 necro‚Ä¶ FALSE TRUE   FALSE FALSE   FALSE  FALSE    FALSE  
 9 Animate ‚Ä¶     5 trans‚Ä¶ TRUE  FALSE  FALSE FALSE   FALSE  TRUE     FALSE  
10 Antilife‚Ä¶     5 abjur‚Ä¶ FALSE FALSE  TRUE  FALSE   FALSE  FALSE    FALSE  
# ‚Ñπ 304 more rows
# ‚Ñπ 17 more variables: wizard &lt;lgl&gt;, casting_time &lt;chr&gt;, action &lt;lgl&gt;,
#   bonus_action &lt;lgl&gt;, reaction &lt;lgl&gt;, ritual &lt;lgl&gt;,
#   casting_time_long &lt;chr&gt;, trigger &lt;chr&gt;, range &lt;chr&gt;, range_type &lt;chr&gt;,
#   verbal_component &lt;lgl&gt;, somatic_component &lt;lgl&gt;,
#   material_component &lt;lgl&gt;, material_component_details &lt;chr&gt;,
#   duration &lt;chr&gt;, concentration &lt;lgl&gt;, description &lt;chr&gt;</code></pre>
</div>
</div>
<p>If you don‚Äôt already know what you‚Äôre looking at, here‚Äôs a quick summary of the columns that I‚Äôm actually using for these plots:</p>
<ul>
<li><code>name</code>: the name of the spell, obviously</li>
<li><code>level</code>: the spell difficulty level, with level 0 spells (cantrips) being the easiest and level 9 being the most difficult</li>
<li><code>school</code>: which of the nine schools of magic (e.g., enhantment, illusion, necromancy, etc) does this spell belong to?</li>
<li><code>bard</code>, <code>cleric</code>, <code>druid</code>, etc: is this spell learnable by characters that belong to this class?</li>
<li><code>description</code>: the text for the spell description</li>
</ul>
<p>The values stored in most of these variables are pretty straightforward, but it‚Äôs probably useful to look at the <code>description</code> variable in particular since that one is a long string. Here‚Äôs a few spell descriptions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">describe_spell <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">spell =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(spell)) spell <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(spells<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span>
<span id="cb4-3">  spells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> spell) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(description) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_wrap</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>()</span>
<span id="cb4-8">}</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe_spell</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Acid Splash"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>You create an acidic bubble at a point within range, where it explodes
in a 5-foot-radius Sphere. Each creature in that Sphere must succeed
on a Dexterity saving throw or take 1d6 Acid damage. Cantrip Upgrade.
The damage increases by 1d6 when you reach levels 5 (2d6), 11 (3d6),
and 17 (4d6).</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe_spell</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fireball"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A bright streak flashes from you to a point you choose within range
and then blossoms with a low roar into a fiery explosion. Each
creature in a 20-foot-radius Sphere centered on that point makes a
Dexterity saving throw, taking 8d6 Fire damage on a failed save or
half as much damage on a successful one. Flammable objects in the area
that aren‚Äôt being worn or carried start burning. Using a Higher-Level
Spell Slot. The damage increases by 1d6 for each spell slot level
above 3.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe_spell</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prismatic Spray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Eight rays of light flash from you in a 60-foot Cone. Each creature
in the Cone makes a Dexterity saving throw. For each target, roll 1d8
to determine which color ray affects it, consulting the Prismatic Rays
table. Prismatic Rays 1d8 Ray 1 Red. Failed Save: 12d6 Fire damage.
Successful Save: Half as much damage. 2 Orange. Failed Save: 12d6 Acid
damage. Successful Save: Half as much damage. 3 Yellow. Failed Save:
12d6 Lightning damage. Successful Save: Half as much damage. 4 Green.
Failed Save: 12d6 Poison damage. Successful Save: Half as much damage.
5 Blue. Failed Save: 12d6 Cold damage. Successful Save: Half as much
damage. 6 Indigo. Failed Save: The target has the Restrained condition
and makes a Constitution saving throw at the end of each of its turns.
If it successfully saves three times, the condition ends. If it fails
three times, it has the Petrified condition until it is freed by an
effect like the Greater Restoration spell. The successes and failures
needn‚Äôt be consecutive; keep track of both until the target collects
three of a kind. 7 Violet. Failed Save: The target has the Blinded
condition and makes a Wisdom saving throw at the start of your next
turn. On a successful save, the condition ends. On a failed save,
the condition ends, and the creature teleports to another plane of
existence (DM‚Äôs choice). 8 Special. The target is struck by two rays.
Roll twice, rerolling any 8.</code></pre>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/basic.jpg" class="img-fluid figure-img"></p>
<figcaption>D&amp;D Boxed Set: Basic Rules</figcaption>
</figure>
</div>
</div></div></section>
<section id="the-spell-dice-plot" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-spell-dice-plot">The spell dice plot</h2>
<p>Reading these spell descriptions I had the thought that it would be interesting to explore the distribution of dice rolls mentioned in the spell descriptions. In the description for ‚ÄúAcid Splash‚Äù, for example, it refers to a 1d6 roll, a 2d6 roll, a 3d6 roll, and a 4d6 roll. ‚ÄúFireball‚Äù mentions 8d6 and 1d6 in the text. What does the distribution of these dice rolls look like.</p>
<section id="data-wrangling" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="data-wrangling">Data wrangling</h3>
<p>To start with let‚Äôs think about what information we want to extract from the spell descriptions, and how we want to do it. Using <code>str_extract_all()</code> and a bit of <a href="../../posts/2024-12-16_regex-backreferences/">regular expression sorcery</a>, we can pull this information out of a description. Here‚Äôs what we get for the three spells I listed above:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">spells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Acid Splash"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fireball"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prismatic Spray"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(description) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "1d6" "1d6" "2d6" "3d6" "4d6"

[[2]]
[1] "8d6" "1d6"

[[3]]
[1] "1d8"  "1d8"  "12d6" "12d6" "12d6" "12d6" "12d6"</code></pre>
</div>
</div>
<p>This list highlights a decision we need to make about counting tokens: in the ‚ÄúPrismatic Spray‚Äù description, there are five separate mentions of a 12d6 dice roll. Do we want to count all five of these, or to we want to consider unique mentions only? After a bit of thought I ended up going with the latter, so the extraction code would look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">spells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Acid Splash"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fireball"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prismatic Spray"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(description) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(unique)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "1d6" "2d6" "3d6" "4d6"

[[2]]
[1] "8d6" "1d6"

[[3]]
[1] "1d8"  "12d6"</code></pre>
</div>
</div>
<p>Doing this within a data frame produces a <code>dice_txt</code> list column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">spells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, level, description) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb14-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_txt =</span> description <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(unique)</span>
<span id="cb14-7">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 314 √ó 4
   name              level description                              dice_txt
   &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;                                    &lt;list&gt;  
 1 Acid Splash           0 "You create an acidic bubble at a point‚Ä¶ &lt;chr&gt;   
 2 Aid                   2 "Choose up to three creatures within ra‚Ä¶ &lt;chr&gt;   
 3 Alarm                 1 "You set an alarm against intrusion. Ch‚Ä¶ &lt;chr&gt;   
 4 Alter Self            2 "You alter your physical form. Choose o‚Ä¶ &lt;chr&gt;   
 5 Animal Friendship     1 "Target a Beast that you can see within‚Ä¶ &lt;chr&gt;   
 6 Animal Messenger      2 "A Tiny Beast of your choice that you c‚Ä¶ &lt;chr&gt;   
 7 Animal Shapes         8 "Choose any number of willing creatures‚Ä¶ &lt;chr&gt;   
 8 Animate Dead          3 "Choose a pile of bones or a corpse of ‚Ä¶ &lt;chr&gt;   
 9 Animate Objects       5 "Objects animate at your command. Choos‚Ä¶ &lt;chr&gt;   
10 Antilife Shell        5 "An aura extends from you in a 10-foot ‚Ä¶ &lt;chr&gt;   
# ‚Ñπ 304 more rows</code></pre>
</div>
</div>
<p>List columns aren‚Äôt the easiest thing to visualise, so I‚Äôll use the <code>unnest_longer()</code> function to produce a tidy data set that has one row per unique dice roll mention:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">spells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, level, description) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb16-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_txt =</span> description <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(unique)</span>
<span id="cb16-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_longer</span>(</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dice_txt"</span>,</span>
<span id="cb16-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dice_txt"</span>,</span>
<span id="cb16-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">indices_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"position"</span></span>
<span id="cb16-12">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 236 √ó 5
   name            level description                       dice_txt position
   &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;                             &lt;chr&gt;       &lt;int&gt;
 1 Acid Splash         0 "You create an acidic bubble at ‚Ä¶ 1d6             1
 2 Acid Splash         0 "You create an acidic bubble at ‚Ä¶ 2d6             2
 3 Acid Splash         0 "You create an acidic bubble at ‚Ä¶ 3d6             3
 4 Acid Splash         0 "You create an acidic bubble at ‚Ä¶ 4d6             4
 5 Alter Self          2 "You alter your physical form. C‚Ä¶ 1d6             1
 6 Animate Objects     5 "Objects animate at your command‚Ä¶ 1d4             1
 7 Animate Objects     5 "Objects animate at your command‚Ä¶ 1d6             2
 8 Animate Objects     5 "Objects animate at your command‚Ä¶ 1d12            3
 9 Animate Objects     5 "Objects animate at your command‚Ä¶ 2d6             4
10 Animate Objects     5 "Objects animate at your command‚Ä¶ 2d12            5
# ‚Ñπ 226 more rows</code></pre>
</div>
</div>
<p>With a little more data wrangling, we can carve up a <code>dice_txt</code> value like ‚Äú3d6‚Äù into the number of dice to be rolled (i.e.&nbsp;<code>die_num</code> is 3), the number of sides on the die to be rolled (i.e., <code>die_die</code> is 6), and the average value that you‚Äôd get from rolling these dice (i.e., <code>die_val</code> is 10.5). Here‚Äôs the final processed data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">dice_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> spells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, level, description) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb18-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_txt =</span> description <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(unique)</span>
<span id="cb18-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_longer</span>(</span>
<span id="cb18-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dice_txt"</span>,</span>
<span id="cb18-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dice_txt"</span>,</span>
<span id="cb18-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">indices_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"position"</span></span>
<span id="cb18-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb18-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_num =</span> dice_txt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+(?=d)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(),</span>
<span id="cb18-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_die =</span> dice_txt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(?&lt;=d)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(),</span>
<span id="cb18-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_val =</span> dice_num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (dice_die <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb18-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_txt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(dice_txt) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_reorder</span>(dice_val)</span>
<span id="cb18-18">  )</span>
<span id="cb18-19"></span>
<span id="cb18-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dice_dat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 236 √ó 8
   name       level description dice_txt position dice_num dice_die dice_val
   &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;       &lt;fct&gt;       &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1 Acid Spla‚Ä¶     0 "You creat‚Ä¶ 1d6             1        1        6      3.5
 2 Acid Spla‚Ä¶     0 "You creat‚Ä¶ 2d6             2        2        6      7  
 3 Acid Spla‚Ä¶     0 "You creat‚Ä¶ 3d6             3        3        6     10.5
 4 Acid Spla‚Ä¶     0 "You creat‚Ä¶ 4d6             4        4        6     14  
 5 Alter Self     2 "You alter‚Ä¶ 1d6             1        1        6      3.5
 6 Animate O‚Ä¶     5 "Objects a‚Ä¶ 1d4             1        1        4      2.5
 7 Animate O‚Ä¶     5 "Objects a‚Ä¶ 1d6             2        1        6      3.5
 8 Animate O‚Ä¶     5 "Objects a‚Ä¶ 1d12            3        1       12      6.5
 9 Animate O‚Ä¶     5 "Objects a‚Ä¶ 2d6             4        2        6      7  
10 Animate O‚Ä¶     5 "Objects a‚Ä¶ 2d12            5        2       12     13  
# ‚Ñπ 226 more rows</code></pre>
</div>
</div>
<p>Notice that this processed version of the data codes <code>dice_txt</code> as a factor, and the levels are arranged by increasing <code>dice_val</code>. That‚Äôs the mechanism by which the die rolls will be ordered sensibly in the plot.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/expert.jpg" class="img-fluid figure-img"></p>
<figcaption>D&amp;D Boxed Set: Expert Rules</figcaption>
</figure>
</div>
</div></div></section>
<section id="making-the-plot" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="making-the-plot">Making the plot</h3>
<p>A basic version of the plot we want to create looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dice_dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(dice_txt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(level))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>There‚Äôs a lot of tinkering required to make it look pretty, but this is essentially the data we want to display and the format we want it to be displayed in. The full code for the visualisation looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hcl.colors</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PuOr"</span>)</span>
<span id="cb21-2"></span>
<span id="cb21-3">labs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dice_dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb21-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dice_txt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span>(dice_txt),</span>
<span id="cb21-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb21-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> dice_txt</span>
<span id="cb21-8">  )</span>
<span id="cb21-9"></span>
<span id="cb21-10">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb21-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dice_dat,</span>
<span id="cb21-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb21-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> dice_txt,</span>
<span id="cb21-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(level)</span>
<span id="cb21-15">  )</span>
<span id="cb21-16">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_label_repel</span>(</span>
<span id="cb21-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> labs,</span>
<span id="cb21-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb21-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> dice_txt,</span>
<span id="cb21-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> count,</span>
<span id="cb21-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> dice_txt</span>
<span id="cb21-24">    ),</span>
<span id="cb21-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb21-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">direction =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>,</span>
<span id="cb21-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb21-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nudge_y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb21-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>,</span>
<span id="cb21-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>,</span>
<span id="cb21-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb21-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb21-33">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_manual</span>(</span>
<span id="cb21-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spell level"</span>,</span>
<span id="cb21-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> palette</span>
<span id="cb21-37">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_discrete</span>(</span>
<span id="cb21-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Increasing average outcome \u27a1"</span>,</span>
<span id="cb21-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb21-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>)</span>
<span id="cb21-42">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dice rolls in D&amp;D spell descriptions by spell level"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb21-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>),</span>
<span id="cb21-48">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb21-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb21-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb21-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.margin =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>),</span>
<span id="cb21-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inside"</span>,</span>
<span id="cb21-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position.inside =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">825</span>),</span>
<span id="cb21-54">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.direction =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"horizontal"</span>,</span>
<span id="cb21-55">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.title.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>,</span>
<span id="cb21-56">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb21-57">  )</span>
<span id="cb21-58"></span>
<span id="cb21-59"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/index_files/figure-html/make-plot-1.png" class="img-fluid figure-img" width="1152"></p>
</figure>
</div>
</div>
</div>
<p>Very pretty.</p>
<p>There‚Äôs a small mystery that this plot leads to. As a general pattern, the low-level spells tend to mention die rolls with lower average value when compared to higher-level spells (i.e., there‚Äôs lots of brown and orange bars on the left, and mostly blueish/purple bars on the right). That makes sense, especially because the dice rolls mentioned in spell descriptions are usually describing the amount of damage the spell does.</p>
<p>So what‚Äôs the story with this one weird outlier, the level 0 spell that mentions a 12d6 roll? To answer this we need to work out which spell it is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">dice_dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(level <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> dice_txt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12d6"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Druidcraft"</code></pre>
</div>
</div>
<p>Now let‚Äôs look at the description:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe_spell</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Druidcraft"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Whispering to the spirits of nature, you create one of the following
effects within range. Weather Sensor. You create a Tiny, harmless
sensory effect that predicts what the weather will be at your location
for the next 24 hours. The effect might manifest as a golden orb for
clear skies, a cloud for rain, falling snowflakes for snow, and so on.
This effect persists for 1 round. Bloom. You instantly make a flower
blossom, a seed pod open, or a leaf bud bloom. Sensory Effect. You
create a harmless sensory effect, such as falling leaves, spectral
dancing fairies, a gentle breeze, the sound of an animal, or the
faint odor of skunk. The effect must fit in a 5-foot Cube. Fire Play.
You light or snuff out a candle, a torch, or a campfire. Spells (E)
Earthquake Level 8 Transmutation (Cleric, Druid, Sorcerer) Casting
Time: Action Range: 500 feet Components: V, S, M (a fractured rock)
Duration: Concentration, up to 1 minute Choose a point on the ground
that you can see within range. For the duration, an intense tremor
rips through the ground in a 100-foot-radius circle centered on that
point. The ground there is Difficult Terrain. When you cast this spell
and at the end of each of your turns for the duration, each creature
on the ground in the area makes a Dexterity saving throw. On a failed
save, a creature has the Prone condition, and its Concentration is
broken. You can also cause the effects below. Fissures. A total of 1d6
fissures open in the spell‚Äôs area at the end of the turn you cast it.
You choose the fissures‚Äô locations, which can‚Äôt be under structures.
Each fissure is 1d10 √ó 10 feet deep and 10 feet wide, and it extends
from one edge of the spell‚Äôs area to another edge. A creature in the
same space as a fissure must succeed on a Dexterity saving throw or
fall in. A creature that successfully saves moves with the fissure‚Äôs
edge as it opens. Structures. The tremor deals 50 Bludgeoning damage
to any structure in contact with the ground in the area when you cast
the spell and at the end of each of your turns until the spell ends.
If a structure drops to 0 Hit Points, it collapses. A creature within
a distance from a collapsing structure equal to half the structure‚Äôs
height makes a Dexterity saving throw. On a failed save, the creature
takes 12d6 Bludgeoning damage, has the Prone condition, and is buried
in the rubble, requiring a DC 20 Strength (Athletics) check as an
action to escape. On a successful save, the creature takes half as
much damage only.</code></pre>
</div>
</div>
<p>Ah‚Ä¶ now it makes more sense: it‚Äôs a parsing error from when the data set was constructed. The stats and description for ‚ÄúEarthquake‚Äù (an 8th level spell) has been appended to the description for ‚ÄúDruidcraft‚Äù, and the 12d6 roll in question isn‚Äôt for ‚ÄúDruidcraft‚Äù it‚Äôs for ‚ÄúEarthquake‚Äù.</p>
<p>Mystery solved.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/companions.jpg" class="img-fluid figure-img"></p>
<figcaption>D&amp;D Boxed Set: Companion Rules</figcaption>
</figure>
</div>
</div></div></section>
</section>
<section id="the-schools-of-magic" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-schools-of-magic">The schools of magic</h2>
<p>Okay, so that‚Äôs the story behind the first plot. What about the second one, the one that looks like a heatmap with some dendrograms? The data wrangling for that one one is a little more elaborate, because we have to construct data for the heatmap and data for the dendrograms.</p>
<section id="data-for-the-heatmap" class="level3">
<h3 class="anchored" data-anchor-id="data-for-the-heatmap">Data for the heatmap</h3>
<p>To produce data for the heatmap, we select the relevant columns: i.e., those corresponding to the character classes, the <code>school</code> variable that denotes the school of magic for the spell, and the <code>name</code> variable because I like having an id column in my data. We then use <code>pivot_longer()</code> to arrange this data set in long form:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">spells_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> spells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, school, bard<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>wizard) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb26-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> bard<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>wizard,</span>
<span id="cb26-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>,</span>
<span id="cb26-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"castable"</span></span>
<span id="cb26-7">  ) </span>
<span id="cb26-8"></span>
<span id="cb26-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(spells_long)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2,512 √ó 4
   name        school     class    castable
   &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;    &lt;lgl&gt;   
 1 Acid Splash evocation  bard     FALSE   
 2 Acid Splash evocation  cleric   FALSE   
 3 Acid Splash evocation  druid    FALSE   
 4 Acid Splash evocation  paladin  FALSE   
 5 Acid Splash evocation  ranger   FALSE   
 6 Acid Splash evocation  sorcerer TRUE    
 7 Acid Splash evocation  warlock  FALSE   
 8 Acid Splash evocation  wizard   TRUE    
 9 Aid         abjuration bard     TRUE    
10 Aid         abjuration cleric   TRUE    
# ‚Ñπ 2,502 more rows</code></pre>
</div>
</div>
<p>Now we have a tidy data set with one row per ‚Äúobservation‚Äù, in the sense that it specifies whether a spell of a specific <code>name</code> (which belongs to a specific <code>school</code>), is in fact <code>castable</code> by members of a particular character <code>class</code>. We can summarise this by aggregating over the specific spells, and count the number of castable spells for each combination of magic school and character class:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> spells_long <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb28-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(castable),</span>
<span id="cb28-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"school"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>)</span>
<span id="cb28-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb28-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">school =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_to_title</span>(school),</span>
<span id="cb28-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_to_title</span>(class)</span>
<span id="cb28-9">  )</span>
<span id="cb28-10"></span>
<span id="cb28-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 64 √ó 3
   school     class    count
   &lt;chr&gt;      &lt;chr&gt;    &lt;int&gt;
 1 Evocation  Bard         7
 2 Evocation  Cleric      12
 3 Evocation  Druid       17
 4 Evocation  Paladin      3
 5 Evocation  Ranger       3
 6 Evocation  Sorcerer    30
 7 Evocation  Warlock      4
 8 Evocation  Wizard      30
 9 Abjuration Bard        16
10 Abjuration Cleric      33
# ‚Ñπ 54 more rows</code></pre>
</div>
</div>
<p>This <code>dat</code> data frame is suitable for plotting as a heat map with <code>geom_tile()</code>, so let‚Äôs now move to stage two of the data wrangling.</p>
</section>
<section id="dissimilarity-data-for-the-dendrograms" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="dissimilarity-data-for-the-dendrograms">Dissimilarity data for the dendrograms</h3>
<p>The data structure that we need at this step is slightly more complicated, because what we want to display on each axis is a hierarchical clustering, of the sort typically produced by <code>hclust()</code>. In a distant, distant past I actually wrote my PhD thesis on clustering and scaling tools used to represent item (dis)similarities, and as such I‚Äôm acutely aware that these tools are extremely sensitive to the way you define similarity (or dissimilarity, or distance, or association, or whatever‚Ä¶). So I‚Äôll be a little careful here, because if you do this in a thoughtless way you get stupid answers.</p>
<p>Before I begin, I‚Äôll quickly define a boring function that I‚Äôll used when printing matrices. It‚Äôs not a very good function, but it works for the purposes I need it for in this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">print_truncated <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb30-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matrix"</span>)) {</span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ellipsis =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span>
<span id="cb30-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ellipsis =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span>
<span id="cb30-5">  }</span>
<span id="cb30-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dist"</span>)) {</span>
<span id="cb30-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Labels"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Labels"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ellipsis =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span>
<span id="cb30-8">  }</span>
<span id="cb30-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb30-10">}</span></code></pre></div>
</div>
<p>Okay, now let‚Äôs get to work on the data wrangling. We‚Äôll start by reorganising the <code>dat</code> data frame into a matrix form. The <code>mat</code> matrix below contains the exact same information as the data frame: each cell in the matrix represents the number of castable spells for a specific combination of class and school.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(</span>
<span id="cb31-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"school"</span>,</span>
<span id="cb31-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span></span>
<span id="cb31-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb31-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>()</span>
<span id="cb31-7"></span>
<span id="cb31-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(mat) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class</span>
<span id="cb31-9">mat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb31-10">mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(mat)</span>
<span id="cb31-11"></span>
<span id="cb31-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_truncated</span>(mat)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       Evoca. Abjur. Trans. Encha. Necro. Divin. Illus. Conju.
Bard        7     16     18     28      5     18     22      8
Cleric     12     33     13      8     14     17      1     11
Druid      17     17     33      9      7     14      2     21
Palad.      3     16      3      5      3      5      0      2
Ranger      3     11     13      3      1      9      1      7
Sorce.     30      7     33     13      9      8     14     19
Warlo.      4      8      6     12     10      9     11      9
Wizard     30     22     41     15     18     19     26     24</code></pre>
</div>
</div>
<p>In this matrix we have a measure of ‚Äúaffinity‚Äù, in the sense that larger values indicate a higher affinity between a class and a school. The tricky part here is that some classes are simply better at spellwork than others: clerics and wizards can both cast lots of spells; paladins and rangers cannot cast many. The kind of similarity that I have in mind here is not the boring ‚Äúclerics and wizards are similar because they can both cast lots of spells‚Äù kind. What I really want to say is something like ‚Äúpaladins and clerics are similar because abjuration is the strongest school for both classes‚Äù. The same applies when thinking about the schools of magic: there are lots of transmutation spells and lots of abjuration spells. That doesn‚Äôt really make those schools similar, not in the sense I care about.</p>
<p>What all this amounts to is an acknowledgement that we need to correct for overall prevalance, or ‚Äì to frame it in probabilistic terms ‚Äì to describe classes in terms of a ‚Äúdistribution over schools‚Äù and describe schools in terms of a ‚Äúdistribution over classes‚Äù. That gives us the following two matrices:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">class_distro  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(mat), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(mat))</span>
<span id="cb33-2">school_distro <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(mat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mat), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(mat)))</span></code></pre></div>
</div>
<p>The <code>class_distro</code> matrix is the one that describes classes as a distribution over schools, and you can see in the printout here that when described in this fashion the paladin row and the cleric row do look rather similar to each other:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_truncated</span>(class_distro)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       Evoca. Abjur. Trans. Encha. Necro. Divin. Illus. Conju.
Bard    0.057  0.131  0.148  0.230  0.041  0.148  0.180  0.066
Cleric  0.110  0.303  0.119  0.073  0.128  0.156  0.009  0.101
Druid   0.142  0.142  0.275  0.075  0.058  0.117  0.017  0.175
Palad.  0.081  0.432  0.081  0.135  0.081  0.135  0.000  0.054
Ranger  0.062  0.229  0.271  0.062  0.021  0.188  0.021  0.146
Sorce.  0.226  0.053  0.248  0.098  0.068  0.060  0.105  0.143
Warlo.  0.058  0.116  0.087  0.174  0.145  0.130  0.159  0.130
Wizard  0.154  0.113  0.210  0.077  0.092  0.097  0.133  0.123</code></pre>
</div>
</div>
<p>A similar phenomenon is observed in the <code>school_distro</code> matrix, where you can see that the rows for abjuration and divination are quite similar despite the fact that there are a lot more abjuration spells than divination spells:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_truncated</span>(school_distro)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        Bard Cleric Druid Palad. Ranger Sorce. Warlo. Wizard
Evoca. 0.066  0.113 0.160  0.028  0.028  0.283  0.038  0.283
Abjur. 0.123  0.254 0.131  0.123  0.085  0.054  0.062  0.169
Trans. 0.112  0.081 0.206  0.019  0.081  0.206  0.038  0.256
Encha. 0.301  0.086 0.097  0.054  0.032  0.140  0.129  0.161
Necro. 0.075  0.209 0.104  0.045  0.015  0.134  0.149  0.269
Divin. 0.182  0.172 0.141  0.051  0.091  0.081  0.091  0.192
Illus. 0.286  0.013 0.026  0.000  0.013  0.182  0.143  0.338
Conju. 0.079  0.109 0.208  0.020  0.069  0.188  0.089  0.238</code></pre>
</div>
</div>
<p>We are now in a position to convert both of these to distance/distance matrices. Notwithstanding the fact that it‚Äôs probably not the ideal way to describe similarity between distributions, I‚Äôll call <code>dist()</code> using the default Euclidean distance measure. I mean, sure, I could probably do something fancy with <a href="https://en.wikipedia.org/wiki/Jensen%E2%80%93Shannon_divergence">Jensen-Shannon divergence</a> here, but in my experience the metric you use to measure distributional similarity is <em>far</em> less important than the manner in which you construct the distributions from raw features in the first place, so I‚Äôm not going to sweat this one. Here‚Äôs our measure of class dissimilarity:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">class_dissim  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dist</span>(class_distro)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_truncated</span>(class_dissim)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        Bard Cleric Druid Palad. Ranger Sorce. Warlo.
Cleric 0.309                                         
Druid  0.296  0.251                                  
Palad. 0.373  0.167 0.381                            
Ranger 0.294  0.213 0.146  0.313                     
Sorce. 0.286  0.342 0.168  0.468  0.292              
Warlo. 0.151  0.270 0.288  0.371  0.312  0.279       
Wizard 0.218  0.259 0.152  0.389  0.228  0.118  0.196</code></pre>
</div>
</div>
<p>Here‚Äôs our measure of school dissimilarity:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">school_dissim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dist</span>(school_distro)</span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_truncated</span>(school_dissim)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       Evoca. Abjur. Trans. Encha. Necro. Divin. Illus.
Abjur.  0.320                                          
Trans.  0.122  0.279                                   
Encha.  0.323  0.284  0.270                            
Necro.  0.218  0.200  0.226  0.281                     
Divin.  0.271  0.133  0.203  0.181  0.179              
Illus.  0.319  0.409  0.301  0.217  0.313  0.303       
Conju.  0.134  0.251  0.073  0.273  0.178  0.184  0.319</code></pre>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/master.jpg" class="img-fluid figure-img"></p>
<figcaption>D&amp;D Boxed Set: Master Rules</figcaption>
</figure>
</div>
</div></div></section>
<section id="hierarchical-clustering-for-the-dendrograms" class="level3">
<h3 class="anchored" data-anchor-id="hierarchical-clustering-for-the-dendrograms">Hierarchical clustering for the dendrograms</h3>
<p>After all that effort in constructing the dissimilarity matrices, the hierarchical clustering is something of an anticlimax. The only substantive choice we need to make here is whether to use single-link, complete-link, average-link, or some other method for agglomeration. This does matter somewhat, at least in my experience, but I‚Äôm also feeling lazy so I‚Äôm going to go with average-link because it feels appropriate to me in this context:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">clusters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb42-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hclust</span>(class_dissim, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"average"</span>),</span>
<span id="cb42-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">school =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hclust</span>(school_dissim, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"average"</span>)</span>
<span id="cb42-4">)</span>
<span id="cb42-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(clusters)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$class

Call:
hclust(d = class_dissim, method = "average")

Cluster method   : average 
Distance         : euclidean 
Number of objects: 8 


$school

Call:
hclust(d = school_dissim, method = "average")

Cluster method   : average 
Distance         : euclidean 
Number of objects: 8 </code></pre>
</div>
</div>
</section>
<section id="plotting-the-heatmap" class="level3">
<h3 class="anchored" data-anchor-id="plotting-the-heatmap">Plotting the heatmap</h3>
<p>Constructing the plot can also be considered a two-part process. In the first stage, we constrict a <code>base</code> plot object that uses <code>geom_tile()</code> to display the class/school affinities data (i.e., <code>dat</code>), and add various stylistic features to make it look pretty:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(school, class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> count)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_tile</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_distiller</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RdPu"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb44-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Schools of Magic"</span>,</span>
<span id="cb44-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Classes of Character"</span>,</span>
<span id="cb44-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Learnable Spells"</span></span>
<span id="cb44-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb44-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(</span>
<span id="cb44-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>, </span>
<span id="cb44-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span></span>
<span id="cb44-14">    ),</span>
<span id="cb44-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.margin =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>),</span>
<span id="cb44-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>),</span>
<span id="cb44-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb44-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb44-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ccc"</span>),</span>
<span id="cb44-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>,</span>
<span id="cb44-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(</span>
<span id="cb44-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span>, </span>
<span id="cb44-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222"</span></span>
<span id="cb44-24">    )</span>
<span id="cb44-25">  )</span>
<span id="cb44-26"></span>
<span id="cb44-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(base)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/index_files/figure-html/base-plot-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>In this form, though, you can‚Äôt really see which schools are similar to each other and nor can you see how the classes are related in terms of their spell-casting affinities. What we really want to do is reorder the rows and columns so that the most similar schools are placed in adjacent columns, and the most similar classes are placed in adjacent rows.</p>
</section>
<section id="adding-the-dendrograms" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="adding-the-dendrograms">Adding the dendrograms</h3>
<p>Until recently I‚Äôd never found a tool for doing this in R that I found satisfying, but with the release of the <a href="https://teunbrand.github.io/legendry/">legendry</a> package by Teun van den Brand (which has a <em>lot</em> of tools for working with plot legends and axes that I‚Äôm slowly learning‚Ä¶) this has changed. If we pass a hierarchical clustering to the <code>scale_*_dendro()</code> functions, the rows/columns are reordered appropriately, and the dendrograms themselves are shown alongside the axes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_dendro</span>(</span>
<span id="cb45-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clust =</span> clusters<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>school,</span>
<span id="cb45-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guide =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_axis_dendro</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.dodge =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb45-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb45-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span></span>
<span id="cb45-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_dendro</span>(</span>
<span id="cb45-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clust =</span> clusters<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class,</span>
<span id="cb45-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb45-11">  )</span>
<span id="cb45-12"></span>
<span id="cb45-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/index_files/figure-html/final-plot-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>So much nicer!</p>
<p>To any D&amp;D player, the plot is immediately interpretable: wizards and sorcerers are very similar spellcasting classes, and the spellcasting abilities of paladins are basically ‚Äúclerics, but not very good at it‚Äù. The same dynamic is in play with regards to druids and rangers, in the sense that they‚Äôre both nature focused spellcasters but rangers aren‚Äôt very good at it. The grouping of bards and warlocks surprised me a little, until it was pointed out to me that they both rely heavily on charisma in their spellcasting, so there is a kind of connection there.</p>
<p>On the schools side, the plot is similarly interpretable: enchantment and illusion are closely related schools, as are abjuration and divination. Necromancy feels a little bit like the darker cousin of abjuration so yeah, that tracks too. Transmutation, conjuration, and evocation are all kinda related, so you get a clustering there too.</p>
<p>There are some limitations to hierarchical clustering, of course, and you can see a little bit of that coming through in the plot. By design, I constructed the dissimilarities so that they‚Äôd ignore the ‚Äúprimary spellcaster vs secondary spellcaster‚Äù distinction, so the overall brightness of adjacent rows and columns varies wildly. But to capture that in a clustering solution while also capturing the ‚Äústylistic‚Äù similarities I‚Äôve plotted here, you‚Äôd need to use an overlapping clustering tool rather than a hierarchical one, and those are inherently trickier to work with, and I wouldn‚Äôt be able to draw the pretty dendrograms either!</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/immortals.jpg" class="img-fluid figure-img"></p>
<figcaption>D&amp;D Boxed Set: Immortals Rules</figcaption>
</figure>
</div>
</div></div></section>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>One weirdly enjoyable game I discovered when writing this post is calling the <code>describe_spell()</code> helper function without specifying the actual spell to describe, which produces the description of a randomly selected spell. Trying to identify the spell name from the description is kind of fun:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe_spell</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>You create a floating, spectral force that resembles a weapon of your
choice and lasts for the duration. The force appears within range in
a space of your choice, and you can immediately make one melee spell
attack against one creature within 5 feet of the force. On a hit, the
target takes Force damage equal to 1d8 plus your spellcasting ability
modifier. As a Bonus Action on your later turns, you can move the
force up to 20 feet and repeat the attack against a creature within 5
feet of it. Using a Higher-Level Spell Slot. The damage increases by
1d8 for every slot level above 2.</code></pre>
</div>
</div>
<p>This one?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe_spell</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>You create an illusion of an object, a creature, or some other visible
phenomenon within range that activates when a specific trigger occurs.
The illusion is imperceptible until then. It must be no larger than a
30-foot Cube, and you decide when you cast the spell how the illusion
behaves and what sounds it makes. This scripted performance can last
up to 5 minutes. When the trigger you specify occurs, the illusion
springs into existence and performs in the manner you described. Once
the illusion finishes performing, it disappears and remains dormant
for 10 minutes, after which the illusion can be activated again. The
trigger can be as general or as detailed as you like, though it must
be based on visual or audible phenomena that occur within 30 feet
of the area. For example, you could create an illusion of yourself
to appear and warn off others who attempt to open a trapped door.
Physical interaction with the image reveals it to be illusory, since
things can pass through it. A creature that takes the Study action
to examine the image can determine that it is an illusion with a
successful Intelligence (Investigation) check against your spell save
DC. If a creature discerns the illusion for what it is, the creature
can see through the image, and any noise it makes sounds hollow to the
creature.</code></pre>
</div>
</div>
<p>Or this one?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe_spell</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>You receive an omen from an otherworldly entity about the results of a
course of action that you plan to take within the next 30 minutes. The
DM chooses the omen from the Omens table. Omens Omen For Results That
Will Be... Weal Good Woe Bad Weal and woe Good and bad Indifference
Neither good nor bad The spell doesn‚Äôt account for circumstances, such
as other spells, that might change the results. If you cast the spell
more than once before finishing a Long Rest, there is a cumulative
25 percent chance for each casting after the first that you get no
answer.</code></pre>
</div>
</div>
<p>Enjoy!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2025,
  author = {Navarro, Danielle},
  title = {The Schools of Magic},
  date = {2025-01-01},
  url = {https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2025" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2025. <span>‚ÄúThe Schools of Magic.‚Äù</span> January 1,
2025. <a href="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/">https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Data Visualisation</category>
  <category>Tidy Tuesday</category>
  <guid>https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/</guid>
  <pubDate>Tue, 31 Dec 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2025-01-01_schools-of-magic/basic.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Art from code VII: Pixel filters</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><em>A couple of years ago I gave an invited workshop called <a href="https://art-from-code.netlify.app">art from code</a> at the 2022 rstudio::conf (now posit::conf) conference. As part of the workshop I wrote a lengthy series of notes on how to make generative art using R, all of which were released under a CC-BY licence. For a while now I‚Äôd been thinking I should do something with these notes. I considered writing a book, but in all honesty I don‚Äôt have the spare capacity for a side-project of that scale these days. I can barely keep up with the workload at my day job as it is. So instead, I‚Äôve decided that I‚Äôd port them over to this site as a series of blog posts. In doing so I‚Äôve made a deliberate decision not to modify the original content too much (nobody loves it when an artist tries to ‚Äúimprove‚Äù the original, after all). All I‚Äôve done is update the code to accommodate package changes since 2022, and some minor edits so that the images are legible when embedded in this blog (which is light-themed, and the original was dark-theme). Other than that, I‚Äôve left it alone. This is the seventh post in that series.</em></p>
<ul>
<li><a href="../../posts/2024-12-18_art-from-code-1/">Prelude</a></li>
<li><a href="../../posts/2024-12-19_art-from-code-2/">Spatial tricks with ambient</a></li>
<li><a href="../../posts/2024-12-20_art-from-code-3/">Polygon tricks</a></li>
<li><a href="../../posts/2024-12-21_art-from-code-4/">Shading tricks</a></li>
<li><a href="../../posts/2024-12-22_art-from-code-5/">Iterated function systems</a></li>
<li><a href="../../posts/2024-12-23_art-from-code-6/">Tiles and tessellations</a></li>
<li><a href="../../posts/2024-12-24_art-from-code-7/">Pixel filters</a></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggforce)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggfx)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(flametree)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span></code></pre></div>
</div>
<p>The last technical topic I want to cover in this workshop is pixel filters, and specifically the <a href="https://ggfx.data-imaginist.com/">ggfx package</a> which makes it relatively easy to use them in conjunction with ggplot2. Phrased in the most general terms, a filter is any function that takes one image as input and returns a new (presumably modified!) image as output. As an example, think about how Instagram filters work: the original photo is used as the input, and the modified one is returned as output. This filtering takes place at the pixel level, so it‚Äôs not immediately obvious how we could do this with ggplot2. The way that the ggfx package handles this is to render render the image (or part of the image) off screen to obtain a representation that can be filtered. The filter is applied to that rendered image and then, when the final plot is constructed, the filtered versions are included in the final plot rather than the original ones.</p>
<p>In this session I‚Äôll provide an introduction to ggfx. The API for ggfx takes a little while to wrap your head around, but once you‚Äôve got a handle on it, it turns out to be a very powerful tool for generative art in R.</p>
<section id="prelude" class="level2">
<h2 class="anchored" data-anchor-id="prelude">Prelude</h2>
<p>When we dive into ggfx, it will be handy to have some data that we can use to make interesting art. For that purpose I‚Äôll rely on the <a href="https://flametree.djnavarro.net/">flametree package</a> which I‚Äôve used in the past to make pretty pictures of trees. The <code>flametree_grow()</code> function generates the raw data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flametree_grow</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, </span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-5">)</span>
<span id="cb2-6">tree</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3,069 √ó 12
   coord_x coord_y id_tree id_time id_path id_leaf id_pathtree id_step
     &lt;dbl&gt;   &lt;dbl&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt; &lt;lgl&gt;   &lt;chr&gt;         &lt;int&gt;
 1  -0.429    0          1       1       1 FALSE   1_1               0
 2  -0.429    0.5        1       1       1 FALSE   1_1               1
 3  -0.429    1          1       1       1 FALSE   1_1               2
 4  -0.429    1          1       2       2 FALSE   1_2               0
 5  -0.429    1.45       1       2       2 FALSE   1_2               1
 6  -0.196    1.87       1       2       2 FALSE   1_2               2
 7  -0.429    1          1       2       3 FALSE   1_3               0
 8  -0.429    1.3        1       2       3 FALSE   1_3               1
 9  -0.274    1.58       1       2       3 FALSE   1_3               2
10  -0.196    1.87       1       3       4 FALSE   1_4               0
# ‚Ñπ 3,059 more rows
# ‚Ñπ 4 more variables: seg_deg &lt;dbl&gt;, seg_len &lt;dbl&gt;, seg_col &lt;dbl&gt;,
#   seg_wid &lt;dbl&gt;</code></pre>
</div>
</div>
<p>You can render the output conveniently with the help of <code>flametree_plot()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">tree <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flametree_plot</span>(</span>
<span id="cb4-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>, </span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f652a0"</span>)</span>
<span id="cb4-5">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/flametree-plot-origin-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The <code>flametree_plot()</code> function is fairly flexible and allows you to draw the tree in several different styles, but for the purposes of this session we‚Äôll want to write our own ggplot2 (and ggfx) code, so it may be helpful to explain what you‚Äôre looking at in this <code>tree</code>. Each curved segment in the tree is drawn as a <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">B√©zier curve</a> specified by three control points whose locations are given by the <code>coord_x</code> and <code>coord_y</code> variables. Each row in the tibble refers to one control point, so there are three rows per segment. Here‚Äôs the three rows that correspond to the 99th segment in the tree:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">tree <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id_path <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 12
  coord_x coord_y id_tree id_time id_path id_leaf id_pathtree id_step
    &lt;dbl&gt;   &lt;dbl&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt; &lt;lgl&gt;   &lt;chr&gt;         &lt;int&gt;
1   -1.05    2.75       1       7      99 FALSE   1_99              0
2   -1.11    2.78       1       7      99 FALSE   1_99              1
3   -1.19    2.75       1       7      99 FALSE   1_99              2
# ‚Ñπ 4 more variables: seg_deg &lt;dbl&gt;, seg_len &lt;dbl&gt;, seg_col &lt;dbl&gt;,
#   seg_wid &lt;dbl&gt;</code></pre>
</div>
</div>
<p>The various columns here describe different aspects of the tree: there‚Äôs a <code>seg_wid</code> column representing the width of each segment (usually mapped to the size aesthetic), a <code>seg_col</code> column specifying a colour (usually mapped to the colour aesthetic), etc.</p>
<p>Of particular relevance here is the <code>id_leaf</code> column. This column is a logical variable that is <code>TRUE</code> only for those control points that represent the very tips of the tree: the leaves, essentially. Later on I‚Äôm going to plot the tree trunk and leaves separately, so it‚Äôs convenient to have a <code>leaf</code> tibble that contains the data only for the leaf nodes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">leaf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id_leaf <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Okay, now let‚Äôs construct a flametree image piece by piece. I‚Äôll start with a <code>base</code> plot that specifies some stylistic choices but doesn‚Äôt map any aesthetics, doesn‚Äôt include any data, and doesn‚Äôt have any geoms. It‚Äôs a blank canvas:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_linewidth_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span></code></pre></div>
</div>
<p>Now I‚Äôm going to create the individual geoms. Usually when we write ggplot2 code we just add the geoms directly to the plot, and if my only intention was to show you how flametree works I‚Äôd do that here. But later I‚Äôm going to use this in conjunction with ggfx, and the design of ggfx is such that you (usually) apply a filter to a ggplot2 layer. The ggfx code will look a lot cleaner if we store our layers as variables.</p>
<p>First, let‚Äôs create a layer representing the <code>leaves</code>. The only thing we want to do with the <code>leaf</code> data is draw a scatter plot, and we can accomplish our goal using <code>geom_point()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">leaves <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(coord_x, coord_y),</span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> leaf, </span>
<span id="cb9-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>, </span>
<span id="cb9-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb9-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e38b75"</span></span>
<span id="cb9-7">)</span></code></pre></div>
</div>
<p>Now we can do the same thing to create the <code>trunk</code>. What we want in this case is something <em>similar</em> to <code>geom_path()</code>, but instead of plotting paths in linear segments we want to draw B√©zier curves. Conveniently for us, the ggforce package supplies the <code>geom_bezier()</code> function that does exactly this. All we need to do is make sure we specify the <code>group</code> aesthetic so that there is one curve per segment in the tree. Here‚Äôs the code for doing that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">trunk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bezier</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> coord_x, </span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> coord_y,</span>
<span id="cb10-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id_pathtree, </span>
<span id="cb10-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> seg_wid</span>
<span id="cb10-7">  ),</span>
<span id="cb10-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> tree, </span>
<span id="cb10-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineend =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"round"</span>, </span>
<span id="cb10-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#555555"</span>,</span>
<span id="cb10-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb10-12">)</span></code></pre></div>
</div>
<p>Having done all the work in this piecewise manner, the code to draw the tree is as simple as adding the <code>trunk</code> and <code>leaves</code> to the <code>base</code> image:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> trunk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> leaves</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/flametree-plot-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
<p>Very pretty!</p>
<div id="exercise-flametree-example" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>A script containing this code is included as the <code>flametree-example.R</code> script in the materials.</p>
</div>
</div>
</section>
<section id="glow" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="glow">Glow</h2>
<p>‚Ä¶but it could be prettier, don‚Äôt you think? Maybe we could add a glow around the leaves, to give it a twinkling look. This feels like the kind of job for a pixel filter, and ggfx should be able to do this for us. Conceptually, what we want to do is apply a ‚Äúglow‚Äù filter to the <code>leaves</code> of our tree, but not to the <code>trunk</code>. We can do that in ggfx by using the <code>with_outer_glow()</code> filtering function: we pass the <code>leaves</code> layer to the filter, along with some other arguments (e.g., <code>colour</code>) that specify the properties of the glow. The examples below show this in action: the left plot is the original tree, the middle one adds a small white glow to the leaves, and the right one adds a much bigger glow:</p>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> trunk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> leaves</span>
<span id="cb12-2">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>   </span>
<span id="cb12-3">  trunk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_outer_glow</span>(leaves, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb12-5">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>   </span>
<span id="cb12-6">  trunk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_outer_glow</span>(leaves, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-align="center" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/outer-glow-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/outer-glow-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/outer-glow-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</div>
<p>In the third example, <code>sigma</code> is interpreted as the standard deviation of the Gaussian blur added around each point: <code>sigma = 5</code> specifies that this standard deviation is 5 pixels in size. The <code>expand = 3</code> argument tells ggfx to ‚Äúexpand‚Äù each point by 3 pixels before drawing the glow. This can be handy for very small objects that would otherwise be difficult to see even with the added glow.</p>
<p>When written like this ‚Äì with each layer stored as a named variable ‚Äì ggfx code is very easy to read. I‚Äôve quickly found myself adopting this code style any time I want to do pixel filtering. Constructing the plot piecewise and storing each layer as a variable makes it much easier to see what I‚Äôm doing!</p>
<p>As an aside, yes, there is also a <code>with_inner_glow()</code> function that applies the glow to the interior of each object rather than extending the glow outside it.</p>
<div id="exercise-ggfx-glow" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>A script containing this code is included as the <code>ggfx-glow.R</code> file in the materials.</p>
</div>
</div>
</section>
<section id="dither" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="dither">Dither</h2>
<p>The previous example gives you a pretty good sense of the core mechanic of ggfx: the package supplies the <code>with_*()</code> functions that correspond to different kinds of pixel filtering operations. There are quite a lot of filters you might want to try. <a href="https://en.wikipedia.org/wiki/Dither">Dithering</a> is a technique in which we reduce (or quantise) an image that has many colours down to an image with fewer colours, and then add some random (or not-so-random) noise to the coarser-grained image in a way that leaves it looking fairly natural. There are a lot of ways in which you can dither an image: one of the most famous is the <a href="https://en.wikipedia.org/wiki/Floyd%E2%80%93Steinberg_dithering">Floyd-Steinberg algorithm</a>. The Wikipedia page on Floyd-Steinberg dithering gives a nice (CC-licenced!) example using a kitten picture, shown to the left.</p>
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/undithered.png" class="img-fluid"> <img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/quantised.png" class="img-fluid"> <img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/dithered.png" class="img-fluid"></p>
<p>The original image is shown on the left. The image in the middle reduces the number of distinct colours in the image (i.e.&nbsp;quantises it) but doesn‚Äôt apply any dithering. It‚Äôs immediately obvious that there are artifacts in the image, and it doesn‚Äôt look like a very good approximation to the original. On the right, a dithering algorithm is applied. The image still uses the same small set of colours, but arranges the pixels in such a way that the local density of light and dark pixels gives the impression of shading.</p>
<p>The ggfx package supplies several dithering filters, including:</p>
<ul>
<li><code>with_dither()</code> uses Floyd-Steinberg dithering</li>
<li><code>with_halftone_dither()</code> uses <a href="https://en.wikipedia.org/wiki/Halftone">halftone</a> dots</li>
<li><code>with_ordered_dither()</code> uses <a href="https://en.wikipedia.org/wiki/Ordered_dithering">ordered dithering</a></li>
<li><code>with_custom_dither()</code> lets you build your own!</li>
</ul>
<p>So let‚Äôs take a look. If we want to apply dithering to some generative art, it would help to have some generative art code! This time around, I‚Äôll reuse the code that we wrote in the very first session to create ‚Äúpolar coordinate art‚Äù in ggplot2. To spare you the effort of revisiting, here‚Äôs the code we‚Äôre going to use to specify a <code>base</code> image:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-2">polar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc_start =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc_end =</span> arc_start <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb13-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb13-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), </span>
<span id="cb13-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb13-8">)</span>
<span id="cb13-9"></span>
<span id="cb13-10">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb13-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> polar, </span>
<span id="cb13-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb13-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> arc_start, </span>
<span id="cb13-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> radius,</span>
<span id="cb13-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> arc_end, </span>
<span id="cb13-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> radius, </span>
<span id="cb13-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shade, </span>
<span id="cb13-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> width</span>
<span id="cb13-19">  )</span>
<span id="cb13-20">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clip =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oob =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>oob_keep) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oob =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>oob_keep) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_viridis_c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">option =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magma"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_linewidth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb13-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aaaaaa"</span>))</span></code></pre></div>
</div>
<p>The details to this don‚Äôt matter very much right now. All that matters is that when we add <code>geom_segment()</code> to <code>base</code>, it produces radial art like the image shown below on the left. Then, on the right, we can see the effect of the <code>with_dither()</code> function. I‚Äôve reduced the image to five distinct colours in order to exaggerate the dithering effect as much as possible. Any lower than this and the image degrades too much.</p>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>()</span>
<span id="cb14-2">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_dither</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_colours =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-align="center" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/dither-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/dither-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Floyd-Steinberg dithering gives the image a slightly grainy feel. It can be very handy when you don‚Äôt want the art to look too clean. Rendering the image in halftone gives it a more patterend feel, as the images below illustrate:</p>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_halftone_dither</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>())</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_halftone_dither</span>(base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>())</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-align="center" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/halftone-dither-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/halftone-dither-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Notice the difference between these two examples. The <code>with_*()</code> functions in ggfx are quite flexible. You can pass a single layer as the input, or alternatively you can pass the whole image. In fact, if you‚Äôre comfortable with <a href="https://stat.ethz.ch/R-manual/R-devel/library/grid/doc/grid.pdf">grid graphics</a>, you can pass individual grobs too. This is discussed in the <a href="https://ggfx.data-imaginist.com/reference/object_support.html">ggfx object support help page</a>.</p>
<div id="exercise-ggfx-dither" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>A script containing this code is included as the <code>ggfx-dither.R</code> file in the materials.</p>
</div>
</div>
</section>
<section id="mask" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="mask">Mask</h2>
<p>One of my favourite filtering tricks is to use <code>with_mask()</code> as a way of displaying one layer of the plot <em>only</em> when it overlaps with a second layer (referred to as the ‚Äúmask‚Äù). To see why I love this so much, let‚Äôs use the ambient package to create a textured grid that we could draw using <code>geom_raster()</code>. I talked about this in the session on spatial noise tricks, so I won‚Äôt bore you by repeating the explanation. Instead, here‚Äôs the code to create a layer called <code>texture</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">texture <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> paint),</span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb16-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),</span>
<span id="cb16-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb16-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb16-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>),</span>
<span id="cb16-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>),</span>
<span id="cb16-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>),</span>
<span id="cb16-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> lf_noise <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mf_noise <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> hf_noise</span>
<span id="cb16-12">    )</span>
<span id="cb16-13">)</span></code></pre></div>
</div>
<p>We‚Äôre going to use <code>texture</code> as our background, but instead of plotting the whole thing we‚Äôre going mask it. Let‚Äôs create a polygon layer that will serve as the mask.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">hex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi))</span>
<span id="cb17-2">mask <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y), hex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span></code></pre></div>
</div>
<p>As before I‚Äôll create a <code>base</code> plot to which we can add these geoms. The code isn‚Äôt very interesting, but I should be thorough and show it to you anyway:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(</span>
<span id="cb18-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e83e8c"</span>), </span>
<span id="cb18-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guide =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()</span>
<span id="cb18-9">  )</span></code></pre></div>
</div>
<p>Okay, so now let‚Äôs take a look the two layers individually:</p>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> texture</span>
<span id="cb19-2">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mask</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-align="center" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/mask-components-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/mask-components-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Gosh, I wonder what we could possibly do with a texture and a hexagon shape‚Ä¶</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_reference</span>(mask, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mask"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_mask</span>(texture, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mask"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/plain-hex-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Huh. Well look at that‚Ä¶ we have something that could quite easily turn into the design of a hex sticker. Amazing.</p>
<p>Before we move on I should explain why I called <code>as_reference()</code> in the previous example, and what that function does. To get a sense of it, let‚Äôs see what happens if I attempt the more ‚Äúintuitive‚Äù strategy of trying to pass the <code>mask</code> layer directly to <code>with_mask()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_mask</span>(texture, mask)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in UseMethod("as.raster"): no applicable method for 'as.raster' applied to an object of class "c('LayerInstance', 'Layer', 'ggproto', 'gg')"</code></pre>
</div>
</div>
<p>The error message here complains that R doesn‚Äôt know how to convert the <code>mask</code> layer to a raster object. Remember at the beginning I said that ggfx works by converting everything to a pixel representation (i.e., turn our vector graphics layer into raster graphics). What‚Äôs going on here is that the second argument to <code>with_mask()</code> is allowed to be a ‚Äúregistered filter‚Äù, or it has to actually be a raster object. I‚Äôm not doing either one! I‚Äôm trying to pass it a raw ggplot layer. That‚Äôs where the <code>as_reference()</code> function comes in. Its role is to take a layer and ‚Äúregister‚Äù it as a filter (the <code>id</code> argument is used to give it a name) that can subsequently used as the mask.</p>
<p>There are a few functions in ggfx that work like that. Another one is the <code>as_group()</code> function. Suppose I want to apply a filter to several layers at once, but not necessarily to the whole plot. For example, suppose I want some text and a pretty border on my hex sticker, represented by these two layers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">border <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y), hex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
‚Ñπ Please use `linewidth` instead.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb25-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> text), </span>
<span id="cb25-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dat =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ART"</span>), </span>
<span id="cb25-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>,</span>
<span id="cb25-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, </span>
<span id="cb25-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontface =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb25-7">) </span></code></pre></div>
</div>
<p>When I construct my mask, what I really want to do is apply it to all three layers: <code>texture</code>, <code>border</code>, and <code>text</code> should all be masked by the <code>mask</code> layer. To do that I pass <code>texture</code>, <code>border</code>, and <code>text</code> to <code>as_group()</code> to define the group; then I pass <code>mask</code> to <code>as_reference()</code> to register it as a filter; and <em>then</em> I apply <code>with_mask()</code>. Here‚Äôs how that works:</p>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> texture <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> border</span>
<span id="cb26-2">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_group</span>(texture, text, border, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_reference</span>(mask, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mask"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_mask</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mask"</span>)</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-align="center" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/mask-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/mask-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>That‚Äôs awfully convenient :)</p>
<div id="exercise-ggfx-mask" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>A script containing this code is included as the <code>ggfx-mask.R</code> file in the materials.</p>
</div>
</div>
</section>
<section id="displace" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="displace">Displace</h2>
<p>Displacement filters are conceptually simple, but extremely powerful, and can be a bit counterintuitive to work with in practice. The idea to shift all the pixels in one layer based on the pixel values in another layer (referred to as the displacement map). For example, a black pixel in the displacement map might be interpreted to mean ‚Äúdon‚Äôt move this pixel in the original layer‚Äù, whereas a white pixel might mean ‚Äúmove this 10 pixels to the right‚Äù. The idea of constructing a pixel value to displacement mapping makes conceptual sense to me, but I find it a little hard to visualise what that actually means. A worked example would probably help!</p>
<p>Let‚Äôs start by creating some ggplot layers that each contain semi-transparent triangles:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">polygon_layer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> fill, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha)</span>
<span id="cb27-3">}</span>
<span id="cb27-4">poly1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_layer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb27-5">poly2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_layer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb27-6">poly3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_layer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb27-7">poly4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_layer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>Next, I‚Äôll define a <code>base</code> plot and then show you what these polygons look like when drawn together:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb28-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb28-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#333333"</span>))</span>
<span id="cb28-5"></span>
<span id="cb28-6">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> poly1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> poly2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> poly3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> poly4</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/polygons-only-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Later on, we‚Äôre going to use this as our displacement map. The easiest way to interpret this map (I think?) is to think about each of the shaded regions separately. Let‚Äôs start by thinking about the darkest area, the region that makes up the border of the image and the diagonal stripe in the center. When we go to ‚Äúfill in‚Äù that part of the final image, we won‚Äôt grab the ‚Äúsame‚Äù pixel in the other image: instead we‚Äôre going to grab a pixel that is below and to the left. For the brightest areas (the two bright white triangles, one to the top left of the map and the other to the bottom right), we‚Äôll displace in the other direction.</p>
<p>Okay, so if we‚Äôre going to do this, we will need an layer that can serve as the image to be displaced. I‚Äôll keep it simple. Here‚Äôs a layer that plots the word <code>"ART"</code> using <code>geom_text()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb29-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ART"</span>), </span>
<span id="cb29-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, </span>
<span id="cb29-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, </span>
<span id="cb29-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontface =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb29-6">)</span></code></pre></div>
</div>
<p>So here‚Äôs our process:</p>
<ol type="1">
<li>Use <code>as_group()</code> to convert the four polygon layers into a single group.</li>
<li>Use <code>as_reference()</code> to register that group as a filter.</li>
<li>Use <code>with_displacement()</code> to displace the <code>text</code> layer using the polygons.</li>
</ol>
<p>Here‚Äôs the code, and the results:</p>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> poly1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> poly2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> poly3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> poly4 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text</span>
<span id="cb30-2">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_group</span>(poly1, poly2, poly3, poly4, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polygons"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">include =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_reference</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polygons"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"displacement_map"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb30-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_displacement</span>(</span>
<span id="cb30-6">    text,</span>
<span id="cb30-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_map =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_alpha</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"displacement_map"</span>),</span>
<span id="cb30-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_map =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_alpha</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"displacement_map"</span>), </span>
<span id="cb30-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_scale =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,</span>
<span id="cb30-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_scale =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span></span>
<span id="cb30-11">  )</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-align="center" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/displace-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/displace-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Again, this is very pretty, but it probably needs a little explanation:</p>
<ul>
<li>When I called <code>with_displacement()</code> I passed the <code>text</code> object first: that‚Äôs the ‚Äúthing we will displace‚Äù. Next, I specified <em>two</em> displacement maps, <code>x_map</code> and <code>y_map</code>. It is, after all, quite possible to use a <em>different</em> displacement map to describe how we find the displacement in the horizontal direction and the vertical directions! However, I haven‚Äôt done that here because it makes my head hurt.</li>
<li>When constructing the displacement maps I used <code>ch_alpha()</code> to make clear that we should use the transparency value of each pixel as the basis for the displacement. That makes sense in this case because transparency is the thing that varies across the image.</li>
<li>The <code>x_scale</code> and <code>y_scale</code> parameters specify the number of pixels to shift. Specifically, setting <code>x_scale = 150</code> means that the maximum difference in transparency should correspoind to a shift of 150 pixels.</li>
</ul>
<p>To be perfectly honest, I find it hard to visualise the effect of <code>with_displacement()</code>. My spatial reasoning skills just aren‚Äôt good enough. So what I usually do is tinker until I find something I like. YMMV.</p>
<div id="exercise-ggfx-displace" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>A script containing this code is included as the <code>ggfx-displace.R</code> file in the materials.</p>
</div>
</div>
</section>
<section id="blend" class="level2">
<h2 class="anchored" data-anchor-id="blend">Blend</h2>
<p>The last ggfx trick I want to mention is <code>with_blend()</code>. Blending filters compose two images together using a particular rule. For example, we could <code>"darken_intensity"</code> by selecting the darker of the two pixel values at each location. Or we could use a <code>"plus"</code> filter that just adds the pixel values together. Blending is a powerful technique and can be used to mimic the behaviour of other filters (e.g., a mask is really just a very particular type of blend). I‚Äôm not going to try to summarise all the different kinds of blend you can do. But I will point you to the <a href="https://ggfx.data-imaginist.com/reference/with_blend.html">documentation page for with_blend()</a>, which provides a pretty good place to start and has links to other resources you can follow up on.</p>
<p>Meanwhile, I‚Äôll give a simple example using an <code>"xor"</code> blend. I‚Äôll return to our flametree plot as the basis for this example. The <code>trunk</code> and <code>leaves</code> plot layers below define the flametree image in solid black colour:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">leaves <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb31-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> leaf, </span>
<span id="cb31-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(coord_x, coord_y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> seg_col),</span>
<span id="cb31-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb31-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb31-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb31-7">)</span>
<span id="cb31-8"></span>
<span id="cb31-9">trunk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bezier</span>(</span>
<span id="cb31-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> tree,</span>
<span id="cb31-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb31-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> coord_x, </span>
<span id="cb31-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> coord_y, </span>
<span id="cb31-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> seg_wid,</span>
<span id="cb31-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id_pathtree</span>
<span id="cb31-16">  ),</span>
<span id="cb31-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb31-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineend =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"round"</span></span>
<span id="cb31-19">)</span></code></pre></div>
</div>
<p>Next I‚Äôll create a <code>triangle</code> layer that is a solid black triangle on the lower right side of the image, but is otherwise empty:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">triangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_layer</span>(</span>
<span id="cb32-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb32-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), </span>
<span id="cb32-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb32-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb32-6">)</span></code></pre></div>
</div>
<p>Because these images are binary valued the exclusive-or <code>"xor"</code> filter is easy to visualise in this case. If a pixel is white in exactly <em>one</em> of the two inputs (the tree or the triangle), that pixel will also be white in the output. Otherwise that pixel will be transparent. That gives us this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guide =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>())</span>
<span id="cb33-7"></span>
<span id="cb33-8">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_group</span>(trunk, leaves, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tree"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_blend</span>(triangle, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tree"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blend_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xor"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/index_files/figure-html/blend-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="3000"></p>
</figure>
</div>
</div>
</div>
<div id="exercise-ggfx-blend" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>A script containing this code is included as the <code>ggfx-blend.R</code> file</p>
</div>
</div>
</section>
<section id="materials" class="level2">
<h2 class="anchored" data-anchor-id="materials">Materials</h2>
<p>Code for each of the source files referred to in this section of the workshop is included here. Click on the callout box below to see the code for the file you want to look at. Please keep in mind that (unlike the code in the main text) I haven‚Äôt modified these scripts since the original workshop, so you might need to play around with them to get them to work!</p>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="flametree-example.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
flametree-example.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb34-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb34-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb34-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggforce)</span>
<span id="cb34-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(flametree)</span>
<span id="cb34-6"></span>
<span id="cb34-7">tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flametree_grow</span>(</span>
<span id="cb34-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb34-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, </span>
<span id="cb34-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb34-11">)</span>
<span id="cb34-12"></span>
<span id="cb34-13">leaf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id_leaf <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb34-14"></span>
<span id="cb34-15">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb34-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb34-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb34-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span>
<span id="cb34-19"></span>
<span id="cb34-20">leaves <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb34-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(coord_x, coord_y),</span>
<span id="cb34-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> leaf, </span>
<span id="cb34-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>, </span>
<span id="cb34-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb34-25">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e38b75"</span></span>
<span id="cb34-26">)</span>
<span id="cb34-27"></span>
<span id="cb34-28">trunk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bezier</span>(</span>
<span id="cb34-29">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(coord_x, coord_y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id_pathtree, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> seg_wid),</span>
<span id="cb34-30">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> tree, </span>
<span id="cb34-31">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineend =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"round"</span>, </span>
<span id="cb34-32">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#555555"</span>,</span>
<span id="cb34-33">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb34-34">)</span>
<span id="cb34-35"></span>
<span id="cb34-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> trunk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> leaves)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="ggfx-blend.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
ggfx-blend.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb35-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggforce)</span>
<span id="cb35-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(flametree)</span>
<span id="cb35-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggfx)</span>
<span id="cb35-7"></span>
<span id="cb35-8">tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flametree_grow</span>(</span>
<span id="cb35-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb35-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, </span>
<span id="cb35-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb35-12">)</span>
<span id="cb35-13"></span>
<span id="cb35-14">leaf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id_leaf <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb35-15"></span>
<span id="cb35-16">leaves <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb35-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> leaf, </span>
<span id="cb35-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(coord_x, coord_y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> seg_col),</span>
<span id="cb35-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb35-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb35-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb35-22">)</span>
<span id="cb35-23"></span>
<span id="cb35-24">trunk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bezier</span>(</span>
<span id="cb35-25">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> tree,</span>
<span id="cb35-26">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb35-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> coord_x, </span>
<span id="cb35-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> coord_y, </span>
<span id="cb35-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> seg_wid,</span>
<span id="cb35-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id_pathtree</span>
<span id="cb35-31">  ),</span>
<span id="cb35-32">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb35-33">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineend =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"round"</span></span>
<span id="cb35-34">)</span>
<span id="cb35-35"></span>
<span id="cb35-36">polygon_layer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb35-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> fill, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha)</span>
<span id="cb35-38">}</span>
<span id="cb35-39"></span>
<span id="cb35-40">triangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_layer</span>(</span>
<span id="cb35-41">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb35-42">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), </span>
<span id="cb35-43">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb35-44">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb35-45">)</span>
<span id="cb35-46"></span>
<span id="cb35-47">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb35-48">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-49">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(</span>
<span id="cb35-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span></span>
<span id="cb35-51">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb35-52">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-53">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-54">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-55">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guide =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>())</span>
<span id="cb35-56"></span>
<span id="cb35-57"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb35-58">  base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-59">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_group</span>(trunk, leaves, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tree"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb35-60">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_blend</span>(triangle, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tree"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">blend_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xor"</span>)</span>
<span id="cb35-61">)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="ggfx-displace.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
ggfx-displace.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb36-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggfx)</span>
<span id="cb36-3"></span>
<span id="cb36-4">polygon_layer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb36-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> fill, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha)</span>
<span id="cb36-6">}</span>
<span id="cb36-7">poly1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_layer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb36-8">poly2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_layer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb36-9">poly3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_layer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb36-10">poly4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygon_layer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb36-11"></span>
<span id="cb36-12">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb36-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb36-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb36-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#333333"</span>))</span>
<span id="cb36-16"></span>
<span id="cb36-17">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb36-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ART"</span>), </span>
<span id="cb36-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, </span>
<span id="cb36-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, </span>
<span id="cb36-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontface =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb36-22">)</span>
<span id="cb36-23"></span>
<span id="cb36-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb36-25">  base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb36-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_group</span>(poly1, poly2, poly3, poly4, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polygons"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">include =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_reference</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polygons"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"displacement_map"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb36-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_displacement</span>(</span>
<span id="cb36-29">      text,</span>
<span id="cb36-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_map =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_alpha</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"displacement_map"</span>),</span>
<span id="cb36-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_map =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_alpha</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"displacement_map"</span>), </span>
<span id="cb36-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_scale =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,</span>
<span id="cb36-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_scale =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span></span>
<span id="cb36-34">    )</span>
<span id="cb36-35">)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="ggfx-dither.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
ggfx-dither.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb37-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb37-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggfx)</span>
<span id="cb37-5"></span>
<span id="cb37-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb37-7">polar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb37-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc_start =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb37-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arc_end =</span> arc_start <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb37-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb37-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), </span>
<span id="cb37-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb37-13">)</span>
<span id="cb37-14"></span>
<span id="cb37-15">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb37-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> polar, </span>
<span id="cb37-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb37-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> arc_start, </span>
<span id="cb37-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> radius,</span>
<span id="cb37-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> arc_end, </span>
<span id="cb37-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> radius, </span>
<span id="cb37-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shade, </span>
<span id="cb37-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size</span>
<span id="cb37-24">  )</span>
<span id="cb37-25">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb37-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clip =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oob =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>oob_keep) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oob =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>oob_keep) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb37-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_viridis_c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">option =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magma"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb37-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb37-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aaaaaa"</span>))</span>
<span id="cb37-34"></span>
<span id="cb37-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_halftone_dither</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>()))</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="ggfx-glow.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
ggfx-glow.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb38-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb38-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggforce)</span>
<span id="cb38-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(flametree)</span>
<span id="cb38-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggfx)</span>
<span id="cb38-7"></span>
<span id="cb38-8">tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flametree_grow</span>(</span>
<span id="cb38-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb38-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, </span>
<span id="cb38-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb38-12">)</span>
<span id="cb38-13"></span>
<span id="cb38-14">leaf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id_leaf <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb38-15"></span>
<span id="cb38-16">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb38-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb38-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb38-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span>
<span id="cb38-20"></span>
<span id="cb38-21">leaves <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb38-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(coord_x, coord_y),</span>
<span id="cb38-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> leaf, </span>
<span id="cb38-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>, </span>
<span id="cb38-25">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb38-26">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e38b75"</span></span>
<span id="cb38-27">)</span>
<span id="cb38-28"></span>
<span id="cb38-29">trunk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bezier</span>(</span>
<span id="cb38-30">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(coord_x, coord_y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id_pathtree, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> seg_wid),</span>
<span id="cb38-31">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> tree, </span>
<span id="cb38-32">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineend =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"round"</span>, </span>
<span id="cb38-33">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#555555"</span>,</span>
<span id="cb38-34">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb38-35">)</span>
<span id="cb38-36"></span>
<span id="cb38-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb38-38">  base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>   </span>
<span id="cb38-39">    trunk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb38-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_outer_glow</span>(leaves, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#555555"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb38-41">)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="ggfx-mask.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
ggfx-mask.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb39-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb39-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb39-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggfx)</span>
<span id="cb39-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb39-6"></span>
<span id="cb39-7">texture <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(</span>
<span id="cb39-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> paint),</span>
<span id="cb39-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb39-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),</span>
<span id="cb39-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb39-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb39-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb39-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>),</span>
<span id="cb39-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>),</span>
<span id="cb39-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>),</span>
<span id="cb39-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> lf_noise <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mf_noise <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> hf_noise</span>
<span id="cb39-18">    )</span>
<span id="cb39-19">)</span>
<span id="cb39-20"></span>
<span id="cb39-21">hex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi))</span>
<span id="cb39-22">mask <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y), hex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb39-23"></span>
<span id="cb39-24">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb39-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb39-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb39-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb39-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb39-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(</span>
<span id="cb39-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e83e8c"</span>), </span>
<span id="cb39-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guide =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()</span>
<span id="cb39-32">  )</span>
<span id="cb39-33"></span>
<span id="cb39-34">border <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y), hex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb39-35"></span>
<span id="cb39-36">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb39-37">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> text), </span>
<span id="cb39-38">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dat =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ART"</span>), </span>
<span id="cb39-39">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>,</span>
<span id="cb39-40">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, </span>
<span id="cb39-41">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontface =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb39-42">) </span>
<span id="cb39-43"></span>
<span id="cb39-44"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb39-45">  base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb39-46">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_group</span>(texture, text, border, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb39-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_reference</span>(mask, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mask"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb39-48">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_mask</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mask"</span>)</span>
<span id="cb39-49">)</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Art from Code {VII:} {Pixel} Filters},
  date = {2024-12-24},
  url = {https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>‚ÄúArt from Code VII: Pixel
Filters.‚Äù</span> December 24, 2024. <a href="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/">https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/</guid>
  <pubDate>Mon, 23 Dec 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-12-24_art-from-code-7/tree.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Art from code VI: Tiles and tessellations</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><em>A couple of years ago I gave an invited workshop called <a href="https://art-from-code.netlify.app">art from code</a> at the 2022 rstudio::conf (now posit::conf) conference. As part of the workshop I wrote a lengthy series of notes on how to make generative art using R, all of which were released under a CC-BY licence. For a while now I‚Äôd been thinking I should do something with these notes. I considered writing a book, but in all honesty I don‚Äôt have the spare capacity for a side-project of that scale these days. I can barely keep up with the workload at my day job as it is. So instead, I‚Äôve decided that I‚Äôd port them over to this site as a series of blog posts. In doing so I‚Äôve made a deliberate decision not to modify the original content too much (nobody loves it when an artist tries to ‚Äúimprove‚Äù the original, after all). All I‚Äôve done is update the code to accommodate package changes since 2022, and some minor edits so that the images are legible when embedded in this blog (which is light-themed, and the original was dark-theme). Other than that, I‚Äôve left it alone. This is the sixth post in that series.</em></p>
<ul>
<li><a href="../../posts/2024-12-18_art-from-code-1/">Prelude</a></li>
<li><a href="../../posts/2024-12-19_art-from-code-2/">Spatial tricks with ambient</a></li>
<li><a href="../../posts/2024-12-20_art-from-code-3/">Polygon tricks</a></li>
<li><a href="../../posts/2024-12-21_art-from-code-4/">Shading tricks</a></li>
<li><a href="../../posts/2024-12-22_art-from-code-5/">Iterated function systems</a></li>
<li><a href="../../posts/2024-12-23_art-from-code-6/">Tiles and tessellations</a></li>
<li><a href="../../posts/2024-12-24_art-from-code-7/">Pixel filters</a></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggforce)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(deldir)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(voronoise)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(truchet)</span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sf)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb2-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-4">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb2-5">}</span></code></pre></div>
</div>
<section id="rectangle-subdivision" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="rectangle-subdivision">Rectangle subdivision</h2>
<p>One of my favourite generative artists in the R community is <a href="https://ijeamaka-anyene.netlify.app/">Ijeamaka Anyene</a>, partly because she‚Äôs fabulous but also partly because her approach is so different to mine and she makes things I‚Äôd never think to try. She has a talent for designing colourful pieces in a minimalist, geometric style. Minimalism in art is not something I‚Äôm good at: I have a habit of overcomplicating my pieces! However, in this first section I‚Äôm going to resist the temptation to add complexity, and build a system inspired by Ijeamaka‚Äôs recursive rectangle subdivision art. She has a <a href="https://ijeamaka-anyene.netlify.app/posts/2021-09-07-so-you-want-to-subdivide-a-rectangle/">blog post</a> on her approach, by the way.</p>
<p>Recursive rectangle subdivisions come up a lot in real life. Suppose you have a parcel of land and want to divide it in two parts A and B. In doing so you create a boundary. Later, land unit A wants to divide: this adds a new boundary, splitting A into A1 and A2, but leaving unit B untouched. If this process repeats often enough, you end up with subdivisions that have a very recognisable structure. Here‚Äôs a subdivision depicting a <a href="https://picryl.com/media/wpa-land-use-survey-map-for-the-city-of-los-angeles-book-3-san-fernando-valley-00c11b">1939 land use survey map for a part of the San Fernando valley in Los Angeles</a></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/wpa-land-use-survey-map.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="512"></p>
</figure>
</div>
</div>
</div>
<p>Let‚Äôs design a generative art system that mimics this process. Suppose we have some data frame <code>blocks</code> where each row represents one rectangular block, and one of the columns it stores is the <code>area</code> of that rectangle. Now imagine that our subdivision process deliberately targets larger blocks: the probability of choosing the a block for subdivision is proportional to its area. The <code>choose_rectangle()</code> function below takes the <code>blocks</code> data frame as input, and randomly selects a row with probability proportional to <code>blocks$area</code>. It returns the row number for the selected rectangle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">choose_rectangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(blocks) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(blocks), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> blocks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>area)</span>
<span id="cb3-3">}</span></code></pre></div>
</div>
<p>For this system we assume that you can only subdivide a rectangle in one of two ways: horizontally, or vertically. We aren‚Äôt going to allow diagonal lines or anything that would produce other kinds of polygons. The input to a subdivision is a rectangle, and the output should be two rectangles.</p>
<p>If we‚Äôre going to do that, we need to select a ‚Äúbreak point‚Äù. The <code>choose_break()</code> function will do that for us. It takes a <code>lower</code> and <code>upper</code> value as input, and returns a value (expressed as the distance from the <code>lower</code> boundary) specifying where the break is inserted:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">choose_break <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(lower, upper) {</span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>((upper <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lower) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-3">}</span></code></pre></div>
</div>
<p>Notice that I‚Äôve called <code>round()</code> here to ensure that the outputs will always be integer value. As a consequence, all of our subdivisions will line up on a grid of some kind: that comes in handy later if, for example, we want to plot the result as a bitmap or a raster object.</p>
<p>Next, we need a function that can subdivide a rectangle! For the moment, let‚Äôs assume that we‚Äôre splitting horizontally, so in a moment we‚Äôll write a function called <code>split_rectangle_x()</code> to do this for us. It‚Äôs going to take a <code>rectangle</code> as the main argument, which is presumably going to be a tibble that contains columns that define a rectangle. To make life a little simpler, here‚Äôs a convenience function <code>create_rectangles()</code> that creates this tibble for us:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">create_rectangles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(left, right, bottom, top, value) {</span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">left =</span> left,</span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">right =</span> right,</span>
<span id="cb5-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bottom =</span> bottom,</span>
<span id="cb5-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top =</span> top,</span>
<span id="cb5-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> right <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> left,</span>
<span id="cb5-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> top <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bottom,</span>
<span id="cb5-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">area =</span> width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> height,</span>
<span id="cb5-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> value</span>
<span id="cb5-11">  )</span>
<span id="cb5-12">}</span></code></pre></div>
</div>
<p>Note that this function can create multiple rectangles. It doesn‚Äôt check to see if the rectangles overlap, though. If I wanted to write rigorous code I would probably prevent it from allowing rectangles to overlap, but I‚Äôm not being super rigorous here. It‚Äôs not production code!</p>
<p>Anyway, here are a couple of rectangles that represent a vertical split, where one of them sits above the other:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">rect <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">left =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">right =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bottom =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), </span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb6-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-7">)</span>
<span id="cb6-8">rect</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 8
   left right bottom   top width height  area value
  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;
1     1    10      1     4     9      3    27     1
2     1    10      4    10     9      6    54     2</code></pre>
</div>
</div>
<p>Now we can write our horizontal subdivision function, <code>split_rectangle_x()</code>, and it‚Äôs vertical counterpart <code>split_rectangle_y()</code>. Each of these takes a single <code>rectangle</code> as input, calls <code>choose_break()</code> to determine where the break point should be, and then creates two new rectangles that will replace the old one. When called, they‚Äôll automatically recalculate the width, height, and areas for both rectangles. The <code>value</code> of the first rectangle (the one to the left or on the lower side) remains unchanged, and and the <code>new_value</code> argument is used to assign a value to the second rectangle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">split_rectangle_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, new_value) {</span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(rectangle, {</span>
<span id="cb8-3">    split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_break</span>(left, right)</span>
<span id="cb8-4">    new_left  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(left, left <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split)</span>
<span id="cb8-5">    new_right <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(left <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split, right)</span>
<span id="cb8-6">    new_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(value, new_value)</span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(new_left, new_right, bottom, top, new_value)</span>
<span id="cb8-8">  })</span>
<span id="cb8-9">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">split_rectangle_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, new_value) {</span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(rectangle, {</span>
<span id="cb9-3">    split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_break</span>(bottom, top)</span>
<span id="cb9-4">    new_bottom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(bottom, bottom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split)</span>
<span id="cb9-5">    new_top <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(bottom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split, top)</span>
<span id="cb9-6">    new_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(value, new_value)</span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(left, right, new_bottom, new_top, new_value)</span>
<span id="cb9-8">  })</span>
<span id="cb9-9">}</span></code></pre></div>
</div>
<p>While we are here, we can write a <code>split_rectangle()</code> function that randomly decides whether to split horizontally or vertically, and then calls the relevant function to do the splitting:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">split_rectangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, value) {</span>
<span id="cb10-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle_x</span>(rectangle, value))</span>
<span id="cb10-4">  }</span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle_y</span>(rectangle, value)</span>
<span id="cb10-6">}</span></code></pre></div>
</div>
<p>Here it is in action:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rectangle =</span> rect[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 8
   left right bottom   top width height  area value
  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1     1     4      1     4     3      3     9     1
2     4    10      1     4     6      3    18     3</code></pre>
</div>
</div>
<p>Notice that it is possible to create a block with zero area. That‚Äôs okay: that block will never be selected for later subdivision. We could filter out all zero-area rectangles if we wanted to, but I‚Äôm too lazy to bother!</p>
<p>Now we are in a position to define a function called <code>split_block()</code> that takes <code>block</code>, a tibble of one or more rectangles as input, selects one to be subdivided using <code>choose_rectangle()</code>, and then splits it with <code>split_rectangle()</code>. The old, now-subdivided rectangle is removed from the <code>block</code>, the two new ones are added, and the updated block of rectangles is returned:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">split_block <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(blocks, value) {</span>
<span id="cb13-2">  old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_rectangle</span>(blocks) </span>
<span id="cb13-3">  new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle</span>(blocks[old, ], value)</span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(blocks[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>old, ], new)</span>
<span id="cb13-5">}</span></code></pre></div>
</div>
<p>Here it is at work:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_block</span>(rect, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 8
   left right bottom   top width height  area value
  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1     1    10      1     4     9      3    27     1
2     1    10      4     5     9      1     9     2
3     1    10      5    10     9      5    45     3</code></pre>
</div>
</div>
<p>Now that we have a <code>create_rectangles()</code> function that can generate a new rectangle and a <code>split_block()</code> function that can pick one rectangle and split it, we can write <code>subdivision()</code> function quite succinctly. We repeatedly apply the <code>split_block()</code> function until it has created enough splits for us. I could write this as a loop, but it feels more elegant to me to use the <code>reduce()</code> function from the purrr package to do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">subdivision <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb16-2">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb16-3">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, </span>
<span id="cb16-4">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb16-5">  </span>
<span id="cb16-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb16-7">  blocks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(</span>
<span id="cb16-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">left =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">right =</span> ncol, </span>
<span id="cb16-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bottom =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb16-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top =</span> nrow, </span>
<span id="cb16-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb16-13">  )</span>
<span id="cb16-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nsplits, split_block, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> blocks)</span>
<span id="cb16-15">}</span>
<span id="cb16-16"></span>
<span id="cb16-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subdivision</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 √ó 8
   left right bottom   top width height   area value
  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
1     1  1000    661  1000   999    339 338661     1
2     1   207      1   661   206    660 135960     0
3   207  1000    255   661   793    406 321958     3
4   207   776      1   255   569    254 144526     2
5   776   950      1   255   174    254  44196     4
6   950  1000      1   255    50    254  12700     5</code></pre>
</div>
</div>
<p>As you can see, in this version of the system I‚Äôve arranged it so that the <code>value</code> column represents the iteration number upon which the corresponding rectangle was created.</p>
<p>Finally we get to the part where we make art! The <code>develop()</code> function below uses <code>geom_rect()</code> to draw the rectangles, mapping the <code>value</code> to the fill aesthetic:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">develop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(div, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb18-2">  </span>
<span id="cb18-3">  div <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb18-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> left, </span>
<span id="cb18-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> right, </span>
<span id="cb18-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> bottom, </span>
<span id="cb18-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> top,</span>
<span id="cb18-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> value</span>
<span id="cb18-10">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rect</span>(</span>
<span id="cb18-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>, </span>
<span id="cb18-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb18-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb18-15">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(</span>
<span id="cb18-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed)</span>
<span id="cb18-18">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb18-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(</span>
<span id="cb18-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span></span>
<span id="cb18-24">      )</span>
<span id="cb18-25">    ) </span>
<span id="cb18-26">}</span>
<span id="cb18-27"></span>
<span id="cb18-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subdivision</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">develop</span>() </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/rectangle-subdivision-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>The uneven spacing here is not accidental. Because the rectangles are plotted with a thick white border, and plotted against a white background, very thin rectangles are invisible. That leads to a slightly irregular pattern among the visible rectangles. I quite like it!</p>
<p>Here are a few more outputs from the system:</p>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subdivision</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">develop</span>()</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subdivision</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">develop</span>()</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subdivision</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">develop</span>()</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/subdivision-extras-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/subdivision-extras-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/subdivision-extras-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="exercise-subdivision" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>subdivision.R</code> script in the materials</p>
</div>
</div>
</section>
<section id="mosaica" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="mosaica">Mosaica</h2>
<p>Remember earlier when I said I have this compulsive tendency to make my generative art systems unnecessarily elaborate? I was not lying. Now that I‚Äôve created this simple and clean <code>subdivision()</code> system my first instinct is to use it as the basis for something more complicated. The <code>fill_rectangle()</code> function below takes a single rectangle as input, divides it into a grid of squares with edge length 1, and then assigns each of those squares a <code>fill</code> value generated with a randomly sampled fractal (using the ambient package to do the work):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">fill_rectangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(left, right, bottom, top, width, </span>
<span id="cb20-2">                           height, area, value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nshades =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb20-3">  </span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(value)</span>
<span id="cb20-5">  fractals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(billow, fbm, ridged)</span>
<span id="cb20-6">  generators <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(gen_simplex, gen_perlin, gen_worley)</span>
<span id="cb20-7">  </span>
<span id="cb20-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb20-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> left<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>right, </span>
<span id="cb20-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bottom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>top, </span>
<span id="cb20-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb20-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb20-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb20-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb20-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(generators, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]],</span>
<span id="cb20-17">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(fractals, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]],</span>
<span id="cb20-18">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb20-19">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb20-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance2"</span></span>
<span id="cb20-21">      ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nshades)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb20-23">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>()</span>
<span id="cb20-24">    )</span>
<span id="cb20-25">}</span></code></pre></div>
</div>
<p>I‚Äôll also write a <code>draw_mosaic()</code> function that plots a collection of these unit-square sized tiles:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">draw_mosaic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, palette) {</span>
<span id="cb21-2">  background <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(palette, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-3">  dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> fill)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_tile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> background, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> background)) </span>
<span id="cb21-14">}</span></code></pre></div>
</div>
<p>When combined with the original <code>subdivision()</code> function I can now write a generative art system called <code>mosaica()</code> that uses <code>subdivision()</code> to partition a grid into rectangular units, then applies <code>fill_rectangle()</code> to separate each of these rectangles into unit squares and fill each of these squares with a colour based on a spatial noise pattern generated using ambient. Then it draws a picture:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">mosaica <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, </span>
<span id="cb22-2">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, </span>
<span id="cb22-3">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb22-4">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb22-5">  </span>
<span id="cb22-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subdivision</span>(ncol, nrow, nsplits, seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(fill_rectangle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb22-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">995</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(fill)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw_mosaic</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed))</span>
<span id="cb22-11">}</span>
<span id="cb22-12"></span>
<span id="cb22-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mosaica</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1302</span>)</span></code></pre></div>
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/mosaica-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-screen-inset" width="6000"></p>
</figure>
</div>
</div>
</div>
<p>It makes me happy :)</p>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mosaica</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1977</span>)</span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mosaica</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>)</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mosaica</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1969</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/mosaica-extras-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/mosaica-extras-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/mosaica-extras-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mosaica</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mosaica</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mosaica</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/even-more-mosaica-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/even-more-mosaica-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/even-more-mosaica-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="exercise-mosaica" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>mosaica.R</code> script in the materials.</p>
</div>
</div>
</section>
<section id="voronoi-tesselation" class="level2">
<h2 class="anchored" data-anchor-id="voronoi-tesselation">Voronoi tesselation</h2>
<p>Let‚Äôs switch gears a little. So far we‚Äôve only looked at rectangular tilings, but there are many other ways to tile a two dimensional plane. One method for constructing an irregular tiling ‚Äì one that generative artists are especially fond of ‚Äì is to generate a collection of points and then computing the <a href="https://en.wikipedia.org/wiki/Voronoi_diagram">Voronoi tesselation</a> (also known as a Voronoi diagram) of those points. Wikipedia definitions are, once again, helpful:</p>
<blockquote class="blockquote">
<p>A Voronoi diagram is a partition of a plane into regions close to each of a given set of objects. In the simplest case, these objects are just finitely many points in the plane (called seeds, sites, or generators). For each seed there is a corresponding region, called a Voronoi cell, consisting of all points of the plane closer to that seed than to any other.</p>
</blockquote>
<p>Extremely conveniently for our purposes, the ggforce package provides two handy geom functions ‚Äì <code>geom_voronoi_segment()</code> and <code>geom_voronoi_tile()</code> ‚Äì that plot the Voronoi tesselation for a set of points. All you have to do as the user is specify the <code>x</code> and <code>y</code> aesthetics (corresponding to the coordinate values of the points), and ggplot2 will do all the work for you. Let‚Äôs see what we can do using these tools!</p>
<p>In the beginning there were points‚Ä¶</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">61</span>)</span>
<span id="cb25-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb25-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb25-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb25-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">val =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb25-6">)</span>
<span id="cb25-7"></span>
<span id="cb25-8">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> val)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb25-12"></span>
<span id="cb25-13">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-points-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>The points themselves are not very artistically impressive, but we can make something more interesting if we add the Voronoi tesselation. The minimal way to do this is with <code>geom_voronoi_segment()</code></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_segment</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-segments-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>We can already see the beginnings of something pleasing. I mean, if I‚Äôm being honest this is already quite pretty in a minimalist way but ‚Äì as I keep saying ‚Äì I have an urge to tinker and see what elaborations we can add. First, let‚Äôs switch from <code>geom_voronoi_segment()</code> to <code>geom_voronoi_tile()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-tiles-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Setting the <code>max.radius</code> argument prevents any tile extending beyond a fixed distance from the point generating the tile, giving the image as a whole a ‚Äúbubbly‚Äù look:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb28-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-tiles-max-size-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Hm. Those sharp corners between tiles aren‚Äôt the prettiest thing I‚Äôve ever seen. Let‚Äôs round those corners a little bit, shall we? The <code>radius</code> argument lets us do that:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-tiles-round-corners-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Next, let‚Äôs shrink all the tiles a tiny bit to create small gaps between adjacent tiles:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(</span>
<span id="cb30-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb30-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>,</span>
<span id="cb30-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span></span>
<span id="cb30-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb30-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-tiles-shrink-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Let‚Äôs remove the points themselves, leaving only the rounded tiles:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(</span>
<span id="cb31-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb31-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>,</span>
<span id="cb31-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span></span>
<span id="cb31-6">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-tiles-only-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Finally, we‚Äôll create another tiling and use it as a background texture:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">bg_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb32-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb32-4">)</span>
<span id="cb32-5">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb32-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(</span>
<span id="cb32-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> bg_dat,</span>
<span id="cb32-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#333333"</span>, </span>
<span id="cb32-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb32-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0025</span></span>
<span id="cb32-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(</span>
<span id="cb32-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, </span>
<span id="cb32-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb32-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>,</span>
<span id="cb32-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span></span>
<span id="cb32-17">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-tiles-double-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<div id="exercise-voronoi-tiles" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>A script reproducing this piece is included in the <code>voronoi-tiles.R</code> file in the materials.</p>
</div>
</div>
</section>
<section id="voronoi-baroque-part-i" class="level2">
<h2 class="anchored" data-anchor-id="voronoi-baroque-part-i">Voronoi baroque: Part I</h2>
<p>When I first started playing around with Voronoi tesselations the pieces I made looked a lot like the worked example: the <a href="https://art.djnavarro.net/gallery/voronoise/">Voronoise</a> series I posted on my art site contains pieces that look like the one above, generated from random collections of points. What I started realising a little later is that if you feed a structured set of points into your Voronoi tesselations, you can create some very elaborate patterns. I‚Äôve played around with this idea in a few series (my favourite so far is <a href="https://art.djnavarro.net/gallery/sadists-kiss/">Sadists Kiss</a>).</p>
<p>I‚Äôll illustrate the approach by reusing an earlier system. The <code>unboxy()</code> function shown below reimplements the ‚Äúunboxing‚Äù system that I talked about in the section on iterated function systems:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">unboxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(iterations, layers) {</span>
<span id="cb33-2">  </span>
<span id="cb33-3">  coeffs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(</span>
<span id="cb33-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb33-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, layers)</span>
<span id="cb33-6">  )</span>
<span id="cb33-7">  </span>
<span id="cb33-8">  point0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb33-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb33-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb33-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb33-12">  )</span>
<span id="cb33-13">  </span>
<span id="cb33-14">  funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb33-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb33-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point),</span>
<span id="cb33-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point)</span>
<span id="cb33-18">  )</span>
<span id="cb33-19">  </span>
<span id="cb33-20">  update <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point, t) {</span>
<span id="cb33-21">    l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(layers, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb33-22">    f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(funs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb33-23">    z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb33-24">    point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb33-25">    point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> coeffs[,,l])</span>
<span id="cb33-26">    point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb33-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(point)</span>
<span id="cb33-28">  }</span>
<span id="cb33-29">  </span>
<span id="cb33-30">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations, update, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> point0)</span>
<span id="cb33-31">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(points), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb33-32">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(points)) </span>
<span id="cb33-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(points) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"val"</span>)</span>
<span id="cb33-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(points)</span>
<span id="cb33-35">}</span></code></pre></div>
</div>
<p>I‚Äôm not going to explain the inner workings of this function here (because they‚Äôre already discussed elsewhere), but in case you need a refresher or haven‚Äôt read the relevant page, here‚Äôs a look at the kinds of data this function produces, and a scatterplot showing the very non-random spatial patterns it generates:</p>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb34-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxy</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb34-3"></span>
<span id="cb34-4">dat</span>
<span id="cb34-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb34-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb34-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell quarto-layout-panel" data-layout-ncol="2" data-layout-align="center">
<div class="quarto-layout-row">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<pre><code># A tibble: 1,001 √ó 3
        x       y     val
    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
 1  0.579  0.236   0.666 
 2 -1.95   0.935  -0.0757
 3 -0.884  1.09    0.672 
 4 -0.929  2.04    0.401 
 5  0.861  1.44    2.01  
 6  0.404  1.29    1.46  
 7  0.826  0.834  -0.909 
 8  0.999 -2.00    1.94  
 9  0.850  0.0301  1.61  
10 -1.80   1.38   -0.381 
# ‚Ñπ 991 more rows</code></pre>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/scatterplot-boxy-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Now let‚Äôs plot the Voronoi tesselation corresponding to these points, once again relying on our old friend <code>sample_canva2()</code> to generate the palette:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> val)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb36-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb36-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb36-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb36-7"></span>
<span id="cb36-8">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(</span>
<span id="cb36-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>,</span>
<span id="cb36-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb36-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb36-13">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-boxy-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Rounding the corners and expanding the tiles gives the piece a different feel‚Ä¶</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(</span>
<span id="cb37-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb37-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb37-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>,</span>
<span id="cb37-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb37-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb37-8">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-boxy-2-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>So does this‚Ä¶</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(</span>
<span id="cb38-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb38-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb38-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0001</span>,</span>
<span id="cb38-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>,</span>
<span id="cb38-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb38-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb38-9">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-boxy-3-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>The possibilities are surprisingly rich, and quite a lot of fun to play around with!</p>
<div id="exercise-voronoi-unbox" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>A script containing code for this system is included in the materials, as the <code>voronoi-unbox.R</code> file.</p>
</div>
</div>
</section>
<section id="voronoi-baroque-part-ii" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="voronoi-baroque-part-ii">Voronoi baroque: Part II</h2>
<p>Okay, I need to confess something. Voronoi tiling art was the thing that finally pushed me to learn the <a href="https://ggplot2.tidyverse.org/articles/extending-ggplot2.html">ggproto object oriented programming system</a> used by ggplot2. It‚Äôs not because I‚Äôm a masochist and enjoy the pain of learning an OOP system that isn‚Äôt used for anything except ggplot2. No-one is that much of a masochist, surely. No, it was because I wanted the ability to intercept and modify the Voronoi tiles during the plot construction process. Because‚Ä¶ yeah, I don‚Äôt even remember why I wanted that. Evil reasons, probably.</p>
<p>Enter stage left, the <a href="https://voronoise.djnavarro.net/">voronoise package</a>. It‚Äôs not on CRAN ‚Äì because I can‚Äôt think of a single good reason to send it to CRAN ‚Äì but you can install it from GitHub with</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"djnavarro/voronoise"</span>)</span></code></pre></div>
<p>The voronoise package only does one thing: it supplies <code>geom_voronoise()</code>, a geom that behaves just like <code>geom_voronoi_tile()</code> except for the fact you can pass it a ‚Äúperturbing function‚Äù that modifies the tiles. Annoyingly ‚Äì because I was not a very good software developer at the time and I was not thinking about what someone else (i.e., future me) would use it for later ‚Äì the default arguments to <code>geom_voronoise()</code> aren‚Äôt the same as the defaults for <code>geom_voronoi_tile()</code>, which means it‚Äôs a good idea to explicitly specify things like <code>max.radius</code> etc even if you‚Äôre ‚Äújust going to use the defaults‚Äù. Sorry. That was my mistake. I cannot stress enough that <strong>voronoise is not a good package</strong>. But‚Ä¶ it‚Äôll do for my purposes today.</p>
<p>Here‚Äôs a simple example where the <code>perturb</code> argument is used to shift all the tiles to the right by a random offset:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>( <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># original tiling in grey</span></span>
<span id="cb40-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb40-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb40-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0001</span>,</span>
<span id="cb40-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#444444"</span>,</span>
<span id="cb40-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>,</span>
<span id="cb40-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb40-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb40-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-11">  voronoise<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoise</span>( <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># perturbed tiling</span></span>
<span id="cb40-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb40-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb40-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0002</span>,</span>
<span id="cb40-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perturb =</span> \(data) data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb40-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb40-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), </span>
<span id="cb40-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb40-19">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/geom-voronoise-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>That‚Äôs kind of neat. Another approach I‚Äôve been fond of in the past is to use something like this <code>sift()</code> function, which computes a crude approximation to the area of each tile and perturbs only those tiles smaller than a certain size:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">sift <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb41-2">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb41-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tilesize =</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(y)),</span>
<span id="cb41-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(tilesize <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>, x, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), </span>
<span id="cb41-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(tilesize <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>, y, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb41-8">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb41-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data)</span>
<span id="cb41-11">}</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">voronoi_baroque <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb42-2">    seed, </span>
<span id="cb42-3">    perturb, </span>
<span id="cb42-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, </span>
<span id="cb42-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb42-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb42-7">    ...</span>
<span id="cb42-8">) {</span>
<span id="cb42-9">  </span>
<span id="cb42-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb42-11">  </span>
<span id="cb42-12">  blank <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> val)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.75</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.75</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_alpha_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb42-20">  </span>
<span id="cb42-21">  blank <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoise</span>(</span>
<span id="cb42-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxy</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb42-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perturb =</span> perturb,</span>
<span id="cb42-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> max.radius,</span>
<span id="cb42-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> radius,</span>
<span id="cb42-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> expand,</span>
<span id="cb42-28">      ...,</span>
<span id="cb42-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb42-30">    )</span>
<span id="cb42-31">}</span></code></pre></div>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">voronoi_baroque</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>, sift)</span>
<span id="cb43-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">voronoi_baroque</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>, sift)</span>
<span id="cb43-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">voronoi_baroque</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2468</span>, sift)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-baroque-sift-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-baroque-sift-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-baroque-sift-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>The fun thing about <code>voronoi_baroque()</code> is that you can write whatever perturbation function you like‚Ä¶ up to a point, of course. I cannot stress enough that the voronoise package is not particularly reliable!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">shake <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb44-2">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb44-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb44-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb44-7">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb44-9">}</span></code></pre></div>
</div>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">voronoi_baroque</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, shake)</span>
<span id="cb45-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">voronoi_baroque</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>, shake)</span>
<span id="cb45-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">voronoi_baroque</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, shake)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-baroque-shake-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-baroque-shake-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/voronoi-baroque-shake-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="exercise-voronoi-baroque" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>voronoi-baroque.R</code> script in the materials.</p>
</div>
</div>
</section>
<section id="truchet-tiles" class="level2">
<h2 class="anchored" data-anchor-id="truchet-tiles">Truchet tiles</h2>
<p>One final topic to mention before I wrap this one up: <a href="https://en.wikipedia.org/wiki/Truchet_tiles">truchet tiles</a>. Truchet tiles are square tiles decorated with asymmetric patterns, designed so that whenever you lay them out randomly, the patterns will connect up in aesthetically pleasing ways. To be honest, I‚Äôve not explore them much myself but Antonio P√°ez has written the <a href="https://paezha.github.io/truchet/">truchet package</a> that you can use to play with these. It‚Äôs not currently on CRAN, but you can install from GitHub with:</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"paezha/truchet"</span>)</span></code></pre></div>
<p>The basic idea in the truchet package is to represent the patterns compactly as a geometry column. If you‚Äôre familiar with the <a href="https://r-spatial.github.io/sf/">sf package</a> this sort of output will be familiar to you:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb47-2">mosaic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_truchet_ms</span>(</span>
<span id="cb47-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tiles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ane"</span>), </span>
<span id="cb47-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p1 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale 1 </span></span>
<span id="cb47-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p2 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale 2</span></span>
<span id="cb47-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p3 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale 3</span></span>
<span id="cb47-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),</span>
<span id="cb47-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb47-9">)</span>
<span id="cb47-10">mosaic</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simple feature collection with 797 features and 1 field
Geometry type: GEOMETRY
Dimension:     XY
Bounding box:  xmin: 0.1666667 ymin: 0.1666667 xmax: 6.833333 ymax: 6.833333
CRS:           NA
First 10 features:
   color                       geometry
1      1 MULTIPOLYGON (((0.8292294 5...
2      2 POLYGON ((0.4956387 6.16655...
3      2 POLYGON ((0.8340757 5.53053...
4      1 MULTIPOLYGON (((2.829229 2....
5      2 POLYGON ((2.495639 3.166552...
6      2 POLYGON ((2.834076 2.530531...
7      1 MULTIPOLYGON (((1.829229 2....
8      2 MULTIPOLYGON (((2.164615 2....
9      1 POLYGON ((2.5 1.166667, 2.4...
10     2 POLYGON ((2.833333 0.5, 2.8...</code></pre>
</div>
</div>
<p>If you‚Äôre not familiar, the key things to note are that the <code>geometry</code> column stores the pattern as a polygon (or collection of polygons), and that <code>geom_sf()</code> understands this geometry column. So you can use code like this to plot your truchet tiling:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">mosaic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> color)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/first-truchet-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>In this example you‚Äôll notice that I don‚Äôt actually specify a mapping for <code>geometry</code>. That‚Äôs a little unusual for ggplot2, but it is standard to name the column containing a ‚Äúsimple features geometry‚Äù as <code>geometry</code>, so <code>geom_sf()</code> will look for a column by that name.</p>
<p>That‚Äôs about all I wanted to mention about the truchet package. It makes pretty things and you can check out the package website for more information :)</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb50-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_truchet_ss</span>(</span>
<span id="cb50-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tiles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb50-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"silk_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"silk_2"</span>, </span>
<span id="cb50-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rainbow_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rainbow_2"</span>,</span>
<span id="cb50-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cloud_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cloud_2"</span></span>
<span id="cb50-7">  ),</span>
<span id="cb50-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>),</span>
<span id="cb50-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb50-10">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb50-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb50-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb50-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb50-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/index_files/figure-html/second-truchet-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="2700"></p>
</figure>
</div>
</div>
</div>
<div id="exercise-truchet" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Example code for truchet tiles is included in the <code>truchet-example.R</code> script below.</p>
</div>
</div>
</section>
<section id="materials" class="level2">
<h2 class="anchored" data-anchor-id="materials">Materials</h2>
<p>Code for each of the source files referred to in this section of the workshop is included here. Click on the callout box below to see the code for the file you want to look at. Please keep in mind that (unlike the code in the main text) I haven‚Äôt modified these scripts since the original workshop, so you might need to play around with them to get them to work!</p>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="mosaica.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
mosaica.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb51-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb51-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb51-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb51-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb51-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb51-7"></span>
<span id="cb51-8">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb51-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb51-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-11">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb51-12">}</span>
<span id="cb51-13"></span>
<span id="cb51-14">choose_rectangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(blocks) {</span>
<span id="cb51-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(blocks), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> blocks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>area)</span>
<span id="cb51-16">}</span>
<span id="cb51-17"></span>
<span id="cb51-18">choose_break <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(lower, upper) {</span>
<span id="cb51-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>((upper <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lower) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb51-20">}</span>
<span id="cb51-21"></span>
<span id="cb51-22">create_rectangles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(left, right, bottom, top, value) {</span>
<span id="cb51-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb51-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">left =</span> left,</span>
<span id="cb51-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">right =</span> right,</span>
<span id="cb51-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bottom =</span> bottom,</span>
<span id="cb51-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top =</span> top,</span>
<span id="cb51-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> right <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> left,</span>
<span id="cb51-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> top <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bottom,</span>
<span id="cb51-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">area =</span> width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> height,</span>
<span id="cb51-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> value</span>
<span id="cb51-32">  )</span>
<span id="cb51-33">}</span>
<span id="cb51-34"></span>
<span id="cb51-35">split_rectangle_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, new_value) {</span>
<span id="cb51-36">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(rectangle, {</span>
<span id="cb51-37">    split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_break</span>(left, right)</span>
<span id="cb51-38">    new_left  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(left, left <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split)</span>
<span id="cb51-39">    new_right <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(left <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split, right)</span>
<span id="cb51-40">    new_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(value, new_value)</span>
<span id="cb51-41">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(new_left, new_right, bottom, top, new_value)</span>
<span id="cb51-42">  })</span>
<span id="cb51-43">}</span>
<span id="cb51-44"></span>
<span id="cb51-45">split_rectangle_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, new_value) {</span>
<span id="cb51-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(rectangle, {</span>
<span id="cb51-47">    split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_break</span>(bottom, top)</span>
<span id="cb51-48">    new_bottom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(bottom, bottom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split)</span>
<span id="cb51-49">    new_top <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(bottom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split, top)</span>
<span id="cb51-50">    new_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(value, new_value)</span>
<span id="cb51-51">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(left, right, new_bottom, new_top, new_value)</span>
<span id="cb51-52">  })</span>
<span id="cb51-53">}</span>
<span id="cb51-54"></span>
<span id="cb51-55">split_rectangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, value) {</span>
<span id="cb51-56">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb51-57">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle_x</span>(rectangle, value))</span>
<span id="cb51-58">  }</span>
<span id="cb51-59">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle_y</span>(rectangle, value)</span>
<span id="cb51-60">}</span>
<span id="cb51-61"></span>
<span id="cb51-62">split_block <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(blocks, value) {</span>
<span id="cb51-63">  old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_rectangle</span>(blocks) </span>
<span id="cb51-64">  new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle</span>(blocks[old, ], value)</span>
<span id="cb51-65">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(blocks[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>old, ], new)</span>
<span id="cb51-66">}</span>
<span id="cb51-67"></span>
<span id="cb51-68">subdivision <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb51-69">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb51-70">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, </span>
<span id="cb51-71">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb51-72">  </span>
<span id="cb51-73">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb51-74">  blocks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(</span>
<span id="cb51-75">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">left =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb51-76">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">right =</span> ncol, </span>
<span id="cb51-77">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bottom =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb51-78">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top =</span> nrow, </span>
<span id="cb51-79">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb51-80">  )</span>
<span id="cb51-81">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nsplits, split_block, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> blocks)</span>
<span id="cb51-82">}</span>
<span id="cb51-83"></span>
<span id="cb51-84">fill_rectangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(left, right, bottom, top, width, </span>
<span id="cb51-85">                           height, area, value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nshades =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb51-86">  </span>
<span id="cb51-87">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(value)</span>
<span id="cb51-88">  fractals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(billow, fbm, ridged)</span>
<span id="cb51-89">  generators <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(gen_simplex, gen_perlin, gen_worley)</span>
<span id="cb51-90">  </span>
<span id="cb51-91">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb51-92">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> left<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>right, </span>
<span id="cb51-93">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> bottom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>top, </span>
<span id="cb51-94">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-95">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb51-96">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb51-97">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb51-98">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb51-99">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(generators, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]],</span>
<span id="cb51-100">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(fractals, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]],</span>
<span id="cb51-101">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb51-102">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb51-103">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance2"</span></span>
<span id="cb51-104">      ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-105">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nshades)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb51-106">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>()</span>
<span id="cb51-107">    )</span>
<span id="cb51-108">}</span>
<span id="cb51-109"></span>
<span id="cb51-110">draw_mosaic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, palette) {</span>
<span id="cb51-111">  background <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(palette, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb51-112">  dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-113">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> fill)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-114">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_tile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> background, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-115">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-116">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-117">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-118">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-119">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expansion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-120">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-121">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-122">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> background)) </span>
<span id="cb51-123">}</span>
<span id="cb51-124"></span>
<span id="cb51-125">mosaica <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, </span>
<span id="cb51-126">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, </span>
<span id="cb51-127">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb51-128">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb51-129">  </span>
<span id="cb51-130">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subdivision</span>(ncol, nrow, nsplits, seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-131">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(fill_rectangle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb51-132">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">995</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-133">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(fill)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-134">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw_mosaic</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed))</span>
<span id="cb51-135">}</span>
<span id="cb51-136"></span>
<span id="cb51-137">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mosaica</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1302</span>)</span>
<span id="cb51-138"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="subdivision.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
subdivision.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb52-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb52-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb52-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb52-5"></span>
<span id="cb52-6">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb52-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb52-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-9">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb52-10">}</span>
<span id="cb52-11"></span>
<span id="cb52-12">choose_rectangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(blocks) {</span>
<span id="cb52-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(blocks), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> blocks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>area)</span>
<span id="cb52-14">}</span>
<span id="cb52-15"></span>
<span id="cb52-16">choose_break <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(lower, upper) {</span>
<span id="cb52-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>((upper <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lower) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb52-18">}</span>
<span id="cb52-19"></span>
<span id="cb52-20">create_rectangles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(left, right, bottom, top, value) {</span>
<span id="cb52-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb52-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">left =</span> left,</span>
<span id="cb52-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">right =</span> right,</span>
<span id="cb52-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bottom =</span> bottom,</span>
<span id="cb52-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top =</span> top,</span>
<span id="cb52-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> right <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> left,</span>
<span id="cb52-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> top <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bottom,</span>
<span id="cb52-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">area =</span> width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> height,</span>
<span id="cb52-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> value</span>
<span id="cb52-30">  )</span>
<span id="cb52-31">}</span>
<span id="cb52-32"></span>
<span id="cb52-33">split_rectangle_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, new_value) {</span>
<span id="cb52-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(rectangle, {</span>
<span id="cb52-35">    split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_break</span>(left, right)</span>
<span id="cb52-36">    new_left  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(left, left <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split)</span>
<span id="cb52-37">    new_right <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(left <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split, right)</span>
<span id="cb52-38">    new_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(value, new_value)</span>
<span id="cb52-39">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(new_left, new_right, bottom, top, new_value)</span>
<span id="cb52-40">  })</span>
<span id="cb52-41">}</span>
<span id="cb52-42"></span>
<span id="cb52-43">split_rectangle_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, new_value) {</span>
<span id="cb52-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(rectangle, {</span>
<span id="cb52-45">    split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_break</span>(bottom, top)</span>
<span id="cb52-46">    new_bottom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(bottom, bottom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split)</span>
<span id="cb52-47">    new_top <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(bottom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> split, top)</span>
<span id="cb52-48">    new_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(value, new_value)</span>
<span id="cb52-49">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(left, right, new_bottom, new_top, new_value)</span>
<span id="cb52-50">  })</span>
<span id="cb52-51">}</span>
<span id="cb52-52"></span>
<span id="cb52-53">split_rectangle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rectangle, value) {</span>
<span id="cb52-54">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb52-55">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle_x</span>(rectangle, value))</span>
<span id="cb52-56">  }</span>
<span id="cb52-57">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle_y</span>(rectangle, value)</span>
<span id="cb52-58">}</span>
<span id="cb52-59"></span>
<span id="cb52-60">split_block <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(blocks, value) {</span>
<span id="cb52-61">  old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">choose_rectangle</span>(blocks) </span>
<span id="cb52-62">  new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_rectangle</span>(blocks[old, ], value)</span>
<span id="cb52-63">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(blocks[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>old, ], new)</span>
<span id="cb52-64">}</span>
<span id="cb52-65"></span>
<span id="cb52-66">subdivision <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb52-67">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb52-68">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsplits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, </span>
<span id="cb52-69">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb52-70">  </span>
<span id="cb52-71">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb52-72">  blocks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_rectangles</span>(</span>
<span id="cb52-73">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">left =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb52-74">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">right =</span> ncol, </span>
<span id="cb52-75">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bottom =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb52-76">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">top =</span> nrow, </span>
<span id="cb52-77">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb52-78">  )</span>
<span id="cb52-79">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nsplits, split_block, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> blocks)</span>
<span id="cb52-80">}</span>
<span id="cb52-81"></span>
<span id="cb52-82">develop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(div, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb52-83">  </span>
<span id="cb52-84">  div <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb52-85">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb52-86">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> left, </span>
<span id="cb52-87">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> right, </span>
<span id="cb52-88">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> bottom, </span>
<span id="cb52-89">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> top,</span>
<span id="cb52-90">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> value</span>
<span id="cb52-91">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-92">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rect</span>(</span>
<span id="cb52-93">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>, </span>
<span id="cb52-94">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb52-95">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb52-96">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-97">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(</span>
<span id="cb52-98">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed)</span>
<span id="cb52-99">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-100">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb52-101">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb52-102">}</span>
<span id="cb52-103"></span>
<span id="cb52-104">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subdivision</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">develop</span>() </span>
<span id="cb52-105"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="truchet-example.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
truchet-example.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(truchet)</span>
<span id="cb53-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb53-3"></span>
<span id="cb53-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb53-5">mosaic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">st_truchet_ms</span>(</span>
<span id="cb53-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tiles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ane"</span>), </span>
<span id="cb53-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p1 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale 1 </span></span>
<span id="cb53-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p2 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale 2</span></span>
<span id="cb53-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p3 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale 3</span></span>
<span id="cb53-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),</span>
<span id="cb53-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb53-12">)</span>
<span id="cb53-13"></span>
<span id="cb53-14">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mosaic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb53-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> color)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb53-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb53-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb53-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb53-19"></span>
<span id="cb53-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="voronoi-baroque.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
voronoi-baroque.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb54-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb54-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggforce)</span>
<span id="cb54-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(voronoise)</span>
<span id="cb54-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb54-7"></span>
<span id="cb54-8">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb54-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb54-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-11">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb54-12">}</span>
<span id="cb54-13"></span>
<span id="cb54-14">unboxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(iterations, layers) {</span>
<span id="cb54-15">  </span>
<span id="cb54-16">  coeffs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(</span>
<span id="cb54-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb54-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, layers)</span>
<span id="cb54-19">  )</span>
<span id="cb54-20">  </span>
<span id="cb54-21">  point0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb54-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb54-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb54-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb54-25">  )</span>
<span id="cb54-26">  </span>
<span id="cb54-27">  funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb54-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb54-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point),</span>
<span id="cb54-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point)</span>
<span id="cb54-31">  )</span>
<span id="cb54-32">  </span>
<span id="cb54-33">  update <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point, t) {</span>
<span id="cb54-34">    l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(layers, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb54-35">    f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(funs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb54-36">    z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb54-37">    point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb54-38">    point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> coeffs[,,l])</span>
<span id="cb54-39">    point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb54-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(point)</span>
<span id="cb54-41">  }</span>
<span id="cb54-42">  </span>
<span id="cb54-43">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations, update, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> point0)</span>
<span id="cb54-44">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(points), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb54-45">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(points)) </span>
<span id="cb54-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(points) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"val"</span>)</span>
<span id="cb54-47">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(points)</span>
<span id="cb54-48">}</span>
<span id="cb54-49"></span>
<span id="cb54-50">sift <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb54-51">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-52">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-53">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb54-54">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tilesize =</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(y)),</span>
<span id="cb54-55">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(tilesize <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>, x, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), </span>
<span id="cb54-56">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(tilesize <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>, y, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb54-57">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-58">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb54-59">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data)</span>
<span id="cb54-60">}</span>
<span id="cb54-61"></span>
<span id="cb54-62">shake <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb54-63">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb54-64">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb54-66">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb54-67">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb54-68">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-69">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb54-70">}</span>
<span id="cb54-71"></span>
<span id="cb54-72">voronoi_baroque <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb54-73">    seed, </span>
<span id="cb54-74">    perturb, </span>
<span id="cb54-75">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, </span>
<span id="cb54-76">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb54-77">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb54-78">    ...</span>
<span id="cb54-79">) {</span>
<span id="cb54-80">  </span>
<span id="cb54-81">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb54-82">  </span>
<span id="cb54-83">  blank <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> val)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb54-84">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-85">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.75</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.75</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-86">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb54-87">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-88">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_alpha_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-89">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb54-90">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb54-91">  </span>
<span id="cb54-92">  blank <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-93">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoise</span>(</span>
<span id="cb54-94">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxy</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb54-95">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perturb =</span> perturb,</span>
<span id="cb54-96">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> max.radius,</span>
<span id="cb54-97">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> radius,</span>
<span id="cb54-98">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> expand,</span>
<span id="cb54-99">      ...,</span>
<span id="cb54-100">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb54-101">    )</span>
<span id="cb54-102">}</span>
<span id="cb54-103"></span>
<span id="cb54-104">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">voronoi_baroque</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>, shake)</span>
<span id="cb54-105"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="voronoi-tiles.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
voronoi-tiles.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb55-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggforce)</span>
<span id="cb55-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb55-4"></span>
<span id="cb55-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">61</span>)</span>
<span id="cb55-6"></span>
<span id="cb55-7">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb55-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb55-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb55-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">val =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb55-11">)</span>
<span id="cb55-12"></span>
<span id="cb55-13">bg_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb55-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb55-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb55-16">)</span>
<span id="cb55-17"></span>
<span id="cb55-18">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> val)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb55-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(</span>
<span id="cb55-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span></span>
<span id="cb55-24">  ))</span>
<span id="cb55-25"></span>
<span id="cb55-26">pic2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb55-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(</span>
<span id="cb55-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> bg_dat,</span>
<span id="cb55-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#333333"</span>, </span>
<span id="cb55-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb55-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0025</span></span>
<span id="cb55-32">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(</span>
<span id="cb55-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, </span>
<span id="cb55-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb55-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>,</span>
<span id="cb55-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span></span>
<span id="cb55-38">  )</span>
<span id="cb55-39"></span>
<span id="cb55-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic2)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="voronoi-unbox.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
voronoi-unbox.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb56-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb56-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb56-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggforce)</span>
<span id="cb56-5"></span>
<span id="cb56-6">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb56-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb56-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-9">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb56-10">}</span>
<span id="cb56-11"></span>
<span id="cb56-12">unboxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(iterations, layers) {</span>
<span id="cb56-13">  </span>
<span id="cb56-14">  coeffs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(</span>
<span id="cb56-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb56-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, layers)</span>
<span id="cb56-17">  )</span>
<span id="cb56-18">  </span>
<span id="cb56-19">  point0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb56-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb56-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb56-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb56-23">  )</span>
<span id="cb56-24">  </span>
<span id="cb56-25">  funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb56-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb56-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point),</span>
<span id="cb56-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point)</span>
<span id="cb56-29">  )</span>
<span id="cb56-30">  </span>
<span id="cb56-31">  update <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point, t) {</span>
<span id="cb56-32">    l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(layers, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb56-33">    f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(funs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb56-34">    z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb56-35">    point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb56-36">    point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> coeffs[,,l])</span>
<span id="cb56-37">    point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb56-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(point)</span>
<span id="cb56-39">  }</span>
<span id="cb56-40">  </span>
<span id="cb56-41">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations, update, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> point0)</span>
<span id="cb56-42">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(points), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb56-43">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(points)) </span>
<span id="cb56-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(points) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"val"</span>)</span>
<span id="cb56-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(points)</span>
<span id="cb56-46">}</span>
<span id="cb56-47"></span>
<span id="cb56-48"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb56-49">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxy</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb56-50"></span>
<span id="cb56-51">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> val)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-52">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb56-53">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb56-54">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb56-55">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-56">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb56-57"></span>
<span id="cb56-58">pic2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-59">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_voronoi_tile</span>(</span>
<span id="cb56-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>,</span>
<span id="cb56-61">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb56-62">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb56-63">  )</span>
<span id="cb56-64"></span>
<span id="cb56-65"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic2)</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Art from Code {VI:} {Tiles} and Tessellations},
  date = {2024-12-23},
  url = {https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>‚ÄúArt from Code VI: Tiles and
Tessellations.‚Äù</span> December 23, 2024. <a href="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/">https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/</guid>
  <pubDate>Sun, 22 Dec 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-12-23_art-from-code-6/subdivision.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Art from code V: Iterated function systems</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><em>A couple of years ago I gave an invited workshop called <a href="https://art-from-code.netlify.app">art from code</a> at the 2022 rstudio::conf (now posit::conf) conference. As part of the workshop I wrote a lengthy series of notes on how to make generative art using R, all of which were released under a CC-BY licence. For a while now I‚Äôd been thinking I should do something with these notes. I considered writing a book, but in all honesty I don‚Äôt have the spare capacity for a side-project of that scale these days. I can barely keep up with the workload at my day job as it is. So instead, I‚Äôve decided that I‚Äôd port them over to this site as a series of blog posts. In doing so I‚Äôve made a deliberate decision not to modify the original content too much (nobody loves it when an artist tries to ‚Äúimprove‚Äù the original, after all). All I‚Äôve done is update the code to accommodate package changes since 2022, and some minor edits so that the images are legible when embedded in this blog (which is light-themed, and the original was dark-theme). Other than that, I‚Äôve left it alone. This is the fifth post in that series.</em></p>
<ul>
<li><a href="../../posts/2024-12-18_art-from-code-1/">Prelude</a></li>
<li><a href="../../posts/2024-12-19_art-from-code-2/">Spatial tricks with ambient</a></li>
<li><a href="../../posts/2024-12-20_art-from-code-3/">Polygon tricks</a></li>
<li><a href="../../posts/2024-12-21_art-from-code-4/">Shading tricks</a></li>
<li><a href="../../posts/2024-12-22_art-from-code-5/">Iterated function systems</a></li>
<li><a href="../../posts/2024-12-23_art-from-code-6/">Tiles and tessellations</a></li>
<li><a href="../../posts/2024-12-24_art-from-code-7/">Pixel filters</a></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(Rcpp)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span></code></pre></div>
</div>
<p>So‚Ä¶ iterated function systems. What are they?</p>
<section id="some-tiresome-formalism" class="level2">
<h2 class="anchored" data-anchor-id="some-tiresome-formalism">Some tiresome formalism</h2>
<p>One of the joys of leaving academia is that I can stop pretending that I don‚Äôt get all my mathematical knowledge from Wikipedia, and as the entry for <a href="https://en.wikipedia.org/wiki/Iterated_function_system">iterated function systems</a> oh so helpfully informs us, an <a href="https://en.wikipedia.org/wiki/Iterated_function">iterated function</a> system is defined as a finite set of <a href="https://en.wikipedia.org/wiki/Contraction_mapping">contractive maps</a> on a <a href="https://en.wikipedia.org/wiki/Complete_metric_space">complete metric space</a> <img src="https://latex.codecogs.com/png.latex?X%20=%20(M,%20d)">, formally denoted</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5C%7Bf_i%20:%20X%20%5Crightarrow%20X%20%5Cmid%20i%20=%201,%202,%20%5Cldots%20N%20%5Cright%5C%7D,%20N%20%5Cin%20%5Cmathcal%7BN%7D%0A"></p>
<p>where the function <img src="https://latex.codecogs.com/png.latex?f_i"> is a contraction on <img src="https://latex.codecogs.com/png.latex?X"> if there exists some real number <img src="https://latex.codecogs.com/png.latex?k"> such that <img src="https://latex.codecogs.com/png.latex?d(f_i(x),%20f_i(y))%20%5Cleq%20k%20%5C%20d(x,y)"> for all <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20M"> and <img src="https://latex.codecogs.com/png.latex?y%20%5Cin%20M">.</p>
<p>If that weren‚Äôt impenetrable enough, Wikipedia continues to explain that</p>
<blockquote class="blockquote">
<p>Hutchinson (1981) showed that, for the metric space <img src="https://latex.codecogs.com/png.latex?%7B%5Cdisplaystyle%20%5Cmathbb%20%7BR%7D%20%5E%7Bn%7D%7D">, or more generally, for a complete metric space <img src="https://latex.codecogs.com/png.latex?X">, such a system of functions has a unique nonempty <a href="https://en.wikipedia.org/wiki/Compact_space">compact</a> (closed and bounded) fixed set <img src="https://latex.codecogs.com/png.latex?S">. One way of constructing a fixed set is to start with an initial nonempty closed and bounded set <img src="https://latex.codecogs.com/png.latex?S_0"> and iterate the actions of the <img src="https://latex.codecogs.com/png.latex?f_i">, taking <img src="https://latex.codecogs.com/png.latex?S_%7Bn+1%7D"> to be the union of the images of <img src="https://latex.codecogs.com/png.latex?S_n"> under the <img src="https://latex.codecogs.com/png.latex?f_i">; then taking <img src="https://latex.codecogs.com/png.latex?S"> to be the <a href="https://en.wikipedia.org/wiki/Closure_(topology)">closure</a> of the union of the <img src="https://latex.codecogs.com/png.latex?S_n">. Symbolically, the unique fixed (nonempty compact) set <img src="https://latex.codecogs.com/png.latex?S%5Csubseteq%20X"> has the property</p>
<p><img src="https://latex.codecogs.com/png.latex?S%20=%20%5Coverline%7B%5Cbigcup_%7Bi=1%7D%5EN%20f_i(S)%7D."></p>
<p>The set <img src="https://latex.codecogs.com/png.latex?S"> is thus the fixed set of the <a href="https://en.wikipedia.org/wiki/Hutchinson_operator">Hutchinson operator</a> <img src="https://latex.codecogs.com/png.latex?F:2%5E%7BX%7D%5Cto%202%5E%7BX%7D"> defined for <img src="https://latex.codecogs.com/png.latex?A%5Csubseteq%20X"> via</p>
<p><img src="https://latex.codecogs.com/png.latex?F(A)=%7B%5Coverline%20%7B%5Cbigcup%20_%7Bi=1%7D%5E%7BN%7Df_%7Bi%7D(A)%7D%7D."></p>
<p>The existence and uniqueness of <img src="https://latex.codecogs.com/png.latex?S"> is a consequence of the <a href="https://en.wikipedia.org/wiki/Contraction_mapping_principle">contraction mapping principle</a>, as is the fact that</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Clim%20_%7Bn%5Cto%20%5Cinfty%20%7DF%5E%7B%5Ccirc%20n%7D(A)=S"></p>
<p>for any nonempty compact set <img src="https://latex.codecogs.com/png.latex?A%20%5Cin%20X">. (For contractive IFS this convergence takes place even for any nonempty closed bounded set <img src="https://latex.codecogs.com/png.latex?A">). Random elements arbitrarily close to <img src="https://latex.codecogs.com/png.latex?S"> may be obtained by the ‚Äúchaos game‚Äù</p>
</blockquote>
<p>I am entirely certain that you do not care.</p>
<p>As impressive as I find all this notation, I don‚Äôt find it helps me understand what an iterated function system actually <em>does</em>. What I do find helpful, however, is to play the <a href="https://en.wikipedia.org/wiki/Chaos_game">chaos game</a>, because that‚Äôs a concrete method we can use to simulate the behaviour of an IFS, and in practice that‚Äôs what our code will actually do!</p>
</section>
<section id="barnsley-fern-chaos-game" class="level2">
<h2 class="anchored" data-anchor-id="barnsley-fern-chaos-game">Barnsley fern chaos game</h2>
<p>When written as pseudocode, the chaos game is remarkably simple:</p>
<ol type="1">
<li>Choose a set of starting values <img src="https://latex.codecogs.com/png.latex?(x_0,%20y_0)"></li>
<li>Set iteration number <img src="https://latex.codecogs.com/png.latex?i%20=%201"></li>
<li>Choose a transformation function <img src="https://latex.codecogs.com/png.latex?f"> to use on this iteration</li>
<li>Get the next value by passing the current value to the function, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?(x_i,%20y_i)%20=%20f(x_%7Bi-1%7D,%20y_%7Bi-1%7D)"></li>
<li>Update iteration number <img src="https://latex.codecogs.com/png.latex?i%20=%20i%20+%201"> and return to step 3; or finish</li>
</ol>
<p>I‚Äôve written this on the assumption that the functions are defined over a two dimensional space with <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> coordinates, but it generalises naturally to any number of dimensions. When choosing a transformation function in step 3, you can sample uniformly at random, or impose a bias so that some transformation are applied more often than others.</p>
<p>To get a sense of how this works, let‚Äôs start with a classic example: the <a href="https://en.wikipedia.org/wiki/Barnsley_fern">Barnsley fern</a>. The Barnsley fern, like many iterated function systems I use for my art, is constructed from functions <img src="https://latex.codecogs.com/png.latex?f(x,%20y)"> defined in two dimensons. Better yet, they‚Äôre all <a href="https://en.wikipedia.org/wiki/Affine_transformation">affine transformations</a> so we can write any such function down using good old fashioned linear algebra, and compute everything using matrix multiplication and addition:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x,y)=%7B%5Cbegin%7Bbmatrix%7Da&amp;b%5C%5Cc&amp;d%5Cend%7Bbmatrix%7D%7D%7B%5Cbegin%7Bbmatrix%7Dx%5C%5Cy%5Cend%7Bbmatrix%7D%7D+%7B%5Cbegin%7Bbmatrix%7De%5C%5Cf%5Cend%7Bbmatrix%7D%7D"></p>
<p>There are four such functions used to build the Barnsley fern, with coefficients shown below:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 13%">
<col style="width: 8%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 6%">
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 37%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: right;"><img src="https://latex.codecogs.com/png.latex?a"></th>
<th style="text-align: right;"><img src="https://latex.codecogs.com/png.latex?b"></th>
<th style="text-align: right;"><img src="https://latex.codecogs.com/png.latex?c"></th>
<th style="text-align: right;"><img src="https://latex.codecogs.com/png.latex?d"></th>
<th style="text-align: right;"><img src="https://latex.codecogs.com/png.latex?e"></th>
<th style="text-align: right;"><img src="https://latex.codecogs.com/png.latex?f"></th>
<th style="text-align: right;">weight</th>
<th style="text-align: left;">interpretation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><img src="https://latex.codecogs.com/png.latex?f_1(x,%20y)"></td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.16</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.01</td>
<td style="text-align: left;">makes the stem</td>
</tr>
<tr class="even">
<td style="text-align: left;"><img src="https://latex.codecogs.com/png.latex?%C6%92_2(x,%20y)"></td>
<td style="text-align: right;">0.85</td>
<td style="text-align: right;">0.04</td>
<td style="text-align: right;">‚àí0.04</td>
<td style="text-align: right;">0.85</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.60</td>
<td style="text-align: right;">0.85</td>
<td style="text-align: left;">makes ever-smaller leaflets</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><img src="https://latex.codecogs.com/png.latex?%C6%92_3(x,%20y)"></td>
<td style="text-align: right;">0.20</td>
<td style="text-align: right;">‚àí0.26</td>
<td style="text-align: right;">0.23</td>
<td style="text-align: right;">0.22</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.60</td>
<td style="text-align: right;">0.07</td>
<td style="text-align: left;">makes largest left-hand leaflet</td>
</tr>
<tr class="even">
<td style="text-align: left;"><img src="https://latex.codecogs.com/png.latex?%C6%92_4(x,%20y)"></td>
<td style="text-align: right;">‚àí0.15</td>
<td style="text-align: right;">0.28</td>
<td style="text-align: right;">0.26</td>
<td style="text-align: right;">0.24</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.44</td>
<td style="text-align: right;">0.07</td>
<td style="text-align: left;">makes largest right-hand leaflet</td>
</tr>
</tbody>
</table>
<p>Okay, so let‚Äôs start by implementing the Barnsley fern transformation functions in R. The <code>fern_transform()</code> function below takes <code>coord</code> input as a two-element numeric vector, and an <code>ind</code> argument that specifies which of the four transformations to apply (this should be an integer between 1 and 4). The output is the next set of <code>coord</code> values to use in the chaos game:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">fern_transform <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(coord, ind) {</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients for the stem function f_1</span></span>
<span id="cb2-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb2-5">    mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matrix to multiply</span></span>
<span id="cb2-6">    off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># offset vector to add</span></span>
<span id="cb2-7">  }</span>
<span id="cb2-8">  </span>
<span id="cb2-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients for the small leaflet function f_2</span></span>
<span id="cb2-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) {</span>
<span id="cb2-11">    mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">04</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">04</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-12">    off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>)                      </span>
<span id="cb2-13">  }</span>
<span id="cb2-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients for the right-side function f_3</span></span>
<span id="cb2-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb2-16">    mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-17">    off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>)                      </span>
<span id="cb2-18">  }</span>
<span id="cb2-19">  </span>
<span id="cb2-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients for the left-side function f_4</span></span>
<span id="cb2-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb2-22">    mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-23">    off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span>)                     </span>
<span id="cb2-24">  }</span>
<span id="cb2-25">  </span>
<span id="cb2-26">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the affine transformed coords</span></span>
<span id="cb2-27">  coord <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> coord <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> off</span>
<span id="cb2-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(coord)</span>
<span id="cb2-29">}</span></code></pre></div>
</div>
<p>Armed with the <code>fern_transform()</code> function, we can write a <code>fern_chaos()</code> function that implements the chaos game for the Barnsley fern. The arguments to <code>fern_chaos()</code> specify the number of iterations over which the game should be played, and (optionally) a <code>seed</code> to control the state of the random number generator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">fern_chaos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb3-3">  </span>
<span id="cb3-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which transformation to apply at each iteration</span></span>
<span id="cb3-5">  transform_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb3-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb3-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> iterations, </span>
<span id="cb3-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb3-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">07</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">07</span>)</span>
<span id="cb3-10">  )</span>
<span id="cb3-11">  </span>
<span id="cb3-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialise chaos game at the origin</span></span>
<span id="cb3-13">  start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb3-14">  </span>
<span id="cb3-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helper function to collapse accumulated output</span></span>
<span id="cb3-16">  bind_to_column_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(lst) {</span>
<span id="cb3-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(cbind, lst)</span>
<span id="cb3-18">  }</span>
<span id="cb3-19">  </span>
<span id="cb3-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate until done!</span></span>
<span id="cb3-21">  coord_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> transform_index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(fern_transform, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> start) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_to_column_matrix</span>() </span>
<span id="cb3-24">  </span>
<span id="cb3-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tidy the output, add extra columns, and return</span></span>
<span id="cb3-26">  coord_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(coord_matrix) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() </span>
<span id="cb3-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(coord_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)</span>
<span id="cb3-29">  coord_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> coord_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transform =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, transform_index),</span>
<span id="cb3-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iteration =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-34">    )</span>
<span id="cb3-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(coord_df)</span>
<span id="cb3-36">}</span></code></pre></div>
</div>
<p>This function is a little fussier than it really needs to be. For example, if you compare my code to the <a href="https://en.wikipedia.org/wiki/Barnsley_fern#R">base R version on Wikipedia</a> you‚Äôll see I spend extra effort tidying the results at the end: rather than returning a matrix of points, I‚Äôve coerced it to a tibble that includes the coordinates as columns <code>x</code> and <code>y</code>, but in addition contains a column <code>transform</code> specifying which of the transformation functions was used to generate each point, and the <code>iteration</code> number as a unique identifier for each row. In any case, here‚Äôs the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">fern_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fern_chaos</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-2">fern_dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10,001 √ó 4
        x     y transform iteration
    &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
 1  0     0             0         0
 2  0     1.6           2         1
 3  0.064 2.96          2         2
 4  0.173 4.11          2         3
 5 -1.03  2.54          3         4
 6 -0.778 3.80          2         5
 7 -1.14  2.26          3         6
 8  0.804 0.684         4         7
 9  0.711 2.15          2         8
10  0.690 3.40          2         9
# ‚Ñπ 9,991 more rows</code></pre>
</div>
</div>
<p>It looks nicer as a plot though :)</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(fern_dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/show-barnsley-fern-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>The reason I went to the extra trouble of storing the <code>transform</code> column was so I could map it to the colour aesthetic in my plot. When I do this, I get this as the result: there‚Äôs a transformation function that defines the left leaf shape, another that defines the right leaf shape, and a third one that defines the stem shape. Finally, there‚Äôs a function that copies, shifts-up, and rotates its input in a way that produces the vertical symmetry in the output.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(fern_dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(transform))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(</span>
<span id="cb7-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transformation"</span>, </span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb7-8">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/transform-shaded-barnsley-fern-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>It‚Äôs rather more obvious now what each of the transformation functions does!</p>
<p>As we‚Äôll see a little later, it can be very useful to plot your outputs this way sometimes: even if you‚Äôre planning to do something fancier with colour later, the ability to visualise which parts of your output are associated with a particular function is useful for diagnosing what your system is doing. My experience has been that iterated function systems are difficult to reason about just by looking at the code: the relationship between the code and the output is pretty opaque, so you have to rely on diagnostics like this when tweaking the output of your system.</p>
<p>For no particular reason, here‚Äôs our fern with the colour aesthetic mapped to the <code>iteration</code> number:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(fern_dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> iteration)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/randomly-shaded-barnsley-fern-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<div id="exercise-barsnley-fern" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>barnsley-fern.R</code> script in the materials.</p>
</div>
</div>
</section>
<section id="happy-accidents" class="level2">
<h2 class="anchored" data-anchor-id="happy-accidents">Happy accidents</h2>
<p>Iterated function systems can be a lot more elaborate than the Barnsley fern, often involving transformation functions that are constructed according to some fancypants compositional rules. For example, the <a href="https://en.wikipedia.org/wiki/Fractal_flame">fractal flame algorithm</a> proposed by Scott Draves in 1992 (here‚Äôs <a href="https://flam3.com/flame_draves.pdf">the original article</a>) specifies transformation functions <img src="https://latex.codecogs.com/png.latex?f_i()"> ‚Äì called ‚Äúflame functions‚Äù ‚Äì that are composed according to the rule:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af_i(%5Cmathbf%7Bx%7D)%20=%20%5Csum_j%20w_%7Bij%7D%20%5C%20g_j(%5Cmathbf%7BA%7D_i%20%5Cmathbf%7Bx%7D)%0A"></p>
<p>where</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D_i"> is a matrix that defines an affine transformation of the coordinates <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> associated with this specific flame function (i.e., each flame function <img src="https://latex.codecogs.com/png.latex?f_i()"> has its own transformation <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA_i%7D">, and in the two dimensional case <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> is just the points <img src="https://latex.codecogs.com/png.latex?(x,%20y)">);</li>
<li>the various <img src="https://latex.codecogs.com/png.latex?g_j()"> functions are called ‚Äúvariant functions‚Äù, and these don‚Äôt have to be linear: they can be sinusoidal, or discontinuous, or whatever you like really; and</li>
<li>each flame function is defined as a linear combination of the variant functions: the coefficient <img src="https://latex.codecogs.com/png.latex?w_%7Bij%7D"> specifies the weight assigned to the <img src="https://latex.codecogs.com/png.latex?j">-th variant function by the <img src="https://latex.codecogs.com/png.latex?i">-th flame function.</li>
</ul>
<p>Additionally, just as we saw with the Barnsley fern, the flame functions themselves can be weighted with a probability vector: a system can be defined in a way that has a bias for some flame functions over others.</p>
<p>This probably sounds a bit‚Ä¶ intense, right?</p>
<p>So yeah. Um.</p>
<p>When I first decided to try implementing the fractal flame algorithm I decided I wasn‚Äôt going to bother with fancypants weights <img src="https://latex.codecogs.com/png.latex?w_%7Bij%7D">, so I‚Ä¶ ignored them. But then ‚Äì because I was tired and not really paying attention to the subscripts in Draves equations ‚Äì I decided that my system was going to have one flame function for every possible combination of transformation matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D_i"> and variant function <img src="https://latex.codecogs.com/png.latex?g_j()">. What this meant is that the thing I actually coded was this. Given a set of variant functions <img src="https://latex.codecogs.com/png.latex?g_1,%20g_2,%20%5Cldots,%20g_n"> and some set of transformation matrices <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D_1,%20%5Cmathbf%7BA%7D_2,%20%5Cldots,%20%5Cmathbf%7BA%7D_m">, I included every transformation function <img src="https://latex.codecogs.com/png.latex?f_%7Bij%7D(%5Cmathbf%7Bx%7D)"> of the following form:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af_%7Bij%7D(%5Cmathbf%7Bx%7D)%20=%20g_j(%5Cmathbf%7BA%7D_i%20%5Cmathbf%7Bx%7D)%0A"> When your transformation functions are composed in this way you can sample a random transformation <img src="https://latex.codecogs.com/png.latex?f_%7Bij%7D"> by sampling the two components independently: sample a transformation matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D_i"> and a variant function <img src="https://latex.codecogs.com/png.latex?g_j">, and then you‚Äôre done. It ends up being a weird special case of the fractal flame algorithm, but it turns out you can make pretty things that way.</p>
<p>Oh well. Whatever.</p>
<p>The point of art isn‚Äôt to mindlessly copy what someone else has done, and if I‚Äôm being honest with myself the truth is that some of the best art I‚Äôve created started with a coding error or a misinterpretation like this one. As <a href="https://en.wikipedia.org/wiki/Bob_Ross">Bob Ross</a> famously said,</p>
<blockquote class="blockquote">
<p>There are no mistakes, just happy accidents.</p>
</blockquote>
</section>
<section id="chaos-game-for-unboxing" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="chaos-game-for-unboxing">Chaos game for unboxing</h2>
<p>Enough chitchat about my artistic process. Let‚Äôs actually implement a version of my <a href="https://art.djnavarro.net/gallery/unboxing/">Unboxing</a> system. In this example, the coefficients that define the affine transformations <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA_i%7D"> have been sampled uniformly at random, with values ranging from -1 to 1. There‚Äôs a <code>layers</code> input argument that specifies how many of these affine transformations to include (no I don‚Äôt know why I called it <code>layers</code> ‚Äì it‚Äôs a bad name I think). Anyway, the code snippet below shows how this is implemented:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">coeffs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, layers)</span>
<span id="cb9-4">)</span></code></pre></div>
</div>
<p>The coefficients are stored in an array: <code>coeffs[,,i]</code> is the matrix of coefficients <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA_i%7D">.</p>
<p>There are three variant functions <img src="https://latex.codecogs.com/png.latex?g_j"> in this system: two of them are sinusoidal functions: one of them computes <code>sin(x)</code> and <code>sin(y)</code>, and the other computes the same thing but multiplies the output by two. Both of these will produce wavy shapes. The other one is a rescaling function: it tends to shift points towards the top right corner. The code snippet below implements these variant functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb10-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point),</span>
<span id="cb10-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point)</span>
<span id="cb10-5">)</span></code></pre></div>
</div>
<p>The <code>unboxer_base()</code> function below implements the whole thing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">unboxer_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(iterations, layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb11-2">  </span>
<span id="cb11-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb11-4">  </span>
<span id="cb11-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients defining affine layer transforms, A_i</span></span>
<span id="cb11-6">  coeffs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(</span>
<span id="cb11-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb11-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, layers)</span>
<span id="cb11-9">  )</span>
<span id="cb11-10">  </span>
<span id="cb11-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list of variant functions, g_j</span></span>
<span id="cb11-12">  funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb11-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb11-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point),</span>
<span id="cb11-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point)</span>
<span id="cb11-16">  )</span>
<span id="cb11-17">  </span>
<span id="cb11-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># updater function: apply the layer, then the function</span></span>
<span id="cb11-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (the weirdness with point[3] is me treating colour as special)</span></span>
<span id="cb11-20">  update <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point, layer, transform) {</span>
<span id="cb11-21">    f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> funs[[transform]]</span>
<span id="cb11-22">    z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb11-23">    point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-24">    point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> coeffs[,,layer])</span>
<span id="cb11-25">    point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb11-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(point)</span>
<span id="cb11-27">  }</span>
<span id="cb11-28">  </span>
<span id="cb11-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial point</span></span>
<span id="cb11-30">  point0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb11-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb11-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb11-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb11-34">  )</span>
<span id="cb11-35">  </span>
<span id="cb11-36">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample points</span></span>
<span id="cb11-37">  layer_ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(layers, iterations, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  </span>
<span id="cb11-38">  trans_ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(funs), iterations, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  </span>
<span id="cb11-39">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate2</span>(layer_ind, trans_ind, update, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> point0)</span>
<span id="cb11-40">  </span>
<span id="cb11-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tidy up, add columns, and return</span></span>
<span id="cb11-42">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(</span>
<span id="cb11-43">    points,</span>
<span id="cb11-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, layer_ind),</span>
<span id="cb11-45">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, trans_ind)</span>
<span id="cb11-46">  )</span>
<span id="cb11-47">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(points)</span>
<span id="cb11-48">}</span></code></pre></div>
</div>
<p>Let‚Äôs run this system for a few iterations, just so we can see what the output looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">333</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             [,1]        [,2]       [,3] [,4] [,5]
 [1,] -0.88255069 -0.04718621  0.1969293    0    0
 [2,] -1.67203174  1.84627339 -0.7948247    5    3
 [3,]  0.36262158  1.58519247 -0.4479714    3    1
 [4,]  1.07641590  0.44778402 -0.1920135    1    1
 [5,]  0.96570274  0.34005575 -0.8206870    1    3
 [6,] -0.98567258 -0.99766695 -0.7158925    3    2
 [7,]  0.94597134  0.21844210 -0.3696898    4    2
 [8,] -0.02509324  0.35517269 -0.2772464    4    2
 [9,]  1.21601399  0.20495003 -0.9885079    1    3
[10,]  1.22236642  3.28357073  1.2944046    2    1
[11,] -0.93808971 -0.91680227  0.5876316    5    2</code></pre>
</div>
</div>
<p>As you can see, this time around I‚Äôve not gone to the effort of converting it to a tibble or making it pretty. This output is a matrix. The first column is the x-coordinate and the second column is the y-coordinate. The third column is a ‚Äúz-coordinate‚Äù that we‚Äôll map to the colour aesthetic later. Column four specifies the layer number (i.e., the value <img src="https://latex.codecogs.com/png.latex?i"> specifying which affine matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D_i"> was used), and column five specifies the variant function number (i.e., the value <img src="https://latex.codecogs.com/png.latex?j"> specifying which variant function <img src="https://latex.codecogs.com/png.latex?g_j()"> was used).</p>
<p>If we want to turn these numbers into art and attach colours to the points, we are going to need a palette function, so as usual I‚Äôll insert my code to sample one of the canva palettes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb14-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-4">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb14-5">}</span></code></pre></div>
</div>
<p>Having done all that work, the rendering function in not very fancy: it‚Äôs just some ggplot2 code to create a scatter plot from the points and colour them using a canva palette:</p>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">unbox_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb15-2">  </span>
<span id="cb15-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to data frame and sample a palette</span></span>
<span id="cb15-4">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(data)]</span>
<span id="cb15-6">  shades <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed)</span>
<span id="cb15-7">  </span>
<span id="cb15-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># render image as a scatter plot</span></span>
<span id="cb15-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> c)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb15-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size,</span>
<span id="cb15-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb15-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb15-14">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> shades) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(</span>
<span id="cb15-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> shades[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shades[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb15-22">    ))</span>
<span id="cb15-23">}</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3">

</div>
<p>The results can be very pretty, especially when you generate a large number of points and plot them with a very small marker size.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">66</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">66</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/an-unboxing-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>21.17 sec elapsed</code></pre>
</div>
</div>
<p>The system is slow, but I‚Äôm usually willing to wait a bit for something pretty. (I‚Äôll talk about how we can speed this up later)</p>
<div id="exercise-unboxing-base" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>unbox-base.R</code> script.</p>
</div>
</div>
<p>The outputs from this system have a fairly consistent look and feel: a pair of nested boxes, with something ‚Äúbursting‚Äù from the top right corner. The fine grained details vary a lot from output to output, and there are some systematic differences as a function of the number of layers. Here‚Äôs an example showing what happens when I ratchet up the number of layers from 2 to 9:</p>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">333</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="cb19-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>() </span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/first-unboxing-art-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/first-unboxing-art-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/first-unboxing-art-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<pre><code>7.331 sec elapsed</code></pre>
</div>
</div>
</div>
<p>To understand what‚Äôs going on in this system, I‚Äôll go through the same exercise I did with the Barnsley fern. I‚Äôll generate the data for a piece of art by calling <code>unboxer_base()</code>, and then plot it three ways. First I‚Äôll show it as a pure black and white image to show the overall configuration of points, then I‚Äôll break it down based on the components. Because each transformation function is defined in terms the affine component and the variant component, I‚Äôll show two different versions of this. First, here‚Äôs the data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(dat) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"affine_layer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variant_function"</span>)</span>
<span id="cb21-6"></span>
<span id="cb21-7">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_tail</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove initialisation point</span></span>
<span id="cb21-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb21-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">affine_layer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(affine_layer),</span>
<span id="cb21-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variant_function =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(variant_function)</span>
<span id="cb21-12">  ) </span>
<span id="cb21-13"></span>
<span id="cb21-14">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 100,000 √ó 5
        x       y     c affine_layer variant_function
    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;        &lt;fct&gt;           
 1 -0.710 -0.979  0.577 1            2               
 2  0.797 -0.211  1.32  1            1               
 3 -1.71  -0.630  0.788 1            3               
 4  0.323  0.554  0.614 2            1               
 5 -0.116 -1.06   0.750 2            3               
 6  0.549  0.0594 1.45  1            1               
 7 -0.797 -0.334  0.651 1            2               
 8 -0.636 -0.998  0.271 1            2               
 9 -0.742 -0.978  0.368 1            2               
10 -0.723 -0.963  0.398 1            2               
# ‚Ñπ 99,990 more rows</code></pre>
</div>
</div>
<p>Now the plots:</p>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey90"</span>))</span>
<span id="cb23-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> variant_function)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set2"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb23-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey90"</span>),</span>
<span id="cb23-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inside"</span>,</span>
<span id="cb23-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position.inside =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb23-16">  )</span>
<span id="cb23-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> affine_layer)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb23-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey90"</span>),</span>
<span id="cb23-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inside"</span>,</span>
<span id="cb23-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position.inside =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb23-27">  )</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/show-unboxing-components-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/show-unboxing-components-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/show-unboxing-components-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>This gives you a sense of what‚Äôs going on here: in the middle panel you can see that the two ‚Äúsinusoidal‚Äù components have the effect of creating the boxes, because <code>sin(x)</code> is constrained to lie between -1 and 1. The snaky, wavy patterns that you see in some the outputs are also related to these components, but I haven‚Äôt plotted the data in a way that makes this obvious.</p>
<p>In contrast, on the right you can see the effect of the affine transformations. Notice that the blue pattern kind of looks like a ‚Äúsquashed and rotated‚Äù version of the red pattern? That‚Äôs exactly what the affine transforms do. They create these distortions.</p>
</section>
<section id="faster-chaos-with-rcpp" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="faster-chaos-with-rcpp">Faster chaos with Rcpp</h2>
<p>Waiting 30 seconds (or whatever) for something pretty is kind of annoying, especially when you‚Äôre still developing the system and you just want to tinker with the settings to see what it does. It would be nice if we could speed this up, right? The easiest way to speed things up is to run fewer iterations and use larger plot sizes. I mean, this works perfectly fine‚Ä¶</p>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">333</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb24-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>() </span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/coarse-unboxing-art-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/coarse-unboxing-art-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/coarse-unboxing-art-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<pre><code>1.61 sec elapsed</code></pre>
</div>
</div>
</div>
<p>If you‚Äôre okay with a coarser grained output (which honestly does have a certain aesthetic appeal), or simply don‚Äôt want to mess around with C++ code, your problems are solved! Read no further!</p>
<p>If speed is a consideration ‚Äì especially if the rendering times are interfering with the creative process ‚Äì one possibility would be to write the slow parts of your code in C++, and then call it from R using the Rcpp package. To be honest, I‚Äôm not the best C++ coder myself and am only moderately comfortable with Rcpp, so I‚Äôm not going to attempt a tutorial here. Instead, what I‚Äôll do is mention that <a href="https://www.rcpp.org/">rcpp.org</a> has some excellent resources, and <em>Advanced R</em> also has a good chapter on <a href="https://adv-r.hadley.nz/rcpp.html">Rewriting R code in C++</a> that you may find helpful. I‚Äôll also show you what I did for this system, because sometimes it‚Äôs helpful to see C++ code that implements the same functions as the original R code. Let‚Äôs imagine I have a file called <code>unbox-fast.cpp</code> that includes the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb26-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb26-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb26-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb26-7">NumericMatrix unboxer_rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-8">  </span>
<span id="cb26-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// variables</span></span>
<span id="cb26-10">  NumericMatrix pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> </span>
<span id="cb26-11">  NumericMatrix cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-12">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-14">  </span>
<span id="cb26-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// coefficients</span></span>
<span id="cb26-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-18">      cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-20">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-21">  </span>
<span id="cb26-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial point</span></span>
<span id="cb26-23">  pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-24">  pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-25">  pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-26">  </span>
<span id="cb26-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// accumulate</span></span>
<span id="cb26-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-29">    r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// which transform to use?</span></span>
<span id="cb26-30">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// which function to use?</span></span>
<span id="cb26-31">    </span>
<span id="cb26-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// apply transformation</span></span>
<span id="cb26-33">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-34">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-35">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-36">    </span>
<span id="cb26-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// apply function</span></span>
<span id="cb26-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-39">      s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-40">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-41">      y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-42">      z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-43">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-44">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-45">      y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-46">      z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-47">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-48">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-49">      y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-50">      z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb26-51">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-52">    </span>
<span id="cb26-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// store new point</span></span>
<span id="cb26-54">    pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-55">    pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-56">    pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-57">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb26-58">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-59"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>When sourced from R in the ‚Äúright‚Äù way, this will create a function <code>unboxer_rcpp()</code> that I can call from R. And when I say ‚Äúsourced‚Äù from R what I really mean is if I did this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">Rcpp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sourceCpp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unbox-fast.cpp"</span>)</span></code></pre></div>
</div>
<p>If you‚Äôve used Rcpp, this should seem familiar.</p>
<p>If you haven‚Äôt used Rcpp and are trying to make up your mind if it is worth the effort to learn, well, I‚Äôll offer this comparison. Here‚Äôs the difference in speed for generating a hundred thousand data points in the original system <code>unbox_base()</code>, compared to the C++ implementation <code>unbox_rcpp()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>(); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>); dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>(); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>); dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_rcpp</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.454 sec elapsed
0.004 sec elapsed</code></pre>
</div>
</div>
<p>Not too bad, really :)</p>
<p>When written in C++ we can generate 10 million data points extremely quickly. So much so that it‚Äôs outrageously fast to do it three times with different seeds and different numbers of layers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>); dat1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_rcpp</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="cb30-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>); dat2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_rcpp</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb30-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span>); dat3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_rcpp</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) </span>
<span id="cb30-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.566 sec elapsed</code></pre>
</div>
</div>
<div id="exercise-unboxing-rcpp" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>The C++ code for this system is included in the <code>unbox-fast.cpp</code> script, and the code calling it from R to test the timing is included as the <code>unbox-fast-test.R</code> script.</p>
</div>
</div>
<p>Transforming the data into plots, on the other hand, is a little slower. At this point the rendering code is the part that is causing slowness:</p>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb32-2">dat1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb32-3">dat2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb32-4">dat3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb32-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/first-rcpp-art-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/first-rcpp-art-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/first-rcpp-art-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<pre><code>203.938 sec elapsed</code></pre>
</div>
</div>
</div>
<p>Okay, so the data generation is fast now but producing the plots is still painfully slow. That‚Äôs a little unfortunate. Perhaps we can speed that up too? After all, ggplot2 has a lot of bells and whistles that we aren‚Äôt using in this plot. Maybe we can sidestep the issue‚Ä¶</p>
</section>
<section id="even-faster-chaos-with-raster-representation" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="even-faster-chaos-with-raster-representation">Even faster chaos with raster representation</h2>
<p>Back in the era when I held an academic appointment, one of my research topics used to be human mental representation. When people have to make judgments, choices, or reason about something unfamiliar, we rely on our knowledge of the world to guide us. We have rich, structured knowledge from our past experience that we can bring to bear on new situations, which is super useful because in addition to being fabulous and insanely complicated things, neurons are slow and squishy things relative to machines. Honestly it‚Äôs a bit of a surprise that we can compute anything with these things, and borderline miraculous that we manage to think clever thoughts using them.</p>
<p>All of this is in service of a really basic comment: if your computing machine doesn‚Äôt store data in a sensible format, you‚Äôre going to find it really hard to do anything useful. But the converse is also true‚Ä¶ if you represent information in the right way, you‚Äôll be able to accomplish a lot. Over and over again, across a lot of different problems I used to study, I‚Äôd see a consistent pattern: people make sensible choices when we‚Äôre given information structured in the ‚Äúright‚Äù way. But if you present the same information a different and counterintuitive way, people don‚Äôt know what to do with it and they make extremely poor choices. As a psychological researcher, it‚Äôs really easy to design studies that make people look stupid, and equally easy to design studies that make people look smart. Looking back, it strikes me that it‚Äôs almost criminally easy to ‚Äúrig‚Äù the results of a study this way.</p>
<p>Anyway.</p>
<p>My point here is that machines are kind of the same. If you want your image rendering to go faster, well, maybe you should store the data in a format that mirrors the output you want? I mean, at this point we‚Äôre storing a data frame with 10 millions coordinates, and then plotting circles in an abstract canvas that ggplot2 constructs with the help of the grid graphics system, and then‚Ä¶ aren‚Äôt you tired already?</p>
<p>If you want a bitmap that stores pixel values at the <em>end</em> of your generative process, why not <em>start</em> with the data in exactly the same format at the beginning? Don‚Äôt draw circles-as-polygons-around-a-coordinate. Just store the damned pixel values from the outset.</p>
<p>Okay, so here‚Äôs a slight reimagining of our Rcpp function that does exactly that. We store a matrix representing the bitmap from the very beginning. The output of this <code>unboxer_grid()</code> function is a square matrix with the number of rows and columns determined by the <code>pixels</code> input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb34-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb34-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb34-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-5"></span>
<span id="cb34-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb34-7">NumericMatrix unboxer_grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb34-8">                           <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb34-9">                           <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb34-10">                           <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> border<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-11">  </span>
<span id="cb34-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// variables</span></span>
<span id="cb34-13">  NumericMatrix image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pixels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> pixels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> </span>
<span id="cb34-14">  NumericMatrix cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-17">  </span>
<span id="cb34-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// set image matrix to zeros</span></span>
<span id="cb34-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pixels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pixels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-21">      image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb34-23">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb34-24">  </span>
<span id="cb34-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// coefficients</span></span>
<span id="cb34-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-28">      cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb34-30">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb34-31">  </span>
<span id="cb34-32">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// values for initial state</span></span>
<span id="cb34-33">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-34">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> y_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-35">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> z_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-36">  </span>
<span id="cb34-37">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// accumulate</span></span>
<span id="cb34-38">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-39">    r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// which transform to use?</span></span>
<span id="cb34-40">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// which function to use?</span></span>
<span id="cb34-41">    </span>
<span id="cb34-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// apply transformation</span></span>
<span id="cb34-43">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-44">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-45">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-46">    </span>
<span id="cb34-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// apply function</span></span>
<span id="cb34-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-49">      s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-50">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-51">      y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-52">      z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> abs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-53">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-54">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-55">      y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-56">      z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-57">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-58">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-59">      y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-60">      z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-61">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb34-62">    </span>
<span id="cb34-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute indices to be updated</span></span>
<span id="cb34-64">    x_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> border<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-65">    y_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> border<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-66">    </span>
<span id="cb34-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// store results if they fall within the range</span></span>
<span id="cb34-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pixels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-69">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> y_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pixels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb34-70">        image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-71">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb34-72">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb34-73">    </span>
<span id="cb34-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move new to old</span></span>
<span id="cb34-75">    x_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-76">    y_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-77">    z_old <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z_old<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb34-78">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb34-79">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-80"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>From a data generation perspective, there‚Äôs really not much difference between this version and the last one. They‚Äôre both fast. The C++ code to generate the image in a bitmap format isn‚Äôt faster or slower than the C++ code we wrote last time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>); mat1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_grid</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) </span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>); mat2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_grid</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) </span>
<span id="cb35-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span>); mat3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_grid</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb35-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.186 sec elapsed</code></pre>
</div>
</div>
<p>Ah, but now look what happens when we generate an image from the data. Originally we were working with ggplot2, and we were forcing it to convert a large data frame to an image in a very very painful way. This time around, the data is already in the right format. It‚Äôs a bitmap that we can pass to <code>image()</code>. No heavy lifting required!</p>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">raster_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(mat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trim =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>) {</span>
<span id="cb37-2">  </span>
<span id="cb37-3">  zlim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(mat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(trim, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> trim))</span>
<span id="cb37-4">  mat[mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb37-5">  mat[mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb37-6">  </span>
<span id="cb37-7">  op <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb37-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(</span>
<span id="cb37-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> mat, </span>
<span id="cb37-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb37-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb37-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb37-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb37-14">  )</span>
<span id="cb37-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(op)</span>
<span id="cb37-16">}</span>
<span id="cb37-17"></span>
<span id="cb37-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb37-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raster_art</span>(mat1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb37-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raster_art</span>(mat2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span>
<span id="cb37-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raster_art</span>(mat3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span>)</span>
<span id="cb37-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/image-plot-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/image-plot-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/image-plot-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<pre><code>0.983 sec elapsed</code></pre>
</div>
</div>
</div>
<p>Okay fine, this new version doesn‚Äôt handle shading in precisely the same way the original version did, but it‚Äôs still very pretty ‚Äì and it‚Äôs soooooo much faster!</p>
<p>How fast is it? Fast enough that I‚Äôm perfectly willing to generate an image by playing the chaos game for 100 million iterations. Hell, it‚Äôs fast enough that I‚Äôll generate six of them:</p>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">pretty_boxes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb39-2">    seed,</span>
<span id="cb39-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000000</span>, </span>
<span id="cb39-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb39-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>, </span>
<span id="cb39-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb39-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb39-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trim =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span></span>
<span id="cb39-9">) {</span>
<span id="cb39-10">  </span>
<span id="cb39-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb39-12">  </span>
<span id="cb39-13">  mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_grid</span>(</span>
<span id="cb39-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> iterations, </span>
<span id="cb39-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> layers, </span>
<span id="cb39-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> pixels, </span>
<span id="cb39-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border =</span> border</span>
<span id="cb39-18">  )</span>
<span id="cb39-19">  </span>
<span id="cb39-20">  shades <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(background, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1023</span>))</span>
<span id="cb39-21">  </span>
<span id="cb39-22">  zlim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(mat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(trim, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> trim))</span>
<span id="cb39-23">  mat[mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb39-24">  mat[mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb39-25">  </span>
<span id="cb39-26">  op <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb39-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(</span>
<span id="cb39-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> mat, </span>
<span id="cb39-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb39-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb39-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb39-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> shades</span>
<span id="cb39-33">  )</span>
<span id="cb39-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(op)</span>
<span id="cb39-35">}</span>
<span id="cb39-36"></span>
<span id="cb39-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb39-38"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_boxes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">286</span>)</span>
<span id="cb39-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_boxes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">380</span>)</span>
<span id="cb39-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_boxes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb39-41"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/pretty-boxes-1.png" class="img-fluid" width="4000"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/pretty-boxes-2.png" class="img-fluid" width="4000"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/pretty-boxes-3.png" class="img-fluid" width="4000"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<pre><code>34.924 sec elapsed</code></pre>
</div>
</div>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb41-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_boxes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">222</span>)</span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_boxes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">567</span>)</span>
<span id="cb41-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_boxes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">890</span>)</span>
<span id="cb41-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>() </span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/more-pretty-boxes-1.png" class="img-fluid" width="4000"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/more-pretty-boxes-2.png" class="img-fluid" width="4000"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/index_files/figure-html/more-pretty-boxes-3.png" class="img-fluid" width="4000"></p>
</div>
</div>
<div class="quarto-layout-row">
<div class="cell-output cell-output-stdout quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<pre><code>39.075 sec elapsed</code></pre>
</div>
</div>
</div>
<div id="exercise-pretty-boxes" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>The C++ code to generate the data for this system is included in the <code>unbox-grid.cpp</code> script, and plotting code is in the <code>pretty-boxes.R</code> script.</p>
</div>
</div>
</section>
<section id="materials" class="level2">
<h2 class="anchored" data-anchor-id="materials">Materials</h2>
<p>Code for each of the source files referred to in this section of the workshop is included here. Click on the callout box below to see the code for the file you want to look at. Please keep in mind that (unlike the code in the main text) I haven‚Äôt modified these scripts since the original workshop, so you might need to play around with them to get them to work!</p>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="barnsley-fern.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
barnsley-fern.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb43-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb43-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb43-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb43-5"></span>
<span id="cb43-6">fern_transform <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(coord, ind) {</span>
<span id="cb43-7">  </span>
<span id="cb43-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients for the stem function f_1</span></span>
<span id="cb43-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb43-10">    mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matrix to multiply</span></span>
<span id="cb43-11">    off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># offset vector to add</span></span>
<span id="cb43-12">  }</span>
<span id="cb43-13">  </span>
<span id="cb43-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients for the small leaflet function f_2</span></span>
<span id="cb43-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) {</span>
<span id="cb43-16">    mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">04</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">04</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb43-17">    off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>)                      </span>
<span id="cb43-18">  }</span>
<span id="cb43-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients for the right-side function f_3</span></span>
<span id="cb43-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb43-21">    mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb43-22">    off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>)                      </span>
<span id="cb43-23">  }</span>
<span id="cb43-24">  </span>
<span id="cb43-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients for the left-side function f_4</span></span>
<span id="cb43-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb43-27">    mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb43-28">    off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span>)                     </span>
<span id="cb43-29">  }</span>
<span id="cb43-30">  </span>
<span id="cb43-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the affine transformed coords</span></span>
<span id="cb43-32">  coord <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> coord <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> off</span>
<span id="cb43-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(coord)</span>
<span id="cb43-34">}</span>
<span id="cb43-35"></span>
<span id="cb43-36">fern_chaos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb43-37">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb43-38">  </span>
<span id="cb43-39">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which transformation to apply at each iteration</span></span>
<span id="cb43-40">  transform_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb43-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb43-42">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> iterations, </span>
<span id="cb43-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb43-44">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">07</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">07</span>)</span>
<span id="cb43-45">  )</span>
<span id="cb43-46">  </span>
<span id="cb43-47">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialise chaos game at the origin</span></span>
<span id="cb43-48">  start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb43-49">  </span>
<span id="cb43-50">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helper function to collapse accumulated output</span></span>
<span id="cb43-51">  bind_to_column_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(lst) {</span>
<span id="cb43-52">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(cbind, lst)</span>
<span id="cb43-53">  }</span>
<span id="cb43-54">  </span>
<span id="cb43-55">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate until done!</span></span>
<span id="cb43-56">  coord_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> transform_index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-57">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(fern_transform, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> start) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-58">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_to_column_matrix</span>() </span>
<span id="cb43-59">  </span>
<span id="cb43-60">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tidy the output, add extra columns, and return</span></span>
<span id="cb43-61">  coord_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(coord_matrix) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb43-62">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() </span>
<span id="cb43-63">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(coord_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)</span>
<span id="cb43-64">  coord_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> coord_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-66">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb43-67">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transform =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, transform_index),</span>
<span id="cb43-68">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iteration =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb43-69">    )</span>
<span id="cb43-70">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(coord_df)</span>
<span id="cb43-71">}</span>
<span id="cb43-72"></span>
<span id="cb43-73">fern_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fern_chaos</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-74"></span>
<span id="cb43-75">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(fern_dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(transform))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-76">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-77">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-78">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-79">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(</span>
<span id="cb43-80">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transformation"</span>, </span>
<span id="cb43-81">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb43-82">  )</span>
<span id="cb43-83"></span>
<span id="cb43-84"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="pretty-boxes.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
pretty-boxes.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb44-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(Rcpp)</span>
<span id="cb44-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb44-4"></span>
<span id="cb44-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sourceCpp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"materials"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unbox-grid.cpp"</span>))</span>
<span id="cb44-6"></span>
<span id="cb44-7">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb44-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb44-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-10">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb44-11">}</span>
<span id="cb44-12"></span>
<span id="cb44-13">pretty_boxes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb44-14">    seed,</span>
<span id="cb44-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000000</span>, </span>
<span id="cb44-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb44-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>, </span>
<span id="cb44-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb44-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb44-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trim =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span></span>
<span id="cb44-21">) {</span>
<span id="cb44-22">  </span>
<span id="cb44-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb44-24">  </span>
<span id="cb44-25">  mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_grid</span>(</span>
<span id="cb44-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> iterations, </span>
<span id="cb44-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> layers, </span>
<span id="cb44-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> pixels, </span>
<span id="cb44-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border =</span> border</span>
<span id="cb44-30">  )</span>
<span id="cb44-31">  </span>
<span id="cb44-32">  shades <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(background, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1023</span>))</span>
<span id="cb44-33">  </span>
<span id="cb44-34">  zlim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(mat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(trim, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> trim))</span>
<span id="cb44-35">  mat[mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb44-36">  mat[mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> zlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb44-37">  </span>
<span id="cb44-38">  op <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb44-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(</span>
<span id="cb44-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> mat, </span>
<span id="cb44-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb44-42">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb44-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb44-44">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> shades</span>
<span id="cb44-45">  )</span>
<span id="cb44-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(op)</span>
<span id="cb44-47">}</span>
<span id="cb44-48"></span>
<span id="cb44-49"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb44-50"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_boxes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000000</span>)</span>
<span id="cb44-51"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="unbox-base.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
unbox-base.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb45-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb45-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb45-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb45-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb45-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb45-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb45-8"></span>
<span id="cb45-9">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb45-10">  </span>
<span id="cb45-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb45-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb45-13">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb45-14">}</span>
<span id="cb45-15"></span>
<span id="cb45-16">funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb45-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb45-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point),</span>
<span id="cb45-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point)</span>
<span id="cb45-20">)</span>
<span id="cb45-21"></span>
<span id="cb45-22">unboxer_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(iterations, layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb45-23">  </span>
<span id="cb45-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb45-25">  </span>
<span id="cb45-26">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients defining affine layer transforms, A_i</span></span>
<span id="cb45-27">  coeffs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(</span>
<span id="cb45-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb45-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, layers)</span>
<span id="cb45-30">  )</span>
<span id="cb45-31">  </span>
<span id="cb45-32">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list of variant functions, g_j</span></span>
<span id="cb45-33">  funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb45-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb45-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point),</span>
<span id="cb45-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(point)</span>
<span id="cb45-37">  )</span>
<span id="cb45-38">  </span>
<span id="cb45-39">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># updater function: apply the layer, then the function</span></span>
<span id="cb45-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (the weirdness with point[3] is me treating colour as special)</span></span>
<span id="cb45-41">  update <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(point, layer, transform) {</span>
<span id="cb45-42">    f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> funs[[transform]]</span>
<span id="cb45-43">    z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb45-44">    point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb45-45">    point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(point <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> coeffs[,,layer])</span>
<span id="cb45-46">    point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (point[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb45-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(point)</span>
<span id="cb45-48">  }</span>
<span id="cb45-49">  </span>
<span id="cb45-50">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial point</span></span>
<span id="cb45-51">  point0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb45-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb45-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb45-54">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb45-55">  )</span>
<span id="cb45-56">  </span>
<span id="cb45-57">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample points</span></span>
<span id="cb45-58">  layer_ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(layers, iterations, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  </span>
<span id="cb45-59">  trans_ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(funs), iterations, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  </span>
<span id="cb45-60">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate2</span>(layer_ind, trans_ind, update, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> point0)</span>
<span id="cb45-61">  </span>
<span id="cb45-62">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tidy up, add columns, and return</span></span>
<span id="cb45-63">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(points), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb45-64">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(</span>
<span id="cb45-65">    points,</span>
<span id="cb45-66">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, layer_ind),</span>
<span id="cb45-67">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, trans_ind)</span>
<span id="cb45-68">  )</span>
<span id="cb45-69">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(points)</span>
<span id="cb45-70">}</span>
<span id="cb45-71"></span>
<span id="cb45-72">unbox_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb45-73">  </span>
<span id="cb45-74">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to data frame and sample a palette</span></span>
<span id="cb45-75">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb45-76">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(data)]</span>
<span id="cb45-77">  shades <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed)</span>
<span id="cb45-78">  </span>
<span id="cb45-79">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># render image as a scatter plot</span></span>
<span id="cb45-80">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> c)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-81">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb45-82">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size,</span>
<span id="cb45-83">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb45-84">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb45-85">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb45-86">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb45-87">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb45-88">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> shades) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb45-89">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-90">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb45-91">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(</span>
<span id="cb45-92">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> shades[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shades[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb45-93">    ))</span>
<span id="cb45-94">}</span>
<span id="cb45-95"></span>
<span id="cb45-96"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb45-97"></span>
<span id="cb45-98">seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span></span>
<span id="cb45-99">layers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb45-100"></span>
<span id="cb45-101">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_base</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb45-102">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unbox_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="cb45-103">fname <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unboxer-base-"</span>, layers, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, seed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>)</span>
<span id="cb45-104"></span>
<span id="cb45-105"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(</span>
<span id="cb45-106">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, fname), </span>
<span id="cb45-107">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> pic,</span>
<span id="cb45-108">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb45-109">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb45-110">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"px"</span>,</span>
<span id="cb45-111">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb45-112">)</span>
<span id="cb45-113"></span>
<span id="cb45-114"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="unbox-fast-test.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
unbox-fast-test.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(Rcpp)</span>
<span id="cb46-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb46-4"></span>
<span id="cb46-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sourceCpp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"materials"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unbox-fast.cpp"</span>))</span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>() </span>
<span id="cb46-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>)</span>
<span id="cb46-9">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_rcpp</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb46-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>() </span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="unbox-fast.cpp">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
unbox-fast.cpp
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#include &lt;Rcpp.h&gt;</span></span>
<span id="cb47-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#include &lt;iostream&gt;</span></span>
<span id="cb47-3">using namespace Rcpp;</span>
<span id="cb47-4">using namespace std;</span>
<span id="cb47-5"></span>
<span id="cb47-6"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> [[Rcpp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>export]]</span>
<span id="cb47-7">NumericMatrix <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_rcpp</span>(int iterations, int layers) {</span>
<span id="cb47-8">  </span>
<span id="cb47-9">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> variables</span>
<span id="cb47-10">  NumericMatrix <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(iterations, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>); </span>
<span id="cb47-11">  NumericMatrix <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, layers);</span>
<span id="cb47-12">  int r, f;</span>
<span id="cb47-13">  double x, y, z, s;</span>
<span id="cb47-14">  </span>
<span id="cb47-15">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> coefficients</span>
<span id="cb47-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(int <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>; i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>; i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb47-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(int <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">j =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>; j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> layers; j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb47-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(i,j) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb47-19">    }</span>
<span id="cb47-20">  }</span>
<span id="cb47-21">  </span>
<span id="cb47-22">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> initial point</span>
<span id="cb47-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb47-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb47-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb47-26">  </span>
<span id="cb47-27">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> accumulate</span>
<span id="cb47-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(int <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>; t <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iterations; t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb47-29">    r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>() % layers; <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> which transform to use?</span>
<span id="cb47-30">      f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>() % <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>;      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> which <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> to use?</span>
<span id="cb47-31">        </span>
<span id="cb47-32">        <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> apply transformation</span>
<span id="cb47-33">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(t<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(t<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, r);</span>
<span id="cb47-34">      y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(t<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(t<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, r);</span>
<span id="cb47-35">      z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(t<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(t<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, r);</span>
<span id="cb47-36">      </span>
<span id="cb47-37">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> apply <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span></span>
<span id="cb47-38">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb47-39">        s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pow</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>);</span>
<span id="cb47-40">        x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s;</span>
<span id="cb47-41">        y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s;</span>
<span id="cb47-42">        z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s;</span>
<span id="cb47-43">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb47-44">        x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(x);</span>
<span id="cb47-45">        y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(y);</span>
<span id="cb47-46">        z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(z);</span>
<span id="cb47-47">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb47-48">        x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(x);</span>
<span id="cb47-49">        y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(y);</span>
<span id="cb47-50">        z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(z);</span>
<span id="cb47-51">      }</span>
<span id="cb47-52">      </span>
<span id="cb47-53">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> store new point</span>
<span id="cb47-54">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(t, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x;</span>
<span id="cb47-55">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(t, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> y;</span>
<span id="cb47-56">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(t, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pts</span>(t<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>;</span>
<span id="cb47-57">  }</span>
<span id="cb47-58">  return pts;</span>
<span id="cb47-59">}</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="unbox-grid.cpp">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
unbox-grid.cpp
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#include &lt;Rcpp.h&gt;</span></span>
<span id="cb48-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#include &lt;iostream&gt;</span></span>
<span id="cb48-3">using namespace Rcpp;</span>
<span id="cb48-4">using namespace std;</span>
<span id="cb48-5"></span>
<span id="cb48-6"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> [[Rcpp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>export]]</span>
<span id="cb48-7">NumericMatrix <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unboxer_grid</span>(int iterations, </span>
<span id="cb48-8">                           int layers,</span>
<span id="cb48-9">                           int pixels, </span>
<span id="cb48-10">                           double border) {</span>
<span id="cb48-11">  </span>
<span id="cb48-12">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> variables</span>
<span id="cb48-13">  NumericMatrix <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(pixels, pixels); </span>
<span id="cb48-14">  NumericMatrix <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, layers);</span>
<span id="cb48-15">  int r, c, f, x_ind, y_ind;</span>
<span id="cb48-16">  double x, y, z, s;</span>
<span id="cb48-17">  </span>
<span id="cb48-18">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> set image matrix to zeros</span>
<span id="cb48-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(int <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>; r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pixels; r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb48-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(int <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>; c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pixels; c<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb48-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(c, r) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb48-22">    }</span>
<span id="cb48-23">  }</span>
<span id="cb48-24">  </span>
<span id="cb48-25">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> coefficients</span>
<span id="cb48-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(int <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>; i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>; i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb48-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(int <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">j =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>; j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> layers; j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb48-28">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(i,j) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb48-29">    }</span>
<span id="cb48-30">  }</span>
<span id="cb48-31">  </span>
<span id="cb48-32">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> values <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> initial state</span>
<span id="cb48-33">  double x_old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb48-34">  double y_old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb48-35">  double z_old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb48-36">  </span>
<span id="cb48-37">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> accumulate</span>
<span id="cb48-38">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(int <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>; t <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iterations; t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb48-39">    r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>() % layers; <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> which transform to use?</span>
<span id="cb48-40">    f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>() % <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>;      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> which <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> to use?</span>
<span id="cb48-41">    </span>
<span id="cb48-42">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> apply transformation</span>
<span id="cb48-43">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_old <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y_old <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, r);</span>
<span id="cb48-44">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_old <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y_old <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, r);</span>
<span id="cb48-45">    z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_old <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y_old <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cff</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, r);</span>
<span id="cb48-46">    </span>
<span id="cb48-47">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> apply <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span></span>
<span id="cb48-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb48-49">      s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pow</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>);</span>
<span id="cb48-50">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s;</span>
<span id="cb48-51">      y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s;</span>
<span id="cb48-52">      z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s);</span>
<span id="cb48-53">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb48-54">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(x);</span>
<span id="cb48-55">      y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(y);</span>
<span id="cb48-56">      z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(z) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>;</span>
<span id="cb48-57">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb48-58">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(x);</span>
<span id="cb48-59">      y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(y);</span>
<span id="cb48-60">      z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(z) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb48-61">    }</span>
<span id="cb48-62">    </span>
<span id="cb48-63">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> compute indices to be updated</span>
<span id="cb48-64">    x_ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">int</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pixels <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> border)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pixels <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>;</span>
<span id="cb48-65">    y_ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">int</span> (y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pixels <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> border)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pixels <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>;</span>
<span id="cb48-66">    </span>
<span id="cb48-67">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> store results <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> they fall within the range</span>
<span id="cb48-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(x_ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x_ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pixels) {</span>
<span id="cb48-69">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(y_ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> y_ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pixels) {</span>
<span id="cb48-70">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(x_ind, y_ind) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> z;</span>
<span id="cb48-71">      }</span>
<span id="cb48-72">    }</span>
<span id="cb48-73">    </span>
<span id="cb48-74">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span> move new to old</span>
<span id="cb48-75">    x_old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x;</span>
<span id="cb48-76">    y_old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> y;</span>
<span id="cb48-77">    z_old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z_old) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>; </span>
<span id="cb48-78">  }</span>
<span id="cb48-79">  return image;</span>
<span id="cb48-80">}</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Art from Code {V:} {Iterated} Function Systems},
  date = {2024-12-22},
  url = {https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>‚ÄúArt from Code V: Iterated Function
Systems.‚Äù</span> December 22, 2024. <a href="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/">https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/</guid>
  <pubDate>Sat, 21 Dec 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-12-22_art-from-code-5/pretty-boxes.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Art from code IV: Shading tricks</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><em>A couple of years ago I gave an invited workshop called <a href="https://art-from-code.netlify.app">art from code</a> at the 2022 rstudio::conf (now posit::conf) conference. As part of the workshop I wrote a lengthy series of notes on how to make generative art using R, all of which were released under a CC-BY licence. For a while now I‚Äôd been thinking I should do something with these notes. I considered writing a book, but in all honesty I don‚Äôt have the spare capacity for a side-project of that scale these days. I can barely keep up with the workload at my day job as it is. So instead, I‚Äôve decided that I‚Äôd port them over to this site as a series of blog posts. In doing so I‚Äôve made a deliberate decision not to modify the original content too much (nobody loves it when an artist tries to ‚Äúimprove‚Äù the original, after all). All I‚Äôve done is update the code to accommodate package changes since 2022, and some minor edits so that the images are legible when embedded in this blog (which is light-themed, and the original was dark-theme). Other than that, I‚Äôve left it alone. This is the fourth post in that series.</em></p>
<ul>
<li><a href="../../posts/2024-12-18_art-from-code-1/">Prelude</a></li>
<li><a href="../../posts/2024-12-19_art-from-code-2/">Spatial tricks with ambient</a></li>
<li><a href="../../posts/2024-12-20_art-from-code-3/">Polygon tricks</a></li>
<li><a href="../../posts/2024-12-21_art-from-code-4/">Shading tricks</a></li>
<li><a href="../../posts/2024-12-22_art-from-code-5/">Iterated function systems</a></li>
<li><a href="../../posts/2024-12-23_art-from-code-6/">Tiles and tessellations</a></li>
<li><a href="../../posts/2024-12-24_art-from-code-7/">Pixel filters</a></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rayshader)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
</div>
<section id="rayshader-art" class="level2">
<h2 class="anchored" data-anchor-id="rayshader-art">Rayshader art</h2>
<p>The <a href="https://www.rayshader.com/">rayshader package</a> is a tool used to generate 2D and 3D visualisations in R. It is designed primarily to work with elevation data: you can use it to create beautiful shaded maps in two and three dimensions. You don‚Äôt have to restrict yourself to mapping applications though. For example, you can use it to create 3D ggplot images if you want. More importantly for our purposes, generative artists in the R community have begun exploring the artistic possibilities inherent in the package. It‚Äôs a relatively new addition to my repertoire: I‚Äôve only built a few generative art systems this way, and I‚Äôm still a novice user of the package. However, it‚Äôs too much fun <em>not</em> to talk about it here, so let‚Äôs take <code>rayshader</code> for a spin.</p>
<p>To help get us started, I‚Äôll build a very simple generative art system. All it does is overlay a few circles on top of one another. To make this system work, I‚Äôll define a helper function <code>is_within_circle</code> that takes coordinate vectors <code>x_coord</code> and <code>y_coord</code> as inputs, and returns a logical vector that is <code>TRUE</code> whenever those coordinates fall within a circle specified by the <code>radius</code>, <code>x_center</code>, and <code>y_center</code> values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">is_within_circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x_coord, y_coord, x_center, y_center, radius) {</span>
<span id="cb2-2">  (x_coord <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_center)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y_coord <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_center)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-3">}</span></code></pre></div>
</div>
<p>The <code>additive_circles()</code> function generates <code>n</code> circles at random (defaulting to 5 circles), and returns a long grid that defines a canvas with coordinate columns <code>x</code> and <code>y</code>, and a value column <code>paint</code> indicating the proportion of circles that each point falls in. If a particular point falls within every circle, the corresponding <code>paint</code> value is 1; if it falls within none of the circles the value is 0:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">additive_circles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb3-4">  </span>
<span id="cb3-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup canvas</span></span>
<span id="cb3-6">  art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb3-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels),</span>
<span id="cb3-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels)</span>
<span id="cb3-9">  )</span>
<span id="cb3-10">  art<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>paint <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-11">  </span>
<span id="cb3-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb3-13">    </span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample a random circle</span></span>
<span id="cb3-15">    x_center <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb3-16">    y_center <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb3-17">    radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb3-18">    </span>
<span id="cb3-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add +1 to all points inside the circle</span></span>
<span id="cb3-20">    art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> art <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb3-22">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> paint <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_within_circle</span>(</span>
<span id="cb3-23">          x, y, x_center, y_center, radius</span>
<span id="cb3-24">        )</span>
<span id="cb3-25">      )</span>
<span id="cb3-26">  }</span>
<span id="cb3-27">  </span>
<span id="cb3-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalise paint to [0, 1] range and return</span></span>
<span id="cb3-29">  art<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>paint <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(art<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>paint)</span>
<span id="cb3-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(art)</span>
<span id="cb3-31">}</span></code></pre></div>
</div>
<p>Here‚Äôs what happens when we generate output from the system and then use <code>geom_raster()</code> to plot it:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">circle_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">additive_circles</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>)</span>
<span id="cb4-2">circle_art</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 √ó 3
       x       y paint
   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1     0 0           0
 2     0 0.00100     0
 3     0 0.00200     0
 4     0 0.00300     0
 5     0 0.00400     0
 6     0 0.00501     0
 7     0 0.00601     0
 8     0 0.00701     0
 9     0 0.00801     0
10     0 0.00901     0
# ‚Ñπ 999,990 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(circle_art, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> paint)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/circle-addition-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Experienced ggplot2 users might wonder why I‚Äôm generating art in this fashion. Why go to all the trouble of defining a raster when ggplot2 already has a <code>geom_polygon()</code> function that I could have used to draw the same image? The answer to this is that the rayshader package likes to deal with matrices (and other arrays). Instead of representing the data in a tibble with <code>x</code> and <code>y</code> coordinates that just happen to define a grid, it expects inputs in the form of a matrix where each row corresponds to a <code>y</code> coordinate and each column corresponds to an <code>x</code> coordinate, and the values in each cell correspond to (in our case) the <code>paint</code> values. Conveniently for us, the object we used to store our artwork isn‚Äôt a regular tibble, it‚Äôs a long grid provide by the ambient package. The ambient package knows how to convert this to an array quickly and painlessly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">circle_array <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> circle_art <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> paint) </span>
<span id="cb7-3"></span>
<span id="cb7-4">circle_array[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       x
y       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
   [1,]    0    0    0    0    0    0    0    0    0     0
   [2,]    0    0    0    0    0    0    0    0    0     0
   [3,]    0    0    0    0    0    0    0    0    0     0
   [4,]    0    0    0    0    0    0    0    0    0     0
   [5,]    0    0    0    0    0    0    0    0    0     0
   [6,]    0    0    0    0    0    0    0    0    0     0
   [7,]    0    0    0    0    0    0    0    0    0     0
   [8,]    0    0    0    0    0    0    0    0    0     0
   [9,]    0    0    0    0    0    0    0    0    0     0
  [10,]    0    0    0    0    0    0    0    0    0     0</code></pre>
</div>
</div>
<p>The ability to flip back and forth between a tibble-like representation and a matrix-like representation is very handy! Anyway, the important point is that <code>circle_array</code> is now a matrix. I can plot this matrix directly using <code>image()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">circle_array <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/show-circle-array-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Let‚Äôs imagine for a moment that this image is actually a terrain map, and the values stored in <code>circle_array</code> refer to the height of the terrain at each point on the grid. If that were true, and we placed an illumination source above the terrain, what pattern of shadows would be cast? We can solve this using ray shading algorithms, and unsurprisingly the rayshader package contains a function called <code>ray_shade()</code> that does this for us. We pass our data matrix as the <code>heightmap</code> argument, provide <code>sunaltitude</code> and <code>sunangle</code> arguments to specify the position of the illumination source, and use the <code>zscale</code> argument to specify the scale of the z-axis (the values) relative to the x- and y-axes.</p>
<p>Here‚Äôs what that looks like:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">circle_shadow <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ray_shade</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> circle_array,</span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunaltitude =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, </span>
<span id="cb10-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunangle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">135</span>,</span>
<span id="cb10-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb10-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multicore =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb10-7">)</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_map</span>(circle_shadow, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rotate =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">270</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/circle-shadow-map-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>The results lack colour because this is only a map of the intensity of the shadow at each point. It‚Äôs not a map of the terrain. If we want to construct that map we need something like a hill shading algorithm supplied by <code>sphere_shade()</code>, but that requires us to supply a texture. That‚Äôs probably overkill for our initial application. Alternatively, if all we want is a height-to-colour mapping, we can use <code>height_shade()</code> to create the texture, and then use <code>add_shadow()</code> to add the shadow:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">circle_scape <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> circle_array <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height_shade</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_shadow</span>(</span>
<span id="cb11-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadowmap =</span> circle_shadow,</span>
<span id="cb11-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_darken =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-6">  )</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_map</span>(circle_scape, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rotate =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">270</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/circle-render-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>In the final line I called <code>plot_map()</code> to draw the final image, using the <code>rotate</code> argument so that the final image has the same orientation as the image I created with <code>geom_raster()</code> at the beginning of this page.</p>
<div id="exercise-circle-scape" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>At this point in the workshop, I hope that you‚Äôre starting to get a sense for <em>how</em> to go about tweaking a generative system and how to create new things using it. So from this point the ‚Äúexercises‚Äù are going to be a bit less structured. What I‚Äôll do is point you to the scripts that implement each system, and in each case the exercise is going to be the same: play with the system, see what it can do, modify it as you see fit, and see where your own intuitions take you!</p>
<p>Code for this system is included in the <code>circle-scape.R</code> script in the materials. Enjoy! Explore!</p>
</div>
</div>
</section>
<section id="shadowed-noise-fields" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="shadowed-noise-fields">Shadowed noise fields</h2>
<p>Now that we have a general sense of how to use rayshader to create pretty images, let‚Äôs see if we can use it to make something a little more interesting than a shaded map of a few circles laid on top of one another. One place to start is to return to the spatial noise patterns generated by <code>gen_perlin()</code>, <code>gen_simplex()</code> and so on. There‚Äôs some potential for interesting art there right?</p>
<p>Before we get into that, we‚Äôre going to ‚Äì yet again ‚Äì need a palette generating function. So once again I‚Äôll define a function to sample palettes using the <code>ggthemes::canva_palettes</code> list. However, this time around I‚Äôll be a little more elaborate. All the palettes in the original object contain exactly four colours. What I‚Äôll with the <code>sample_canva2()</code> function is include an <code>n</code> argument that specifies the number of colours desired, linearly interpolating between colours as necessary.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb12-2">  </span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-5">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb12-6">}</span></code></pre></div>
</div>
<p>Here‚Äôs an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "#FCC875" "#BAA896" "#E6CCB5" "#E38B75"
[1] "#FCC875" "#DBB885" "#BAA896" "#D0BAA5" "#E6CCB5" "#E4AB95" "#E38B75"</code></pre>
</div>
</div>
<p>This functionality is handy in this context to ensure that we have enough different colours to produce nice gradients in our rayshader outputs. When working with ggplot2 the <code>scale_*_gradientn()</code> function took care of that for us, but we‚Äôre not using ggplot2 here.</p>
<p>In any case, here‚Äôs <code>ridge_art()</code>, a function that uses the spatial noise toolkit from the ambient package to produce patterns. The output comes in matrix form rather than as a long grid:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">ridge_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>) {</span>
<span id="cb15-2">  </span>
<span id="cb15-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb15-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels),</span>
<span id="cb15-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels)</span>
<span id="cb15-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb15-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb15-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb15-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb15-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb15-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex,</span>
<span id="cb15-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ridged,</span>
<span id="cb15-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb15-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb15-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed</span>
<span id="cb15-17">      ),</span>
<span id="cb15-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(paint)</span>
<span id="cb15-19">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> paint)</span>
<span id="cb15-21">}</span></code></pre></div>
</div>
<p>All the work in generating images is being done by the <code>gen_simplex()</code> generator, the <code>ridged()</code> fractal function, and the <code>fracture()</code> function that provides ambients API for fractal noise. To give you a sense of what kind of output this system produces natively, here‚Äôs an <code>image()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ridge_art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(</span>
<span id="cb16-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb16-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb16-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb16-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb16-7">  ) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/ridged-art-example-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>That‚Äôs quite pretty in its own right, but we can give it a real feeling of depth by using rayshader. The idea is essentially identical to what we did when shading our circles art: compute a height map, a shadow map, and add them together before calling <code>plot_map()</code>. Here‚Äôs the code for a <code>shaded_ridge_art()</code> function that does this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">shaded_ridge_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb17-2">  </span>
<span id="cb17-3">  art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ridge_art</span>(seed) </span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height_shade</span>(</span>
<span id="cb17-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> art,</span>
<span id="cb17-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">texture =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb17-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_shadow</span>(</span>
<span id="cb17-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadowmap =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ray_shade</span>(</span>
<span id="cb17-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> art, </span>
<span id="cb17-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunaltitude =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb17-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunangle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>,</span>
<span id="cb17-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multicore =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb17-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span></span>
<span id="cb17-15">      ), </span>
<span id="cb17-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_darken =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-17">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_map</span>()</span>
<span id="cb17-19">}</span></code></pre></div>
</div>
<p>Here‚Äôs our ridged art piece rendered as a shaded version:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ridge_art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/rayshader-art-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>18.801 sec elapsed</code></pre>
</div>
</div>
<p>Just because they‚Äôre pretty and it‚Äôs not that hard to generate new pieces ‚Äì one of the joys of generative art is that the moment you make one piece you like you can immediately make many more in the same style ‚Äì here are a few more outputs from the system:</p>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ridge_art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ridge_art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ridge_art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>) </span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/more-rayshade-art-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/more-rayshade-art-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/more-rayshade-art-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="exercise-shaded-ridge" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>shaded-ridge-art.R</code> script in the materials.</p>
</div>
</div>
</section>
<section id="fractured-terrain" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="fractured-terrain">Fractured terrain</h2>
<p>Back in the early days of the pandemic I made a series of generative art pieces called <em>Quarantine Moods</em> that was, well, pretty incoherent. Not very surprising: I was trapped indoors and stressed, so there‚Äôs no theme or structure to the whole thing. Later on though I found the code for one of the pieces that I really liked and reworked it to create a new system that I called <a href="https://art.djnavarro.net/gallery/ice-floes/">Ice Floes</a>. Pieces from this system have a jagged, fractured geometric look to them. One of the first thoughts I had when exploring the rayshader package was that these images would generate some really interesting shadows, and it would be fun to see what happens when I applied rayshader methods to those outputs. So‚Ä¶ that‚Äôs what I did!</p>
<p>The first step in the process is to recreate the ice floes system, or at least something very similar to it. The trick behind this system is to generate spatial noise defined over a <em>different</em> space to the one I intend to plot at the end. I generate new coordinates by constructing a map from the original coordinates to the corresponding curl space. Or, to put it in less pretentious terms, I use <code>curl_noise()</code> to produce a new set of coordinates that I‚Äôm going to feed into other noise processes. Here‚Äôs the function I‚Äôll use to that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">transform_to_curl_space <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb22-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> fracture,</span>
<span id="cb22-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex,</span>
<span id="cb22-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm,</span>
<span id="cb22-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb22-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb22-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb22-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb22-10">  )</span>
<span id="cb22-11">}</span></code></pre></div>
</div>
<p>The next step is to use Worley noise to construct a set of cells, in this transformed space. To do that I‚Äôll define a helper function that takes a set of coordinates (in whatever space) as input and outputs values associated with the cells:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">define_worley_cells <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) {</span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb23-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_worley,</span>
<span id="cb23-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> billow,</span>
<span id="cb23-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb23-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb23-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cell"</span>,</span>
<span id="cb23-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb23-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb23-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rank</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb23-13">}</span></code></pre></div>
</div>
<p>Now back in the original space, we‚Äôll use the cell values to (discontinuously) add offsets to the x- and y-coordinates, and then generate simplex noise using those offset coordinates. The net effect of this is that we have the simplex noise varies smoothly within cells (whose borders are quite peculiar because they‚Äôre generated in the curl space) but discontinuous between cells. This is going to give us an image that is both smooth and jagged.</p>
<p>Anyway, this means we need one more helper function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">simplex_noise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb24-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex,</span>
<span id="cb24-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ridged,</span>
<span id="cb24-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb24-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb24-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb24-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb24-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb24-11">}</span></code></pre></div>
</div>
<p>Now we have all the pieces we need to construct an <code>ice_floe()</code> function that is more or less equivalent to my original system:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">ice_floe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb25-2">  </span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb25-4">  </span>
<span id="cb25-5">  grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb25-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>),</span>
<span id="cb25-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)</span>
<span id="cb25-8">  )</span>
<span id="cb25-9">  </span>
<span id="cb25-10">  coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform_to_curl_space</span>(grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y)</span>
<span id="cb25-11">  </span>
<span id="cb25-12">  grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb25-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cells =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">define_worley_cells</span>(coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y),</span>
<span id="cb25-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simplex_noise</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cells, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cells),</span>
<span id="cb25-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(paint)</span>
<span id="cb25-17">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> paint)</span>
<span id="cb25-19">}</span></code></pre></div>
</div>
<p>To give you a sense of what images from the original system look like when coloured using one of the canva palettes, I‚Äôll again use <code>image()</code> to plot the output of the base system:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ice_floe</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(</span>
<span id="cb26-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb26-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb26-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb26-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb26-7">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/basic-ice-floe-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Creating the shaded version of the system proceeds the same way it did when we created the <code>shaded_ridge_art()</code> function. We call <code>ice_floe()</code> to create a matrix of elevations, construct an appropriately shaded elevation map using <code>height_shade()</code>, and then call <code>add_shadow()</code> to add a shadow map generated using <code>ray_shade()</code>. Then we call <code>plot_map()</code> to create the output:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">shaded_ice_floe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb27-2">  </span>
<span id="cb27-3">  art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ice_floe</span>(seed)</span>
<span id="cb27-4">  </span>
<span id="cb27-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height_shade</span>(</span>
<span id="cb27-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> art,</span>
<span id="cb27-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">texture =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb27-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_shadow</span>(</span>
<span id="cb27-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadowmap =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ray_shade</span>(</span>
<span id="cb27-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> art, </span>
<span id="cb27-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunaltitude =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb27-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunangle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>,</span>
<span id="cb27-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multicore =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb27-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span></span>
<span id="cb27-16">      ), </span>
<span id="cb27-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_darken =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span></span>
<span id="cb27-18">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_map</span>()</span>
<span id="cb27-20">}</span>
<span id="cb27-21"></span>
<span id="cb27-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ice_floe</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/ice-floe-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Turns out it‚Äôs quite pretty. Here are a few more outputs:</p>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ice_floe</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ice_floe</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span>
<span id="cb28-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ice_floe</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/abstract-ice-floes-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/abstract-ice-floes-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/abstract-ice-floes-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ice_floe</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">106</span>)</span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ice_floe</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>)</span>
<span id="cb29-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ice_floe</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">108</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/even-more-abstract-ice-floes-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/even-more-abstract-ice-floes-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/index_files/figure-html/even-more-abstract-ice-floes-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="exercise-icescape" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>shaded-icescape.R</code> script in the materials.</p>
</div>
</div>
</section>
<section id="three-dimensional-art" class="level2">
<h2 class="anchored" data-anchor-id="three-dimensional-art">Three dimensional art</h2>
<p>The examples I‚Äôve shown so far all have a feeling of depth because of the way <code>ray_shade()</code> produces natural looking shadows. They‚Äôre not truly 3D renderings though. You can‚Äôt rotate them in 3D or display them from different perspectives. Happily, the rayshader package allows you to create 3D plots using the <code>plot_3d()</code> function. Under the hood, this function relies on the <a href="https://dmurdoch.github.io/rgl/">rgl package</a>, which in turn provides access to <a href="https://www.opengl.org/">OpenGL</a>. For this function to work, your installation of the rgl package needs to be built with access to OpenGL tools. On windows that should happen automatically, but it can be a little mmore tricky on other operating systems. To get it to work on my Ubuntu machine what I had to do was first install OpenGL. The command I used at the terminal was this:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install libgl1-mesa-dev libglu1-mesa-dev</span></code></pre></div>
<p>Once that was complete, I had to force a reinstall for the rgl package to ensure it had been built with the OpenGL libraries present. At the R console:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgl"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">force =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<p>Having done so, everything worked pretty smoothly for me.</p>
<p>Okay, so what can we do with 3d rendering? To start with, let‚Äôs keep things simple and use the ‚Äúcircles‚Äù example. I‚Äôve already computed a height map (<code>circle_array</code>) and a shading map (<code>circle_scape</code>) that incorporates the shadows, so I can pass both of the to <code>plot_3d()</code>. It‚Äôs a little fiddly, so I had to tinker with the angles and other settings to get a result that worked:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_3d</span>(</span>
<span id="cb32-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hillshade =</span> circle_scape,</span>
<span id="cb32-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> circle_array,</span>
<span id="cb32-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theta =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>,</span>
<span id="cb32-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">phi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb32-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zoom =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb32-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>,</span>
<span id="cb32-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">baseshape =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>,</span>
<span id="cb32-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>,</span>
<span id="cb32-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb32-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">soliddepth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb32-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">solidcolor =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#111111"</span>,</span>
<span id="cb32-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">windowsize =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span></span>
<span id="cb32-14">)</span>
<span id="cb32-15"></span>
<span id="cb32-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render_snapshot</span>(</span>
<span id="cb32-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circles_3d.png"</span>, </span>
<span id="cb32-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clear =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb32-19">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include_graphics</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circles_3d.png"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/circles_3d.png" class="img-fluid figure-img" width="600"></p>
</figure>
</div>
</div>
</div>
<p>It kind of looks like a tower. It‚Äôs kind of neat in its own right, but the output gets much more fun when you start feeding richer input to <code>plot_3d()</code>. Here‚Äôs what happens when I adapt the ‚Äúice floes‚Äù system to produce truly three dimensional images:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span></span>
<span id="cb34-2"></span>
<span id="cb34-3">ice_height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>)</span>
<span id="cb34-4">ice_height[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2250</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ice_floe</span>(seed)</span>
<span id="cb34-5"></span>
<span id="cb34-6">ice_scape <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height_shade</span>(</span>
<span id="cb34-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> ice_height,</span>
<span id="cb34-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">texture =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb34-9">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_shadow</span>(</span>
<span id="cb34-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadowmap =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ray_shade</span>(</span>
<span id="cb34-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> ice_height, </span>
<span id="cb34-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunaltitude =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb34-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunangle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>,</span>
<span id="cb34-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multicore =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb34-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span></span>
<span id="cb34-17">    ), </span>
<span id="cb34-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_darken =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span></span>
<span id="cb34-19">  )</span>
<span id="cb34-20"></span>
<span id="cb34-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_3d</span>(</span>
<span id="cb34-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hillshade =</span> ice_scape,</span>
<span id="cb34-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> ice_height,</span>
<span id="cb34-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theta =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>,</span>
<span id="cb34-25">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">phi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb34-26">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zoom =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>,</span>
<span id="cb34-27">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>,</span>
<span id="cb34-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>,</span>
<span id="cb34-29">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb34-30">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">soliddepth =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb34-31">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">solidcolor =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>,</span>
<span id="cb34-32">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">windowsize =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>)</span>
<span id="cb34-33">)</span>
<span id="cb34-34"></span>
<span id="cb34-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render_snapshot</span>(</span>
<span id="cb34-36">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ice_3d.png"</span>, </span>
<span id="cb34-37">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clear =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb34-38">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include_graphics</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ice_3d.png"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/ice_3d.png" class="img-fluid figure-img" width="991"></p>
</figure>
</div>
</div>
</div>
<p>Even I have to admit I was impressed with myself this time. That worked way better than I was expecting it to, and I suspect it would look even nicer if I‚Äôd taken the time to learn more about hill shading algorithms and used <code>sphere_shade()</code> to create a proper terrain map rather rather than relying on <code>height_shade()</code>. Something to play around with in the future :)</p>
<div id="exercise-icescape-3d" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>icescape-3d.R</code> script.</p>
</div>
</div>
</section>
<section id="materials" class="level2">
<h2 class="anchored" data-anchor-id="materials">Materials</h2>
<p>Code for each of the source files referred to in this section of the workshop is included here. Click on the callout box below to see the code for the file you want to look at. Please keep in mind that (unlike the code in the main text) I haven‚Äôt modified these scripts since the original workshop, so you might need to play around with them to get them to work!</p>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="circle-scape.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
circle-scape.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rayshader)</span>
<span id="cb36-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb36-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb36-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb36-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb36-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb36-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb36-9"></span>
<span id="cb36-10">is_within_circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x_coord, y_coord, x_center, y_center, radius) {</span>
<span id="cb36-11">  (x_coord <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_center)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y_coord <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_center)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb36-12">}</span>
<span id="cb36-13"></span>
<span id="cb36-14">additive_circles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb36-15">  </span>
<span id="cb36-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb36-17">  </span>
<span id="cb36-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setup canvas</span></span>
<span id="cb36-19">  art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb36-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels),</span>
<span id="cb36-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels)</span>
<span id="cb36-22">  )</span>
<span id="cb36-23">  art<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>paint <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb36-24">  </span>
<span id="cb36-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb36-26">    </span>
<span id="cb36-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample a random circle</span></span>
<span id="cb36-28">    x_center <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb36-29">    y_center <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb36-30">    radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb36-31">    </span>
<span id="cb36-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add +1 to all points inside the circle</span></span>
<span id="cb36-33">    art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> art <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb36-34">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb36-35">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> paint <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_within_circle</span>(</span>
<span id="cb36-36">          x, y, x_center, y_center, radius</span>
<span id="cb36-37">        )</span>
<span id="cb36-38">      )</span>
<span id="cb36-39">  }</span>
<span id="cb36-40">  </span>
<span id="cb36-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalise paint to [0, 1] range and return</span></span>
<span id="cb36-42">  art<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>paint <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(art<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>paint)</span>
<span id="cb36-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(art)</span>
<span id="cb36-44">}</span>
<span id="cb36-45"></span>
<span id="cb36-46">circle_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">additive_circles</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>)</span>
<span id="cb36-47"></span>
<span id="cb36-48">circle_array <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> circle_art <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb36-49">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> paint) </span>
<span id="cb36-50"></span>
<span id="cb36-51">circle_shadow <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ray_shade</span>(</span>
<span id="cb36-52">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> circle_array,</span>
<span id="cb36-53">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunaltitude =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, </span>
<span id="cb36-54">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunangle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">135</span>,</span>
<span id="cb36-55">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb36-56">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multicore =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb36-57">)</span>
<span id="cb36-58"></span>
<span id="cb36-59">circle_scape <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> circle_array <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb36-60">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height_shade</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb36-61">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_shadow</span>(</span>
<span id="cb36-62">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadowmap =</span> circle_shadow,</span>
<span id="cb36-63">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_darken =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb36-64">  )</span>
<span id="cb36-65"></span>
<span id="cb36-66"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb36-67"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_map</span>(circle_scape, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rotate =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">270</span>)</span>
<span id="cb36-68"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="icescape-3d.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
icescape-3d.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rayshader)</span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb37-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb37-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb37-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb37-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb37-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb37-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb37-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb37-10"></span>
<span id="cb37-11">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb37-12">  </span>
<span id="cb37-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb37-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-15">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb37-16">}</span>
<span id="cb37-17"></span>
<span id="cb37-18">transform_to_curl_space <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb37-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb37-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> fracture,</span>
<span id="cb37-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex,</span>
<span id="cb37-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm,</span>
<span id="cb37-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb37-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb37-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb37-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb37-27">  )</span>
<span id="cb37-28">}</span>
<span id="cb37-29"></span>
<span id="cb37-30"></span>
<span id="cb37-31">define_worley_cells <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) {</span>
<span id="cb37-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb37-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_worley,</span>
<span id="cb37-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> billow,</span>
<span id="cb37-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb37-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb37-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cell"</span>,</span>
<span id="cb37-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb37-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb37-40">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-41">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rank</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb37-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb37-43">}</span>
<span id="cb37-44"></span>
<span id="cb37-45"></span>
<span id="cb37-46">simplex_noise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb37-47">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb37-48">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex,</span>
<span id="cb37-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ridged,</span>
<span id="cb37-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb37-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb37-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb37-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb37-54">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-55">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb37-56">}</span>
<span id="cb37-57"></span>
<span id="cb37-58"></span>
<span id="cb37-59">ice_floe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb37-60">  </span>
<span id="cb37-61">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb37-62">  </span>
<span id="cb37-63">  grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb37-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>),</span>
<span id="cb37-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)</span>
<span id="cb37-66">  )</span>
<span id="cb37-67">  </span>
<span id="cb37-68">  coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform_to_curl_space</span>(grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y)</span>
<span id="cb37-69">  </span>
<span id="cb37-70">  grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-71">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb37-72">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cells =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">define_worley_cells</span>(coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y),</span>
<span id="cb37-73">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simplex_noise</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cells, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cells),</span>
<span id="cb37-74">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(paint)</span>
<span id="cb37-75">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-76">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> paint)</span>
<span id="cb37-77">}</span>
<span id="cb37-78"></span>
<span id="cb37-79">icescape_3d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb37-80">  </span>
<span id="cb37-81">  ice_height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>)</span>
<span id="cb37-82">  ice_height[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2250</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ice_floe</span>(seed)</span>
<span id="cb37-83">  </span>
<span id="cb37-84">  ice_scape <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height_shade</span>(</span>
<span id="cb37-85">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> ice_height,</span>
<span id="cb37-86">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">texture =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb37-87">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-88">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_shadow</span>(</span>
<span id="cb37-89">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadowmap =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ray_shade</span>(</span>
<span id="cb37-90">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> ice_height, </span>
<span id="cb37-91">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunaltitude =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb37-92">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunangle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>,</span>
<span id="cb37-93">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multicore =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb37-94">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span></span>
<span id="cb37-95">      ), </span>
<span id="cb37-96">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_darken =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span></span>
<span id="cb37-97">    )</span>
<span id="cb37-98">  </span>
<span id="cb37-99">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_3d</span>(</span>
<span id="cb37-100">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hillshade =</span> ice_scape,</span>
<span id="cb37-101">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> ice_height,</span>
<span id="cb37-102">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theta =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>,</span>
<span id="cb37-103">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">phi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb37-104">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zoom =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>,</span>
<span id="cb37-105">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>,</span>
<span id="cb37-106">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">background =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>,</span>
<span id="cb37-107">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb37-108">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">soliddepth =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb37-109">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">solidcolor =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>,</span>
<span id="cb37-110">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">windowsize =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>)</span>
<span id="cb37-111">  )</span>
<span id="cb37-112">  </span>
<span id="cb37-113">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">render_snapshot</span>(</span>
<span id="cb37-114">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"icescape_3d_"</span>, seed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>)), </span>
<span id="cb37-115">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clear =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb37-116">  )</span>
<span id="cb37-117">}</span>
<span id="cb37-118"></span>
<span id="cb37-119"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb37-120"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icescape_3d</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb37-121"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="shaded-icescape.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
shaded-icescape.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rayshader)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb38-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb38-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb38-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb38-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb38-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb38-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb38-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb38-10"></span>
<span id="cb38-11">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb38-12">  </span>
<span id="cb38-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb38-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-15">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb38-16">}</span>
<span id="cb38-17"></span>
<span id="cb38-18">transform_to_curl_space <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb38-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb38-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> fracture,</span>
<span id="cb38-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex,</span>
<span id="cb38-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm,</span>
<span id="cb38-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb38-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb38-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb38-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb38-27">  )</span>
<span id="cb38-28">}</span>
<span id="cb38-29"></span>
<span id="cb38-30"></span>
<span id="cb38-31">define_worley_cells <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) {</span>
<span id="cb38-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb38-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_worley,</span>
<span id="cb38-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> billow,</span>
<span id="cb38-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb38-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb38-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cell"</span>,</span>
<span id="cb38-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb38-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb38-40">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-41">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rank</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb38-43">}</span>
<span id="cb38-44"></span>
<span id="cb38-45"></span>
<span id="cb38-46">simplex_noise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb38-47">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb38-48">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex,</span>
<span id="cb38-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ridged,</span>
<span id="cb38-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb38-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb38-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb38-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y</span>
<span id="cb38-54">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-55">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb38-56">}</span>
<span id="cb38-57"></span>
<span id="cb38-58"></span>
<span id="cb38-59">ice_floe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb38-60">  </span>
<span id="cb38-61">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb38-62">  </span>
<span id="cb38-63">  grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb38-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>),</span>
<span id="cb38-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)</span>
<span id="cb38-66">  )</span>
<span id="cb38-67">  </span>
<span id="cb38-68">  coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform_to_curl_space</span>(grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y)</span>
<span id="cb38-69">  </span>
<span id="cb38-70">  grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-71">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb38-72">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cells =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">define_worley_cells</span>(coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y),</span>
<span id="cb38-73">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simplex_noise</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cells, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cells),</span>
<span id="cb38-74">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(paint)</span>
<span id="cb38-75">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-76">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> paint)</span>
<span id="cb38-77">}</span>
<span id="cb38-78"></span>
<span id="cb38-79">shaded_ice_floe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb38-80">  </span>
<span id="cb38-81">  art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ice_floe</span>(seed)</span>
<span id="cb38-82">  </span>
<span id="cb38-83">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height_shade</span>(</span>
<span id="cb38-84">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> art,</span>
<span id="cb38-85">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">texture =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb38-86">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-87">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_shadow</span>(</span>
<span id="cb38-88">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadowmap =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ray_shade</span>(</span>
<span id="cb38-89">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> art, </span>
<span id="cb38-90">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunaltitude =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb38-91">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunangle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>,</span>
<span id="cb38-92">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multicore =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb38-93">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span></span>
<span id="cb38-94">      ), </span>
<span id="cb38-95">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_darken =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span></span>
<span id="cb38-96">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb38-97">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_map</span>()</span>
<span id="cb38-98">}</span>
<span id="cb38-99"></span>
<span id="cb38-100"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb38-101"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ice_floe</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb38-102"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="shaded-ridge-art.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
shaded-ridge-art.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rayshader)</span>
<span id="cb39-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb39-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb39-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb39-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb39-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb39-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb39-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb39-9"></span>
<span id="cb39-10">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb39-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb39-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-13">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb39-14">}</span>
<span id="cb39-15"></span>
<span id="cb39-16">ridge_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>) {</span>
<span id="cb39-17">  </span>
<span id="cb39-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb39-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb39-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels),</span>
<span id="cb39-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels)</span>
<span id="cb39-22">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb39-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb39-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb39-25">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb39-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb39-27">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex,</span>
<span id="cb39-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ridged,</span>
<span id="cb39-29">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb39-30">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb39-31">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed</span>
<span id="cb39-32">      ),</span>
<span id="cb39-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(paint)</span>
<span id="cb39-34">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.array</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> paint)</span>
<span id="cb39-36">}</span>
<span id="cb39-37"></span>
<span id="cb39-38">shaded_ridge_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb39-39">  </span>
<span id="cb39-40">  art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ridge_art</span>(seed) </span>
<span id="cb39-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">height_shade</span>(</span>
<span id="cb39-42">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> art,</span>
<span id="cb39-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">texture =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva2</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb39-44">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-45">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_shadow</span>(</span>
<span id="cb39-46">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shadowmap =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ray_shade</span>(</span>
<span id="cb39-47">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heightmap =</span> art, </span>
<span id="cb39-48">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunaltitude =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb39-49">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sunangle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>,</span>
<span id="cb39-50">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multicore =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb39-51">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zscale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span></span>
<span id="cb39-52">      ), </span>
<span id="cb39-53">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_darken =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb39-54">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-55">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_map</span>()</span>
<span id="cb39-56">}</span>
<span id="cb39-57"></span>
<span id="cb39-58"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb39-59"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shaded_ridge_art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb39-60"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Art from Code {IV:} {Shading} Tricks},
  date = {2024-12-21},
  url = {https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>‚ÄúArt from Code IV: Shading
Tricks.‚Äù</span> December 21, 2024. <a href="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/">https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/</guid>
  <pubDate>Fri, 20 Dec 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-12-21_art-from-code-4/ice-floe.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Art from code III: Polygon tricks</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><em>A couple of years ago I gave an invited workshop called <a href="https://art-from-code.netlify.app">art from code</a> at the 2022 rstudio::conf (now posit::conf) conference. As part of the workshop I wrote a lengthy series of notes on how to make generative art using R, all of which were released under a CC-BY licence. For a while now I‚Äôd been thinking I should do something with these notes. I considered writing a book, but in all honesty I don‚Äôt have the spare capacity for a side-project of that scale these days. I can barely keep up with the workload at my day job as it is. So instead, I‚Äôve decided that I‚Äôd port them over to this site as a series of blog posts. In doing so I‚Äôve made a deliberate decision not to modify the original content too much (nobody loves it when an artist tries to ‚Äúimprove‚Äù the original, after all). All I‚Äôve done is update the code to accommodate package changes since 2022, and some minor edits so that the images are legible when embedded in this blog (which is light-themed, and the original was dark-theme). Other than that, I‚Äôve left it alone. This is the third post in that series.</em></p>
<ul>
<li><a href="../../posts/2024-12-18_art-from-code-1/">Prelude</a></li>
<li><a href="../../posts/2024-12-19_art-from-code-2/">Spatial tricks with ambient</a></li>
<li><a href="../../posts/2024-12-20_art-from-code-3/">Polygon tricks</a></li>
<li><a href="../../posts/2024-12-21_art-from-code-4/">Shading tricks</a></li>
<li><a href="../../posts/2024-12-22_art-from-code-5/">Iterated function systems</a></li>
<li><a href="../../posts/2024-12-23_art-from-code-6/">Tiles and tessellations</a></li>
<li><a href="../../posts/2024-12-24_art-from-code-7/">Pixel filters</a></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gifski)</span></code></pre></div>
</div>
<section id="semi-transparent-polygons" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="semi-transparent-polygons">Semi-transparent polygons</h2>
<p>A commonly used trick in generative art is to simulate graded textures by plotting many slightly-different and mostly-transparent polygons over the top of one another. I showed an example of this at the end of the previous section, in fact. However, it was all tangled up in the discussion of fractals and spatial noise patterns, so it might be useful to revisit it here.</p>
<p>In this section I‚Äôm going to adapt the recursive polygon-deformation technique described in Tyler Hobbes‚Äô <a href="https://tylerxhobbs.com/essays/2017/a-generative-approach-to-simulating-watercolor-paints">guide to simulating water colour paint</a>. It‚Äôs a simple method and works surprisingly well sometimes. The approach I take here isn‚Äôt precisely identical to his, but it‚Äôs pretty close.</p>
<p>Let‚Äôs start by creating a <code>square</code> tibble that contains <code>x</code> and <code>y</code> columns specifying the coordinates for a square, and a <code>seg_len</code> column that specifies the length of that of the edge connecting that point to the next one (i.e., the point specified by the next row):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">square <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-5">)</span></code></pre></div>
</div>
<p>This representation defines a closed path: the fifth and final point is the same location as the first one. You don‚Äôt technically need this for <code>geom_polygon()</code>, but it‚Äôs convenient for other reasons to set it up so that the final ‚Äúsegment‚Äù has length 0.</p>
<p>Next let‚Äôs write a simple plotting function to display a polygon:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">show_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, ...) {</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb3-7">  </span>
<span id="cb3-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(show_vertices <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb3-9">    pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-10">  }</span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pic)</span>
<span id="cb3-12">}</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(square)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/square-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
<p>Yes, that is indeed a square.</p>
<p>The next step in our process is to think about ways that we can deform this polygon. A simple method would be to insert a new vertex: we select one of the edges and split it in half by creating a new point in between the two endpoints. If we then add a little noise to perturb the location of the new point, the polygon will be slightly deformed.</p>
<p>How should we select the edge to break in two? One possibility is to select completely at random, but I‚Äôm going to try something slightly different and choose edges with probability proportional to their length. A bias to break longer edges will help ensure we don‚Äôt end up with polygons with one or two very long edges and many tiny edges. Here‚Äôs a function that does this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">sample_edge <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon) {</span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(polygon), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len)</span>
<span id="cb4-3">}</span></code></pre></div>
</div>
<p>As a side bonus, this algorithm will never select the ‚Äúedge‚Äù that starts with the final point (e.g., the ‚Äúfifth‚Äù point in <code>square</code> never gets selected) because the corresponding edge has length zero. Thanks to this we can safely assume that no matter which row gets selected by <code>sample_edge()</code>, it can‚Äôt be the last one. For every possible row <code>ind</code> it can return, there will always be a row <code>ind + 1</code> in the polygon.</p>
<p>Next step is to realise that if we break an edge into two edges, we‚Äôll need to compute the length of these two new edges: so we might as well have a helper function that takes the co-ordinates of two points as input, and returns the length of an edge connecting them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">edge_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x1, y1, x2, y2) {</span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>((x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-3">}</span></code></pre></div>
</div>
<p>Finally, as a convenience, here‚Äôs a function that takes a <code>size</code> argument and returns a random number between <code>-size/2</code> and <code>size/2</code>. It‚Äôs just a wrapper around <code>runif()</code> but I find it helps me remember <em>why</em> I‚Äôm using the random number generator and it makes my code a little easier for me to read:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">edge_noise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(size) {</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-3">}</span></code></pre></div>
</div>
<p>Now that I‚Äôve got my helper functions, here‚Äôs the code for an <code>insert_edge()</code> function that selects an edge and breaks it into two edges. In addition to expecting a <code>polygon</code> as input (a tibble like <code>square</code> that has columns <code>x</code>, <code>y</code>, and <code>seg_len</code>), it takes a <code>noise</code> argument: a number used to scale the amount of noise added when <code>edge_noise()</code> is called:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">insert_edge <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, noise) {</span>
<span id="cb7-2">  </span>
<span id="cb7-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample and edge and remember its length</span></span>
<span id="cb7-4">  ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_edge</span>(polygon)</span>
<span id="cb7-5">  len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len[ind]</span>
<span id="cb7-6">  </span>
<span id="cb7-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># one endpoint of the old edge</span></span>
<span id="cb7-8">  last_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x[ind]</span>
<span id="cb7-9">  last_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y[ind]</span>
<span id="cb7-10">  </span>
<span id="cb7-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the other endpoint of the old edge</span></span>
<span id="cb7-12">  next_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-13">  next_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-14">  </span>
<span id="cb7-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># location of the new point to be inserted: noise </span></span>
<span id="cb7-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is scaled proportional to the length of the old edge</span></span>
<span id="cb7-17">  new_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb7-18">  new_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb7-19">  </span>
<span id="cb7-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the new row for insertion into the tibble, </span></span>
<span id="cb7-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># containing coords and length of the 'new' edge</span></span>
<span id="cb7-22">  new_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb7-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> new_x,</span>
<span id="cb7-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> new_y,</span>
<span id="cb7-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(new_x, new_y, next_x, next_y)</span>
<span id="cb7-26">  )</span>
<span id="cb7-27">  </span>
<span id="cb7-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the length of the 'old' edge</span></span>
<span id="cb7-29">  polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len[ind] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(</span>
<span id="cb7-30">    last_x, last_y, new_x, new_y</span>
<span id="cb7-31">  )</span>
<span id="cb7-32">  </span>
<span id="cb7-33">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># insert a row into the tibble</span></span>
<span id="cb7-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb7-35">    polygon[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind, ],</span>
<span id="cb7-36">    new_row,</span>
<span id="cb7-37">    polygon[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind), ]</span>
<span id="cb7-38">  )</span>
<span id="cb7-39">}</span></code></pre></div>
</div>
<p>Here‚Äôs the function in action:</p>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-2">polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> square </span>
<span id="cb8-3">polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insert_edge</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(polygon)</span>
<span id="cb8-4">polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insert_edge</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(polygon)</span>
<span id="cb8-5">polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insert_edge</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(polygon)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/polygon-insertion-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/polygon-insertion-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/polygon-insertion-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</div>
<p>I‚Äôve no intention of manually calling <code>insert_edge()</code> over and over, so the time has come to write a <code>grow_polygon()</code> function that sequentially inserts edges into a <code>polygon</code> for a fixed number of <code>iterations</code>, and at a specific <code>noise</code> level. I‚Äôll also set it up so the user can optionally elect to specify the <code>seed</code> used to generate random numbers. If the user doesn‚Äôt specify a seed, the random number generator state is left as-is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">grow_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, iterations, noise, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb9-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb9-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations) polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insert_edge</span>(polygon, noise)</span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(polygon)</span>
<span id="cb9-5">}</span></code></pre></div>
</div>
<p>The images below show what our recursively deformed polygon looks like after 30, 100, and 1000 iterations:</p>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">square <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb10-4">square <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb10-7">square <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/polygon-generation-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/polygon-generation-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/polygon-generation-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Now that we have functions <code>grow_polygon()</code> and <code>show_polygon()</code> that will create and display a single deformed polygon, let‚Äôs generalise them. The <code>grow_multipolygon()</code> function below creates many deformed polygons by calling <code>grow_polygon()</code> repeatedly, and the <code>show_multipolygon()</code> function is a minor variation on <code>show_polygon()</code> that plots many polygons with a low opacity:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">grow_multipolygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(base_shape, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb11-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb11-3">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb11-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb11-5">    polygons[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon</span>(base_shape, ...)</span>
<span id="cb11-6">  }</span>
<span id="cb11-7">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(polygons, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb11-8">  polygons</span>
<span id="cb11-9">}</span>
<span id="cb11-10"></span>
<span id="cb11-11">show_multipolygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, fill, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>, ...) {</span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> fill, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb11-16">}</span></code></pre></div>
</div>
<p>So now here‚Äôs what we do. We take the original <code>square</code> and deform it a moderate amount. Running <code>grow_polygon()</code> for about 100 iterations seems to do the trick. This then becomes the <code>base_shape</code> to be passed to <code>grow_multipolygon()</code>, which we then use to create many polygons (say, <code>n = 50</code>) that are all derived from this base shape. Finally, we use <code>show_multipolygon()</code> to plot all 50 polygons. Each individual polygon is plotted with very low opacity, so the overall effect is to create a graded look:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb12-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> square <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_multipolygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>38.787 sec elapsed</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d43790"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/polygon-layering-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
<p>It‚Äôs a little slow to produce results, but at least the results are pretty!</p>
<div id="exercise-grow-multipolygon" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>Let‚Äôs look at single polygons first. All the code you need to work with those is included in the <code>grow-polygon.R</code> script in the materials. Try modifying the <code>iterations</code>, <code>noise</code>, and <code>seed</code> arguments to see what kind of output is created at different parameter values.</p></li>
<li><p>The <code>grow-multipolygons.R</code> file contains the extra machinery to create these textured plots. Try playing around with the code for this. I‚Äôve tweaked the parameter settings so that it runs faster than the code shown here, but doesn‚Äôt produce output that looks quite as nice.</p></li>
</ol>
</div>
</div>
</section>
<section id="growing-polygons-faster" class="level2">
<h2 class="anchored" data-anchor-id="growing-polygons-faster">Growing polygons faster</h2>
<p>As an aside, you may have noticed that the code I‚Äôve written here is inefficient: I‚Äôve got vectors growing in a loop, which is very inefficient in R. There‚Äôs a few ways we could speed this up. The most time consuming would be to rewrite the resource intensive loops in C++ and then call it from R using a package like <code>Rcpp</code> or <code>cpp11</code>. I‚Äôll show an example of this technique later in the workshop, but in this case I‚Äôll do something a little simpler.</p>
<p>The big problem with the previous code is that I‚Äôve got atomic vectors (numeric vectors in this case) growing inside the loop, which tends to cause the entire vector to be copied at every iteration. One solution to this is to store each point as its own list, and treat the polygon as a list of points. That way, when I modify the polygon to add a new point, R will alter the container object (the list), but the objects representing the points themselves don‚Äôt get copied. Happily, only a few minor modifications of the code are needed to switch to this ‚Äúlist of points‚Äù representation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">square_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>(square)</span>
<span id="cb15-2"></span>
<span id="cb15-3">sample_edge_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon) {</span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(polygon), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(polygon, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len))</span>
<span id="cb15-5">}</span>
<span id="cb15-6"></span>
<span id="cb15-7">insert_edge_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, noise) {</span>
<span id="cb15-8">  </span>
<span id="cb15-9">  ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_edge_l</span>(polygon)</span>
<span id="cb15-10">  len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len</span>
<span id="cb15-11">  </span>
<span id="cb15-12">  last_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb15-13">  last_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb15-14">  </span>
<span id="cb15-15">  next_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb15-16">  next_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb15-17">  </span>
<span id="cb15-18">  new_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb15-19">  new_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb15-20">  </span>
<span id="cb15-21">  new_point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb15-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> new_x,</span>
<span id="cb15-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> new_y,</span>
<span id="cb15-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(new_x, new_y, next_x, next_y)</span>
<span id="cb15-25">  )</span>
<span id="cb15-26">  </span>
<span id="cb15-27">  polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(</span>
<span id="cb15-28">    last_x, last_y, new_x, new_y</span>
<span id="cb15-29">  )</span>
<span id="cb15-30">  </span>
<span id="cb15-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb15-32">    polygon[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind],</span>
<span id="cb15-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(new_point),</span>
<span id="cb15-34">    polygon[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind)]</span>
<span id="cb15-35">  )</span>
<span id="cb15-36">}</span>
<span id="cb15-37"></span>
<span id="cb15-38">grow_polygon_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, iterations, noise, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb15-39">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb15-40">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations) polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insert_edge_l</span>(polygon, noise)</span>
<span id="cb15-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(polygon)</span>
<span id="cb15-42">}</span>
<span id="cb15-43"></span>
<span id="cb15-44">grow_multipolygon_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(base_shape, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb15-45">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb15-46">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb15-47">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb15-48">    polygons[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(base_shape, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-49">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-50">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-51">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), unlist))</span>
<span id="cb15-52">  }</span>
<span id="cb15-53">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(polygons, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb15-54">  polygons</span>
<span id="cb15-55">}</span></code></pre></div>
</div>
<p>That‚Äôs a fairly large code chunk, but if you compare each part to the earlier versions you can see that these functions have almost the same structure as the original ones. Most of the changes are little changes to the indexing, like using <code>polygon[[ind]]$x</code> to refer to coordinate rather than <code>polygon$x[ind]</code>.</p>
<p>The code to generate images using the list-of-points version is almost identical to the original version. All we‚Äôre doing differently is using <code>square_l</code>, <code>grow_polygon_l()</code>, and <code>grow_multipolygon_l()</code> where previously we‚Äôd used <code>square</code>, <code>grow_polygon()</code>, and <code>grow_multipolygon()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb16-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> square_l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_multipolygon_l</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="cb16-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>31.624 sec elapsed</code></pre>
</div>
</div>
<p>That‚Äôs a pretty substantial improvement in performance relative to the original version, with only very minor rewriting of the code. And yes, it does produce the same result:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d43790"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/fast-polygon-layering-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="using-the-method-splotches" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="using-the-method-splotches">Using the method: splotches</h2>
<p>Okay, so that‚Äôs the method. What I generally find when making art is that it‚Äôs a little awkward to play around and explore when it takes a long time to render pieces, so it‚Äôs handy to have a version of your generative art tools that will quickly produce results, even if those results aren‚Äôt quite as nice. It‚Äôs a little like having the ability to make rough sketches: something you can do easily before committing to doing something in detail. With that in mind, the <code>splotch()</code> function below wraps a slightly cruder version of the method than the one I showed earlier. It generates fewer polygons, and those polygons have fewer vertices.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">splotch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb19-3">  square_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb19-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb19-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb19-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb19-7">  ))</span>
<span id="cb19-8">  square_l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb19-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_multipolygon_l</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed) </span>
<span id="cb19-11">}</span></code></pre></div>
</div>
<p>The results aren‚Äôt quite as nice as the full fledged version, but they are fast:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb20-2">splotch_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splotch</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) </span>
<span id="cb20-3">splotch_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splotch</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>)</span>
<span id="cb20-4">splotch_3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splotch</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>)</span>
<span id="cb20-5">splotch_4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splotch</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>)</span>
<span id="cb20-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>6.09 sec elapsed</code></pre>
</div>
</div>
<p>Because <code>splotch()</code> is fast and a little crude, it can be a handy way to explore colour choices:</p>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(splotch_1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f51720"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(splotch_2, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f8d210"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb22-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(splotch_3, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#059dc0"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb22-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(splotch_4, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#81b622"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="4" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/splotch-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/splotch-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/splotch-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/splotch-4.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="using-the-method-smudged-hexagons" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="using-the-method-smudged-hexagons">Using the method: Smudged hexagons</h2>
<p>The goal of <code>splotch()</code> is to have a tool we can play around with and explore the method. That‚Äôs nice and all, but can we also use the method to make something fun? Here‚Äôs one example: since we are R users and love our hexagons, let‚Äôs write a function that paints hexagons using this recursive deformation method. The goal is to create a shape with a naturalistic look, as if it had been painted or coloured, with some of the edges smudged or blurred. The <code>smudged_hexagon()</code> function attempts to do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">smudged_hexagon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise3 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) {</span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb23-3">  </span>
<span id="cb23-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define hexagonal base shape</span></span>
<span id="cb23-5">  theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb23-6">  hexagon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb23-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(theta),</span>
<span id="cb23-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(theta),</span>
<span id="cb23-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(x, y, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lead</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lead</span>(y))</span>
<span id="cb23-10">  )</span>
<span id="cb23-11">  hexagon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb23-12">  hexagon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>(hexagon)</span>
<span id="cb23-13">  base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hexagon <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(</span>
<span id="cb23-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, </span>
<span id="cb23-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> noise1</span>
<span id="cb23-17">    )</span>
<span id="cb23-18">  </span>
<span id="cb23-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define intermediate-base-shapes in clusters</span></span>
<span id="cb23-20">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb23-21">  ijk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb23-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb23-23">    base_i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(</span>
<span id="cb23-25">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, </span>
<span id="cb23-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> noise2</span>
<span id="cb23-27">      )</span>
<span id="cb23-28">    </span>
<span id="cb23-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb23-30">      base_j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base_i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-31">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(</span>
<span id="cb23-32">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, </span>
<span id="cb23-33">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> noise2</span>
<span id="cb23-34">        )</span>
<span id="cb23-35">      </span>
<span id="cb23-36">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grow 10 polygons per intermediate-base</span></span>
<span id="cb23-37">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb23-38">        ijk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ijk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb23-39">        polygons[[ijk]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base_j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-40">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(</span>
<span id="cb23-41">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, </span>
<span id="cb23-42">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> noise3</span>
<span id="cb23-43">          ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-44">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-45">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-46">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fn =</span> unlist))</span>
<span id="cb23-47">      }</span>
<span id="cb23-48">    }</span>
<span id="cb23-49">  }</span>
<span id="cb23-50">  </span>
<span id="cb23-51">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return as data frame</span></span>
<span id="cb23-52">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(polygons, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb23-53">}</span></code></pre></div>
</div>
<p>Here it is in action:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb24-2">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smudged_hexagon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>20.272 sec elapsed</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4379005"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/deeply-nested-polygon-layering-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smudged_hexagon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4379005"</span>)</span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smudged_hexagon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4379005"</span>)</span>
<span id="cb27-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smudged_hexagon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4379005"</span>) </span></code></pre></div>
<div class="cell column-screen quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/smudged-hexagon-examples-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/smudged-hexagon-examples-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/smudged-hexagon-examples-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smudged_hexagon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>),</span>
<span id="cb28-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smudged_hexagon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span>),</span>
<span id="cb28-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smudged_hexagon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>),</span>
<span id="cb28-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span></span>
<span id="cb28-6">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb28-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(id, source),</span>
<span id="cb28-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(source)</span>
<span id="cb28-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(id)</span>
<span id="cb28-12"></span>
<span id="cb28-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(source))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb28-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb28-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb28-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff1b8d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffda00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1bb3ff"</span></span>
<span id="cb28-18">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() </span></code></pre></div>
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/layered-smudged-hexagon-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-screen-inset" width="4200"></p>
</figure>
</div>
</div>
</div>
<p>This one makes me happy :-)</p>
<div id="exercise-splotch-hexagon" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for these two systems is included in the <code>splotch.R</code> and <code>smudged-hexagon.R</code> scripts in the materials.</p>
<ol type="1">
<li><p>Explore the effect of the <code>layers</code> argument in the <code>splotch()</code> system, and how it interacts with the <code>alpha</code> argument to <code>show_multipolygon()</code></p></li>
<li><p>Create a modified version of the <code>smudged_hexagon()</code> system that creates a smudged triangle, or, if you‚Äôre feeling more ambitious and want to read slightly further down the page to look for the code you need, a smudged heart shape!</p></li>
<li><p>In the ‚Äúlayered‚Äù smudged hexagon example (the one with three hexagons of different colours), why did I include the calls to <code>mutate()</code> and <code>arrange()</code>? What would have happened without that code?</p></li>
</ol>
</div>
</div>
</section>
<section id="slightly-misshapen-objects" class="level2">
<h2 class="anchored" data-anchor-id="slightly-misshapen-objects">Slightly misshapen objects</h2>
<p>The second case of polygon trickery that I want to talk about is adapted from an example kindly shared with me by <a href="https://www.williamrchase.com/">Will Chase</a>. Will posted some code on twitter showing how to very gently deform the outline of a shape to give it a slightly hand drawn look, and I‚Äôll expand on that example here. Let‚Äôs suppose I want to draw the outline of a heart. I do a little googling and discover some formulas that I can use for that purpose. If I have a vector describing the <code>angle</code> around circle from 0 to 2<img src="https://latex.codecogs.com/png.latex?%5Cpi">, I can compute the x- and y-coordinates for a heart shape using these functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">heart_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(angle) {</span>
<span id="cb29-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x))</span>
<span id="cb29-4">}</span>
<span id="cb29-5"></span>
<span id="cb29-6">heart_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(angle) {</span>
<span id="cb29-7">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb29-8">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb29-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y))</span>
<span id="cb29-10">}</span></code></pre></div>
</div>
<p>Here‚Äôs what it looks like when I draw a heart using these formulas:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">heart_shape <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb30-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb30-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_x</span>(angle),</span>
<span id="cb30-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_y</span>(angle)</span>
<span id="cb30-5">)</span>
<span id="cb30-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(heart_shape)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/heart-polygon-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
<p>I use hearts drawn with these formulas quite frequently in my art. They‚Äôre easy to compute, the shape often produces interesting patterns when other processes are applied to it, and of course it‚Äôs meaningfully associated with positive emotions and affection! However, the problem with using this formula is that the hearts it draws are very precise and mechanical. Sometimes that‚Äôs fine: precise, crisp shapes are often exactly the look we‚Äôre going for. But other times we might want an outline that looks a little more naturalistic. For instance, I asked my 9 year old daughter to draw a few heart shapes for me that I could use as an example. Here‚Äôs what she drew:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include_graphics</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hand-drawn-hearts.jpg"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/hand-drawn-hearts.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="666"></p>
</figure>
</div>
</div>
</div>
<p>Setting aside the fact that in one case she decided that she actually wanted to draw a frog face rather than a heart ‚Äì unlike <a href="https://openai.com/dall-e-2/">DALL-E</a>, humans have a tendency to flat out refuse to follow the text prompts when you ask them to make art for you ‚Äì these hearts have a qualitatively different feel to the crisp and clean look of the artificial ones.</p>
<p>What we‚Äôd like to do is gently and smoothly deform the outline of the original shape to produce something that captures some of the naturalistic feel that the hand-drawn hearts have. As always we‚Äôre not going to try to perfectly reproduce all the features of the original, just capture ‚Äúthe vibe‚Äù.</p>
</section>
<section id="perlin-blobs" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="perlin-blobs">Perlin blobs</h2>
<p>Let‚Äôs start with a slightly simpler version of the problem: instead of deforming a heart shape we‚Äôll deform a circle using Perlin noise. Our base shape is a circle that looks like this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb32-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb32-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb32-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb32-5">)</span>
<span id="cb32-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(circle)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/basic-circle-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
<p>We can create gently distorted circles using the <code>perlin_blob()</code> function shown below. Here‚Äôs how it works. First it defines coordinates in the shape of a perfect circle (that‚Äôs the variables <code>x_base</code> and <code>y_base</code>). Then we use <code>gen_perlin()</code> to calculate some spatially varying noise at each of those co-ordinates. Or, more precisely, we generate fractal noise at those coordinates using <code>gen_perlin()</code> as the generator and <code>fbm()</code> as the fractal function, but that‚Äôs not a super important detail rignt now. What is important is to realise that, although we want to use the numbers returned by our fractal generator to slightly modify the radius of the circle at that location, those numbers can be negative. So we‚Äôll rescale them using the helper function <code>normalise_radius()</code> so that the minimum distance from the origin is <code>r_min</code> and the maximum distance from the origin is <code>r_max</code>. This rescaling helps to ensure that the output is regular.</p>
<p>In any case, after computing the (Perlin-noise distorted) <code>radius</code> associated with each coordinate, we compute the final <code>x</code> and <code>y</code> values for the ‚ÄúPerlin blob‚Äù by multiplying the coordinates of the base shape by the radius. Here‚Äôs the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">normalise_radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, min, max) {</span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(min, max))</span>
<span id="cb33-3">}</span>
<span id="cb33-4"></span>
<span id="cb33-5">perlin_blob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb33-6">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb33-7">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb33-8">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb33-9">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb33-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb33-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n),</span>
<span id="cb33-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb33-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle),</span>
<span id="cb33-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb33-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_base, </span>
<span id="cb33-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_base, </span>
<span id="cb33-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb33-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb33-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb33-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb33-21">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb33-22">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise_radius</span>(r_min, r_max),</span>
<span id="cb33-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_base,</span>
<span id="cb33-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y_base</span>
<span id="cb33-25">  )</span>
<span id="cb33-26">}</span></code></pre></div>
</div>
<p>Here are three outputs from our <code>perlin_blob()</code> function:</p>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_blob</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb34-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_blob</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb34-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_blob</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-blobs-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-blobs-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-blobs-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</div>
<p>To give you a feel for how this function behaves, here‚Äôs a few images showing the effect of changing the <code>freq_init</code> parameter. This argument is used to set the overall noise level when generating fractal noise patterns:</p>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_blob</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_blob</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_blob</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-blob-frequency-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-blob-frequency-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-blob-frequency-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</div>
<p>The effect of the radius parameters is slightly different to the effect of the noise parameter. Shifting the <code>r_min</code> and <code>r_max</code> arguments has the effect of ‚Äúglobally flattening‚Äù the pattern of variation because the overall shape can only vary within a narrow bound. But it‚Äôs quite possible to set a high value for <code>freq_init</code> (causing noticeable distortions to the radius to emerge even at small scales) while constraining the global shape to be almost perfectly circular. The result is a rough-edged but otherwise perfect circle:</p>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>); </span>
<span id="cb36-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_blob</span>(</span>
<span id="cb36-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb36-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb36-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, </span>
<span id="cb36-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb36-7">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb36-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-blob-radius-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</div>
<p>At these parameter settings the output of <code>perlin_blob()</code> reminds me more of a cookie shape than a hand-drawn circle. I‚Äôve never used those settings in art before, but I can imagine some tasty applications!</p>
<div id="exercise-perlin-blob" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>perlin-blob.R</code> script in the materials. You can also find analogous code for the Perlin heart system describe in in the next section in the <code>perlin-heart.R</code> script.</p>
<ol type="1">
<li><p>Try playing around with these two systems. See if you can reproduce the same ‚Äúqualitative variations‚Äù with <code>perlin_heart()</code> that I showed above with <code>perlin_blob()</code></p></li>
<li><p>Explore the effect of modifying the arguments. It should be possible to produce some very wild looking shapes!</p></li>
</ol>
</div>
</div>
</section>
<section id="perlin-hearts" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="perlin-hearts">Perlin hearts</h2>
<p>Modifying this system so that it draws distorted heart shapes rather than distorted circles is not too difficult. There‚Äôs a few different ways we can do this, but the way I find most pleasing is to start with a distorted circle and then apply the <code>heart_x()</code> and <code>heart_y()</code> transformations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">perlin_heart <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb37-2">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb37-3">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb37-4">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb37-5">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb37-6">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb37-7">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb37-8">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb37-9">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb37-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb37-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb37-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n),</span>
<span id="cb37-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb37-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle),</span>
<span id="cb37-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb37-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_base, </span>
<span id="cb37-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_base, </span>
<span id="cb37-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb37-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb37-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb37-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb37-22">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise_radius</span>(r_min, r_max),</span>
<span id="cb37-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_x</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_shift,</span>
<span id="cb37-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_y</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_shift,</span>
<span id="cb37-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id</span>
<span id="cb37-27">  )</span>
<span id="cb37-28">}</span></code></pre></div>
</div>
<p>Here are three outputs from our <code>perlin_heart()</code> function:</p>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb38-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-hearts-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-hearts-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-hearts-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</div>
<p>One of my favourite systems is a very simple one that draws many of these Perlin hearts on a grid, filling each one with a colour selected from a randomly sampled palette. To replicate that here I‚Äôll need a palette generator and once again I‚Äôll fall back on our old favourite <code>sample_canva()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb39-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb39-4">}</span></code></pre></div>
</div>
<p>Now that we have a palette generator we can use the functional programming toolkit from <code>purrr</code> to do the work for us. In this case I‚Äôm using <code>pmap_dfr()</code> to call the <code>perlin_heart()</code> at a variety of different settings. I‚Äôve included the <code>x_shift</code>, <code>y_shift</code> and <code>id</code> values among the settings to make it a little easier to plot the data:</p>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">perlin_heart_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nx =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ny =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb40-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb40-3">  </span>
<span id="cb40-4">  heart_settings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb40-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb40-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb40-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nx, </span>
<span id="cb40-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ny</span>
<span id="cb40-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb40-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) </span>
<span id="cb40-11">  </span>
<span id="cb40-12">  heart_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(heart_settings, perlin_heart)</span>
<span id="cb40-13">  </span>
<span id="cb40-14">  heart_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb40-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(seed)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, nx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ny <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb40-20">}</span>
<span id="cb40-21"></span>
<span id="cb40-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">451</span>)</span></code></pre></div>
<div class="cell quarto-layout-panel page-columns page-full" data-layout-ncol="1" data-layout-align="center">
<div class="quarto-layout-row page-full">
<div class="quarto-layout-cell page-columns page-full" style="flex-basis: 100.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/perlin-hearts-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-screen-inset" width="4200"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="exercise-perlin-heard-grid" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included as the <code>perlin-heart-grid.R</code> script in the materials. To check that you understand it, try modifying it in the following ways:</p>
<ol type="1">
<li><p>Only show 50% of the hearts</p></li>
<li><p>Add a small amount of random noise to the position of each heart</p></li>
<li><p>Give all the hearts the ‚Äúrough edged biscuit‚Äù look</p></li>
</ol>
</div>
</div>
<p>We can elaborate on this idea in various ways. For example, the <code>perlin_heart2()</code> function shown below modifies the original idea by adding a additional <code>width</code> variable computed in a similar way to <code>radius</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">perlin_heart2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb41-2">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb41-3">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb41-4">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb41-5">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb41-6">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb41-7">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb41-8">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rot =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb41-9">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb41-10">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb41-11">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb41-12">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb41-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb41-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb41-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n),</span>
<span id="cb41-16">    </span>
<span id="cb41-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb41-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle), </span>
<span id="cb41-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle), </span>
<span id="cb41-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb41-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb41-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb41-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb41-24">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise_radius</span>(r_min, r_max),</span>
<span id="cb41-26">    </span>
<span id="cb41-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_x</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_shift,</span>
<span id="cb41-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_y</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_shift,</span>
<span id="cb41-29">    </span>
<span id="cb41-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb41-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rot), </span>
<span id="cb41-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rot), </span>
<span id="cb41-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb41-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb41-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb41-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb41-37">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-38">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(w_min, w_max)),</span>
<span id="cb41-39">    </span>
<span id="cb41-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id</span>
<span id="cb41-41">  )</span>
<span id="cb41-42">}</span></code></pre></div>
</div>
<p>Here are three outputs from our <code>perlin_heart2()</code> function, showing the effect of varying the <code>rot</code> parameter. Because the width of outline varies, <code>rot</code> causes the whole pattern of variable thickness to rotate around the heart. As you might imagine, this is going to turn out to be very handy in a moment when we start animating these things!</p>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">show_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon) {</span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> width)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb42-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb42-7">}</span>
<span id="cb42-8"></span>
<span id="cb42-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rot =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_width</span>()</span>
<span id="cb42-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rot =</span> pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_width</span>()</span>
<span id="cb42-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rot =</span> pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_width</span>()</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-hearts-2-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-hearts-2-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/show-perlin-hearts-2-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Here‚Äôs an example where I plot several hearts at once courtesy of the magic of <code>pmap_dfr()</code>:</p>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">perlin_heart_grid2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nx =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ny =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb43-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb43-3">  </span>
<span id="cb43-4">  heart_settings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb43-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb43-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb43-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb43-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb43-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nx, </span>
<span id="cb43-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ny</span>
<span id="cb43-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb43-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,</span>
<span id="cb43-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> x_shift <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb43-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> y_shift <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb43-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rot =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb43-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()</span>
<span id="cb43-18">    ) </span>
<span id="cb43-19">  </span>
<span id="cb43-20">  heart_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(heart_settings, perlin_heart2)</span>
<span id="cb43-21">  </span>
<span id="cb43-22">  heart_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> width)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(seed)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, nx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ny <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb43-31">}</span>
<span id="cb43-32"></span>
<span id="cb43-33"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart_grid2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>)</span></code></pre></div>
<div class="cell quarto-layout-panel page-columns page-full" data-layout-ncol="1" data-layout-align="center">
<div class="quarto-layout-row page-full">
<div class="quarto-layout-cell page-columns page-full" style="flex-basis: 100.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/perlin-heart-2-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img column-screen-inset" width="4200"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="exercise-perlin-heard-grid-2" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included as the <code>perlin-heart-grid-2.R</code> script in the materials. Can you modify it so that each heart is plotted in a single colour rather than in the banded pattern? With different hearts having different colours?</p>
</div>
</div>
</section>
<section id="animated-perlin-hearts" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="animated-perlin-hearts">Animated perlin hearts</h2>
<p>The final example for this session uses the <code>gifsky</code> package to create an animated version of the variable-width hearts from the last section, by ‚Äúrotating‚Äù or ‚Äúsliding‚Äù the variable-with curves along the contours of the Perlin hearts. The design of the functions in this system is very similar in spirit to that adopted in the static systems. The main difference is that the output is created by calling the <code>save_gif()</code> function. We pass it an expression that, in the normal course of events, would create many plots ‚Äì that‚Äôs what the <code>generate_all_frames()</code> function does ‚Äì and it captures these plots and turns them into a single animated gif:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">perlin_heart_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nhearts =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scatter =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb44-2">  </span>
<span id="cb44-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb44-4">  </span>
<span id="cb44-5">  palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-6">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(nhearts))()</span>
<span id="cb44-7">  </span>
<span id="cb44-8">  heart_settings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb44-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nhearts,</span>
<span id="cb44-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb44-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, </span>
<span id="cb44-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb44-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb44-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb44-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(nhearts, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb44-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(nhearts, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb44-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rot =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(nhearts, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pi, pi)</span>
<span id="cb44-18">  )</span>
<span id="cb44-19">  </span>
<span id="cb44-20">  heart_settings <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(perlin_heart2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb44-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(palette, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb44-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(width)</span>
<span id="cb44-26">    )</span>
<span id="cb44-27">}</span>
<span id="cb44-28"></span>
<span id="cb44-29">generate_one_frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat) {</span>
<span id="cb44-30">  </span>
<span id="cb44-31">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> width, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shade)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-39">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb44-40">  </span>
<span id="cb44-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(pic)</span>
<span id="cb44-42">}</span>
<span id="cb44-43"></span>
<span id="cb44-44">rotate_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, percent) {</span>
<span id="cb44-45">  </span>
<span id="cb44-46">  len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb44-47">  ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> percent)</span>
<span id="cb44-48">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb44-49">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> len) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb44-50">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(x[(ind<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>len], x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind])</span>
<span id="cb44-51">}</span>
<span id="cb44-52"></span>
<span id="cb44-53">generate_all_frames <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nframes =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb44-54">  </span>
<span id="cb44-55">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(frame <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nframes) {</span>
<span id="cb44-56">    dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-57">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-58">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rotate_vector</span>(frame <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> nframes)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-59">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_one_frame</span>()</span>
<span id="cb44-60">  }</span>
<span id="cb44-61">}</span>
<span id="cb44-62"></span>
<span id="cb44-63">animated_perlin_heart <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed, ...) {</span>
<span id="cb44-64">  </span>
<span id="cb44-65">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">save_gif</span>(</span>
<span id="cb44-66">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_all_frames</span>(),</span>
<span id="cb44-67">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gif_file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animated-perlin-heart-"</span>, seed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".gif"</span>),</span>
<span id="cb44-68">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb44-69">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb44-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delay =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb44-71">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb44-72">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span></span>
<span id="cb44-73">  )</span>
<span id="cb44-74">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb44-75">}</span>
<span id="cb44-76"></span>
<span id="cb44-77"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb44-78"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">animated_perlin_heart</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb44-79"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>12.868 sec elapsed</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include_graphics</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animated-perlin-heart-100.gif"</span>) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/animated-perlin-heart-100.gif" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">animated_perlin_heart</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb47-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">animated_perlin_heart</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>)</span>
<span id="cb47-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">animated_perlin_heart</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>)</span>
<span id="cb47-4"></span>
<span id="cb47-5">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include_graphics</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animated-perlin-heart-123.gif"</span>)</span>
<span id="cb47-6">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include_graphics</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animated-perlin-heart-456.gif"</span>)</span>
<span id="cb47-7">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include_graphics</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animated-perlin-heart-789.gif"</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/animated-perlin-heart-123.gif" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/animated-perlin-heart-456.gif" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/animated-perlin-heart-789.gif" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="exercise-perlin-animated" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>perlin-heart-animated.R</code> script in the materials. Personally I just find this one fun to play with, so instead of setting an exercise I‚Äôll let you take a look!</p>
</div>
</div>
</section>
<section id="textured-lines" class="level2">
<h2 class="anchored" data-anchor-id="textured-lines">Textured lines</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(e1071)</span></code></pre></div>
</div>
<p>There‚Äôs one other topic I want to mention in this post. To motivate the topic, I‚Äôll start by writing a function that uses statistical tools to generate random smooth curves in two dimensions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">smooth_loess <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, span) {</span>
<span id="cb49-2">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb49-3">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk =</span> x)</span>
<span id="cb49-4">  mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loess</span>(walk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> time, dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> span)</span>
<span id="cb49-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(mod, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n))</span>
<span id="cb49-6">}</span>
<span id="cb49-7"></span>
<span id="cb49-8">smooth_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">smoothing =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) { </span>
<span id="cb49-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb49-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb49-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smooth_loess</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbridge</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> smoothing),</span>
<span id="cb49-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smooth_loess</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbridge</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> smoothing),</span>
<span id="cb49-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb49-14">  )</span>
<span id="cb49-15">}</span></code></pre></div>
</div>
<p>Here‚Äôs an example of the paths it produces:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smooth_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb50-2"></span>
<span id="cb50-3">path <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb50-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb50-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb50-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb50-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/smooth-path-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>The path it self is smooth but slightly misshapen (i.e., it doesn‚Äôt feel ‚Äúprecise‚Äù in the same way that the very first heart felt precise), and you can imagine creating a generative art system that uses this kind of technique, but it doesn‚Äôt feel hand drawn. The problem here is that while the <em>path</em> feels fairly natural, the <em>stroke</em> itself is too perfect. It‚Äôs a solid line with no texture or grading to it. That spoils the illusion of naturalness to an extent.</p>
<p>It‚Äôs not too difficult to improve on this if, instead of plotting one smooth curve to represent the path, we plot a very large number of points or small segments with irregular breaks and spacing. In this section I won‚Äôt go into a lot of detail on design choices and the various ways you can do this, but I‚Äôll mention that Ben Kovach has a lovely post on <a href="https://www.generativehut.com/post/how-to-make-generative-art-feel-natural">making generative art feel natural</a> that discusses this in more detail.</p>
<p>For now, I‚Äôll limit myself to presenting some code for a system that implements this idea:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">perturb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb51-2">  path <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb51-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(stroke) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb51-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, noise),</span>
<span id="cb51-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, noise),</span>
<span id="cb51-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smooth_loess</span>(x, span),</span>
<span id="cb51-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smooth_loess</span>(y, span),</span>
<span id="cb51-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb51-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb51-11">    )</span>
<span id="cb51-12">}</span>
<span id="cb51-13"></span>
<span id="cb51-14">brush <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bristles =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ...) {</span>
<span id="cb51-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb51-16">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb51-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bristles) {</span>
<span id="cb51-18">    dat[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perturb</span>(path, ...)</span>
<span id="cb51-19">  }</span>
<span id="cb51-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>))</span>
<span id="cb51-21">}</span>
<span id="cb51-22"></span>
<span id="cb51-23">stroke <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> geom_path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, ...) {</span>
<span id="cb51-24">  dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  </span>
<span id="cb51-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb51-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb51-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb51-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha, </span>
<span id="cb51-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, </span>
<span id="cb51-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(stroke, id)</span>
<span id="cb51-31">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb51-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom</span>(</span>
<span id="cb51-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> colour, </span>
<span id="cb51-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb51-35">      ...</span>
<span id="cb51-36">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb51-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_alpha_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-39">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb51-41">}</span></code></pre></div>
</div>
<p>The plots below show a couple of examples of how you can apply this idea to our original curve:</p>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">path <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brush</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stroke</span>()</span>
<span id="cb52-4">path <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brush</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bristles =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">08</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stroke</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> geom_point, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell quarto-layout-panel" data-layout-ncol="2" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/smooth-path-textured-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/smooth-path-textured-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>This doesn‚Äôt in any sense exhaust the possibilities, but I hope it‚Äôs a useful hint about how to get started if you ever find yourself trying to figure out how to draw naturalistic looking pen strokes. Also, the fact that I‚Äôve included the code means I get to apply the idea to the Perlin hearts system:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brush</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bristles =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stroke</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/index_files/figure-html/perlin-heart-texture-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1200"></p>
</figure>
</div>
</div>
</div>
<div id="exercise-textured-lines" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code for this system is included in the <code>textured-lines.R</code> script. Try to use this a jumping-off point for designing your own system for generating textured lines. There‚Äôs no real reason why you should do it my way. How would you do this yourself?</p>
</div>
</div>
</section>
<section id="materials" class="level2">
<h2 class="anchored" data-anchor-id="materials">Materials</h2>
<p>Code for each of the source files referred to in this section of the workshop is included here. Click on the callout box below to see the code for the file you want to look at. Please keep in mind that (unlike the code in the main text) I haven‚Äôt modified these scripts since the original workshop, so you might need to play around with them to get them to work!</p>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="grow-multipolygon.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
grow-multipolygon.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb54-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb54-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb54-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb54-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb54-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb54-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb54-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gifski)</span>
<span id="cb54-10"></span>
<span id="cb54-11">square <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb54-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb54-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb54-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb54-15">)</span>
<span id="cb54-16"></span>
<span id="cb54-17">show_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, ...) {</span>
<span id="cb54-18">  </span>
<span id="cb54-19">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb54-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> colour, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb54-23">  </span>
<span id="cb54-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(show_vertices <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb54-25">    pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> colour)</span>
<span id="cb54-26">  }</span>
<span id="cb54-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pic)</span>
<span id="cb54-28">}</span>
<span id="cb54-29"></span>
<span id="cb54-30">sample_edge <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon) {</span>
<span id="cb54-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(polygon), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len)</span>
<span id="cb54-32">}</span>
<span id="cb54-33"></span>
<span id="cb54-34">edge_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x1, y1, x2, y2) {</span>
<span id="cb54-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>((x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb54-36">}</span>
<span id="cb54-37"></span>
<span id="cb54-38">edge_noise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(size) {</span>
<span id="cb54-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb54-40">}</span>
<span id="cb54-41"></span>
<span id="cb54-42">insert_edge <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, noise) {</span>
<span id="cb54-43">  </span>
<span id="cb54-44">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample and edge and remember its length</span></span>
<span id="cb54-45">  ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_edge</span>(polygon)</span>
<span id="cb54-46">  len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len[ind]</span>
<span id="cb54-47">  </span>
<span id="cb54-48">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># one endpoint of the old edge</span></span>
<span id="cb54-49">  last_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x[ind]</span>
<span id="cb54-50">  last_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y[ind]</span>
<span id="cb54-51">  </span>
<span id="cb54-52">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the other endpoint of the old edge</span></span>
<span id="cb54-53">  next_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb54-54">  next_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb54-55">  </span>
<span id="cb54-56">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># location of the new point to be inserted: noise </span></span>
<span id="cb54-57">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is scaled proportional to the length of the old edge</span></span>
<span id="cb54-58">  new_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb54-59">  new_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb54-60">  </span>
<span id="cb54-61">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the new row for insertion into the tibble, </span></span>
<span id="cb54-62">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># containing coords and length of the 'new' edge</span></span>
<span id="cb54-63">  new_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb54-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> new_x,</span>
<span id="cb54-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> new_y,</span>
<span id="cb54-66">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(new_x, new_y, next_x, next_y)</span>
<span id="cb54-67">  )</span>
<span id="cb54-68">  </span>
<span id="cb54-69">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the length of the 'old' edge</span></span>
<span id="cb54-70">  polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len[ind] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(</span>
<span id="cb54-71">    last_x, last_y, new_x, new_y</span>
<span id="cb54-72">  )</span>
<span id="cb54-73">  </span>
<span id="cb54-74">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># insert a row into the tibble</span></span>
<span id="cb54-75">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb54-76">    polygon[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind, ],</span>
<span id="cb54-77">    new_row,</span>
<span id="cb54-78">    polygon[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind), ]</span>
<span id="cb54-79">  )</span>
<span id="cb54-80">}</span>
<span id="cb54-81"></span>
<span id="cb54-82">grow_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, iterations, noise, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb54-83">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb54-84">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations) polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insert_edge</span>(polygon, noise)</span>
<span id="cb54-85">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(polygon)</span>
<span id="cb54-86">}</span>
<span id="cb54-87"></span>
<span id="cb54-88">grow_multipolygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(base_shape, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb54-89">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb54-90">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb54-91">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb54-92">    polygons[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon</span>(base_shape, ...)</span>
<span id="cb54-93">  }</span>
<span id="cb54-94">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(polygons, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb54-95">  polygons</span>
<span id="cb54-96">}</span>
<span id="cb54-97"></span>
<span id="cb54-98">show_multipolygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, fill, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>, ...) {</span>
<span id="cb54-99">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb54-100">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> fill, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-101">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb54-102">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb54-103">}</span>
<span id="cb54-104"></span>
<span id="cb54-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simplified version of the one in the workshop</span></span>
<span id="cb54-106"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb54-107">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> square <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb54-108">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-109">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_multipolygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb54-110">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d43790"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb54-111"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span>
<span id="cb54-112"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="grow-polygon.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
grow-polygon.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb55-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb55-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb55-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb55-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb55-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb55-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb55-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb55-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gifski)</span>
<span id="cb55-10"></span>
<span id="cb55-11">square <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb55-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb55-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb55-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb55-15">)</span>
<span id="cb55-16"></span>
<span id="cb55-17">show_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, ...) {</span>
<span id="cb55-18">  </span>
<span id="cb55-19">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb55-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> colour, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb55-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb55-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb55-23">  </span>
<span id="cb55-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(show_vertices <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb55-25">    pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> colour)</span>
<span id="cb55-26">  }</span>
<span id="cb55-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pic)</span>
<span id="cb55-28">}</span>
<span id="cb55-29"></span>
<span id="cb55-30">sample_edge <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon) {</span>
<span id="cb55-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(polygon), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len)</span>
<span id="cb55-32">}</span>
<span id="cb55-33"></span>
<span id="cb55-34">edge_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x1, y1, x2, y2) {</span>
<span id="cb55-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>((x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb55-36">}</span>
<span id="cb55-37"></span>
<span id="cb55-38">edge_noise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(size) {</span>
<span id="cb55-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb55-40">}</span>
<span id="cb55-41"></span>
<span id="cb55-42">insert_edge <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, noise) {</span>
<span id="cb55-43">  </span>
<span id="cb55-44">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample and edge and remember its length</span></span>
<span id="cb55-45">  ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_edge</span>(polygon)</span>
<span id="cb55-46">  len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len[ind]</span>
<span id="cb55-47">  </span>
<span id="cb55-48">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># one endpoint of the old edge</span></span>
<span id="cb55-49">  last_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x[ind]</span>
<span id="cb55-50">  last_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y[ind]</span>
<span id="cb55-51">  </span>
<span id="cb55-52">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the other endpoint of the old edge</span></span>
<span id="cb55-53">  next_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb55-54">  next_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb55-55">  </span>
<span id="cb55-56">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># location of the new point to be inserted: noise </span></span>
<span id="cb55-57">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is scaled proportional to the length of the old edge</span></span>
<span id="cb55-58">  new_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb55-59">  new_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb55-60">  </span>
<span id="cb55-61">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the new row for insertion into the tibble, </span></span>
<span id="cb55-62">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># containing coords and length of the 'new' edge</span></span>
<span id="cb55-63">  new_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb55-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> new_x,</span>
<span id="cb55-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> new_y,</span>
<span id="cb55-66">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(new_x, new_y, next_x, next_y)</span>
<span id="cb55-67">  )</span>
<span id="cb55-68">  </span>
<span id="cb55-69">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the length of the 'old' edge</span></span>
<span id="cb55-70">  polygon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len[ind] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(</span>
<span id="cb55-71">    last_x, last_y, new_x, new_y</span>
<span id="cb55-72">  )</span>
<span id="cb55-73">  </span>
<span id="cb55-74">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># insert a row into the tibble</span></span>
<span id="cb55-75">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb55-76">    polygon[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind, ],</span>
<span id="cb55-77">    new_row,</span>
<span id="cb55-78">    polygon[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind), ]</span>
<span id="cb55-79">  )</span>
<span id="cb55-80">}</span>
<span id="cb55-81"></span>
<span id="cb55-82">grow_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, iterations, noise, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb55-83">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb55-84">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations) polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insert_edge</span>(polygon, noise)</span>
<span id="cb55-85">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(polygon)</span>
<span id="cb55-86">}</span>
<span id="cb55-87"></span>
<span id="cb55-88"></span>
<span id="cb55-89"></span>
<span id="cb55-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modify this code</span></span>
<span id="cb55-91">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> square <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb55-92">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb55-93">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb55-94"></span>
<span id="cb55-95"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="perlin-blob.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
perlin-blob.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb56-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb56-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb56-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb56-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb56-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb56-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb56-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb56-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gifski)</span>
<span id="cb56-10"></span>
<span id="cb56-11">show_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, ...) {</span>
<span id="cb56-12">  </span>
<span id="cb56-13">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb56-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb56-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb56-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb56-17">  </span>
<span id="cb56-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(show_vertices <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb56-19">    pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb56-20">  }</span>
<span id="cb56-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pic)</span>
<span id="cb56-22">}</span>
<span id="cb56-23"></span>
<span id="cb56-24">normalise_radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, min, max) {</span>
<span id="cb56-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(min, max))</span>
<span id="cb56-26">}</span>
<span id="cb56-27"></span>
<span id="cb56-28">perlin_blob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb56-29">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb56-30">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb56-31">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb56-32">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb56-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb56-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n),</span>
<span id="cb56-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb56-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle),</span>
<span id="cb56-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb56-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_base, </span>
<span id="cb56-39">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_base, </span>
<span id="cb56-40">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb56-41">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb56-42">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb56-43">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb56-44">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-45">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise_radius</span>(r_min, r_max),</span>
<span id="cb56-46">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_base,</span>
<span id="cb56-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y_base</span>
<span id="cb56-48">  )</span>
<span id="cb56-49">}</span>
<span id="cb56-50"></span>
<span id="cb56-51"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>); </span>
<span id="cb56-52">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_blob</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb56-53"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="perlin-heart-animated.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
perlin-heart-animated.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb57-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb57-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb57-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb57-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb57-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb57-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb57-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb57-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gifski)</span>
<span id="cb57-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb57-11"></span>
<span id="cb57-12">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb57-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb57-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb57-15">}</span>
<span id="cb57-16"></span>
<span id="cb57-17">show_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, ...) {</span>
<span id="cb57-18">  </span>
<span id="cb57-19">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb57-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb57-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb57-23">  </span>
<span id="cb57-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(show_vertices <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb57-25">    pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb57-26">  }</span>
<span id="cb57-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pic)</span>
<span id="cb57-28">}</span>
<span id="cb57-29"></span>
<span id="cb57-30">heart_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(angle) {</span>
<span id="cb57-31">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb57-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x))</span>
<span id="cb57-33">}</span>
<span id="cb57-34"></span>
<span id="cb57-35">heart_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(angle) {</span>
<span id="cb57-36">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb57-37">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb57-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y))</span>
<span id="cb57-39">}</span>
<span id="cb57-40"></span>
<span id="cb57-41">normalise_radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, min, max) {</span>
<span id="cb57-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(min, max))</span>
<span id="cb57-43">}</span>
<span id="cb57-44"></span>
<span id="cb57-45">perlin_heart2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb57-46">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb57-47">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb57-48">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb57-49">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb57-50">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb57-51">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb57-52">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rot =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb57-53">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb57-54">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb57-55">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb57-56">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb57-57">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb57-58">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb57-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n),</span>
<span id="cb57-60">    </span>
<span id="cb57-61">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb57-62">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle), </span>
<span id="cb57-63">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle), </span>
<span id="cb57-64">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb57-65">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb57-66">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb57-67">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb57-68">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-69">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise_radius</span>(r_min, r_max),</span>
<span id="cb57-70">    </span>
<span id="cb57-71">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_x</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_shift,</span>
<span id="cb57-72">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_y</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_shift,</span>
<span id="cb57-73">    </span>
<span id="cb57-74">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb57-75">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rot), </span>
<span id="cb57-76">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rot), </span>
<span id="cb57-77">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb57-78">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb57-79">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb57-80">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb57-81">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-82">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(w_min, w_max)),</span>
<span id="cb57-83">    </span>
<span id="cb57-84">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id</span>
<span id="cb57-85">  )</span>
<span id="cb57-86">}</span>
<span id="cb57-87"></span>
<span id="cb57-88">perlin_heart_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nhearts =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scatter =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb57-89">  </span>
<span id="cb57-90">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb57-91">  </span>
<span id="cb57-92">  palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-93">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(nhearts))()</span>
<span id="cb57-94">  </span>
<span id="cb57-95">  heart_settings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb57-96">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nhearts,</span>
<span id="cb57-97">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb57-98">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, </span>
<span id="cb57-99">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb57-100">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb57-101">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb57-102">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(nhearts, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb57-103">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(nhearts, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scatter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb57-104">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rot =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(nhearts, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pi, pi)</span>
<span id="cb57-105">  )</span>
<span id="cb57-106">  </span>
<span id="cb57-107">  heart_settings <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-108">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(perlin_heart2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-109">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-110">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb57-111">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(palette, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb57-112">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(width)</span>
<span id="cb57-113">    )</span>
<span id="cb57-114">}</span>
<span id="cb57-115"></span>
<span id="cb57-116">generate_one_frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat) {</span>
<span id="cb57-117">  </span>
<span id="cb57-118">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-119">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> width, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shade)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-120">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-121">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-122">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-123">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-124">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-125">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb57-126">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb57-127">  </span>
<span id="cb57-128">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(pic)</span>
<span id="cb57-129">}</span>
<span id="cb57-130"></span>
<span id="cb57-131">rotate_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, percent) {</span>
<span id="cb57-132">  </span>
<span id="cb57-133">  len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb57-134">  ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> percent)</span>
<span id="cb57-135">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb57-136">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> len) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb57-137">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(x[(ind<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>len], x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind])</span>
<span id="cb57-138">}</span>
<span id="cb57-139"></span>
<span id="cb57-140">generate_all_frames <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nframes =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb57-141">  </span>
<span id="cb57-142">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(frame <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nframes) {</span>
<span id="cb57-143">    dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-144">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-145">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rotate_vector</span>(frame <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> nframes)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-146">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_one_frame</span>()</span>
<span id="cb57-147">  }</span>
<span id="cb57-148">}</span>
<span id="cb57-149"></span>
<span id="cb57-150">animated_perlin_heart <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed, ...) {</span>
<span id="cb57-151">  </span>
<span id="cb57-152">  gif_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"animated-perlin-heart-"</span>, seed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".gif"</span>)</span>
<span id="cb57-153">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">save_gif</span>(</span>
<span id="cb57-154">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_all_frames</span>(),</span>
<span id="cb57-155">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gif_file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, gif_file),</span>
<span id="cb57-156">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb57-157">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb57-158">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delay =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb57-159">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">progress =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb57-160">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span></span>
<span id="cb57-161">  )</span>
<span id="cb57-162">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb57-163">}</span>
<span id="cb57-164"></span>
<span id="cb57-165"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb57-166"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">animated_perlin_heart</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>)</span>
<span id="cb57-167"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="perlin-heart-grid-2.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
perlin-heart-grid-2.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb58-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb58-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb58-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb58-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb58-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb58-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb58-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb58-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gifski)</span>
<span id="cb58-10"></span>
<span id="cb58-11">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb58-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb58-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb58-14">}</span>
<span id="cb58-15"></span>
<span id="cb58-16">show_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, ...) {</span>
<span id="cb58-17">  </span>
<span id="cb58-18">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb58-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb58-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb58-22">  </span>
<span id="cb58-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(show_vertices <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb58-24">    pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb58-25">  }</span>
<span id="cb58-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pic)</span>
<span id="cb58-27">}</span>
<span id="cb58-28"></span>
<span id="cb58-29">heart_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(angle) {</span>
<span id="cb58-30">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb58-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x))</span>
<span id="cb58-32">}</span>
<span id="cb58-33"></span>
<span id="cb58-34">heart_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(angle) {</span>
<span id="cb58-35">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb58-36">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb58-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y))</span>
<span id="cb58-38">}</span>
<span id="cb58-39"></span>
<span id="cb58-40">normalise_radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, min, max) {</span>
<span id="cb58-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(min, max))</span>
<span id="cb58-42">}</span>
<span id="cb58-43"></span>
<span id="cb58-44">perlin_heart2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb58-45">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb58-46">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb58-47">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb58-48">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb58-49">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb58-50">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb58-51">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rot =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb58-52">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb58-53">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb58-54">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb58-55">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb58-56">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb58-57">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb58-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n),</span>
<span id="cb58-59">    </span>
<span id="cb58-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb58-61">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle), </span>
<span id="cb58-62">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle), </span>
<span id="cb58-63">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb58-64">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb58-65">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb58-66">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb58-67">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb58-68">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise_radius</span>(r_min, r_max),</span>
<span id="cb58-69">    </span>
<span id="cb58-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_x</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_shift,</span>
<span id="cb58-71">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_y</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_shift,</span>
<span id="cb58-72">    </span>
<span id="cb58-73">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb58-74">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rot), </span>
<span id="cb58-75">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rot), </span>
<span id="cb58-76">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb58-77">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb58-78">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb58-79">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb58-80">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb58-81">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(w_min, w_max)),</span>
<span id="cb58-82">    </span>
<span id="cb58-83">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id</span>
<span id="cb58-84">  )</span>
<span id="cb58-85">}</span>
<span id="cb58-86"></span>
<span id="cb58-87">perlin_heart_grid2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nx =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ny =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb58-88">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb58-89">  </span>
<span id="cb58-90">  heart_settings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb58-91">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb58-92">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb58-93">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>,</span>
<span id="cb58-94">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb58-95">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nx, </span>
<span id="cb58-96">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ny</span>
<span id="cb58-97">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb58-98">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb58-99">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,</span>
<span id="cb58-100">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> x_shift <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb58-101">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> y_shift <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb58-102">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rot =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb58-103">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()</span>
<span id="cb58-104">    ) </span>
<span id="cb58-105">  </span>
<span id="cb58-106">  heart_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(heart_settings, perlin_heart2)</span>
<span id="cb58-107">  </span>
<span id="cb58-108">  heart_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb58-109">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> width)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-110">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-111">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-112">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-113">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(seed)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-114">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-115">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb58-116">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, nx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ny <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb58-117">}</span>
<span id="cb58-118"></span>
<span id="cb58-119">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart_grid2</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>)</span>
<span id="cb58-120"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="perlin-heart-grid.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-13-contents" aria-controls="callout-13" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
perlin-heart-grid.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-13" class="callout-13-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb59-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb59-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb59-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb59-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb59-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb59-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb59-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb59-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gifski)</span>
<span id="cb59-10"></span>
<span id="cb59-11">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb59-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb59-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb59-14">}</span>
<span id="cb59-15"></span>
<span id="cb59-16">show_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, ...) {</span>
<span id="cb59-17">  </span>
<span id="cb59-18">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb59-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb59-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb59-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb59-22">  </span>
<span id="cb59-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(show_vertices <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb59-24">    pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb59-25">  }</span>
<span id="cb59-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pic)</span>
<span id="cb59-27">}</span>
<span id="cb59-28"></span>
<span id="cb59-29">heart_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(angle) {</span>
<span id="cb59-30">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb59-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x))</span>
<span id="cb59-32">}</span>
<span id="cb59-33"></span>
<span id="cb59-34">heart_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(angle) {</span>
<span id="cb59-35">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb59-36">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb59-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y))</span>
<span id="cb59-38">}</span>
<span id="cb59-39"></span>
<span id="cb59-40">normalise_radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, min, max) {</span>
<span id="cb59-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(min, max))</span>
<span id="cb59-42">}</span>
<span id="cb59-43"></span>
<span id="cb59-44">perlin_heart <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb59-45">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb59-46">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb59-47">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb59-48">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb59-49">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb59-50">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb59-51">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb59-52">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb59-53">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb59-54">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb59-55">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n),</span>
<span id="cb59-56">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb59-57">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle),</span>
<span id="cb59-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb59-59">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_base, </span>
<span id="cb59-60">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_base, </span>
<span id="cb59-61">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb59-62">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb59-63">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb59-64">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb59-65">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb59-66">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise_radius</span>(r_min, r_max),</span>
<span id="cb59-67">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_x</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_shift,</span>
<span id="cb59-68">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_y</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_shift,</span>
<span id="cb59-69">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id</span>
<span id="cb59-70">  )</span>
<span id="cb59-71">}</span>
<span id="cb59-72"></span>
<span id="cb59-73">perlin_heart_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nx =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ny =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb59-74">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb59-75">  </span>
<span id="cb59-76">  heart_settings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb59-77">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb59-78">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb59-79">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nx, </span>
<span id="cb59-80">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ny</span>
<span id="cb59-81">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb59-82">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) </span>
<span id="cb59-83">  </span>
<span id="cb59-84">  heart_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(heart_settings, perlin_heart)</span>
<span id="cb59-85">  </span>
<span id="cb59-86">  heart_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb59-87">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb59-88">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb59-89">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb59-90">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(seed)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb59-91">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, nx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ny <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb59-92">}</span>
<span id="cb59-93"></span>
<span id="cb59-94">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">451</span>)</span>
<span id="cb59-95"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="perlin-heart.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
perlin-heart.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb60-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb60-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb60-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb60-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb60-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb60-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb60-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb60-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gifski)</span>
<span id="cb60-10"></span>
<span id="cb60-11">show_polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_vertices =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, ...) {</span>
<span id="cb60-12">  </span>
<span id="cb60-13">  pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb60-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb60-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb60-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb60-17">  </span>
<span id="cb60-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(show_vertices <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb60-19">    pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb60-20">  }</span>
<span id="cb60-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(pic)</span>
<span id="cb60-22">}</span>
<span id="cb60-23"></span>
<span id="cb60-24">heart_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(angle) {</span>
<span id="cb60-25">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb60-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x))</span>
<span id="cb60-27">}</span>
<span id="cb60-28"></span>
<span id="cb60-29">heart_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(angle) {</span>
<span id="cb60-30">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb60-31">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> angle)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb60-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y))</span>
<span id="cb60-33">}</span>
<span id="cb60-34"></span>
<span id="cb60-35">normalise_radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, min, max) {</span>
<span id="cb60-36">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(min, max))</span>
<span id="cb60-37">}</span>
<span id="cb60-38"></span>
<span id="cb60-39">perlin_heart <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb60-40">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb60-41">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb60-42">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_min =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb60-43">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb60-44">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb60-45">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_shift =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb60-46">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb60-47">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb60-48">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb60-49">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb60-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> n),</span>
<span id="cb60-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb60-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_base =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle),</span>
<span id="cb60-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb60-54">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_base, </span>
<span id="cb60-55">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_base, </span>
<span id="cb60-56">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> freq_init,</span>
<span id="cb60-57">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_perlin, </span>
<span id="cb60-58">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb60-59">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb60-60">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb60-61">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise_radius</span>(r_min, r_max),</span>
<span id="cb60-62">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_x</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_shift,</span>
<span id="cb60-63">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_y</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_shift,</span>
<span id="cb60-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id</span>
<span id="cb60-65">  )</span>
<span id="cb60-66">}</span>
<span id="cb60-67"></span>
<span id="cb60-68"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>); </span>
<span id="cb60-69">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perlin_heart</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_polygon</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb60-70"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="smudged-hexagon.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-15-contents" aria-controls="callout-15" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
smudged-hexagon.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-15" class="callout-15-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb61-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb61-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb61-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb61-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb61-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb61-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb61-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb61-9"></span>
<span id="cb61-10">edge_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x1, y1, x2, y2) {</span>
<span id="cb61-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>((x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb61-12">}</span>
<span id="cb61-13"></span>
<span id="cb61-14">edge_noise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(size) {</span>
<span id="cb61-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb61-16">}</span>
<span id="cb61-17"></span>
<span id="cb61-18">sample_edge_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon) {</span>
<span id="cb61-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(polygon), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(polygon, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len))</span>
<span id="cb61-20">}</span>
<span id="cb61-21"></span>
<span id="cb61-22">insert_edge_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, noise) {</span>
<span id="cb61-23">  </span>
<span id="cb61-24">  ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_edge_l</span>(polygon)</span>
<span id="cb61-25">  len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len</span>
<span id="cb61-26">  </span>
<span id="cb61-27">  last_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb61-28">  last_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb61-29">  </span>
<span id="cb61-30">  next_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb61-31">  next_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb61-32">  </span>
<span id="cb61-33">  new_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb61-34">  new_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb61-35">  </span>
<span id="cb61-36">  new_point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb61-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> new_x,</span>
<span id="cb61-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> new_y,</span>
<span id="cb61-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(new_x, new_y, next_x, next_y)</span>
<span id="cb61-40">  )</span>
<span id="cb61-41">  </span>
<span id="cb61-42">  polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(</span>
<span id="cb61-43">    last_x, last_y, new_x, new_y</span>
<span id="cb61-44">  )</span>
<span id="cb61-45">  </span>
<span id="cb61-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb61-47">    polygon[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind],</span>
<span id="cb61-48">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(new_point),</span>
<span id="cb61-49">    polygon[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind)]</span>
<span id="cb61-50">  )</span>
<span id="cb61-51">}</span>
<span id="cb61-52"></span>
<span id="cb61-53">grow_polygon_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, iterations, noise, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb61-54">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb61-55">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations) polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insert_edge_l</span>(polygon, noise)</span>
<span id="cb61-56">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(polygon)</span>
<span id="cb61-57">}</span>
<span id="cb61-58"></span>
<span id="cb61-59">grow_multipolygon_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(base_shape, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb61-60">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb61-61">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb61-62">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb61-63">    polygons[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(base_shape, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb61-64">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb61-65">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb61-66">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fn =</span> unlist))</span>
<span id="cb61-67">  }</span>
<span id="cb61-68">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(polygons, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb61-69">  polygons</span>
<span id="cb61-70">}</span>
<span id="cb61-71"></span>
<span id="cb61-72">show_multipolygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, fill, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>, ...) {</span>
<span id="cb61-73">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb61-74">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> fill, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb61-75">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb61-76">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb61-77">}</span>
<span id="cb61-78"></span>
<span id="cb61-79">smudged_hexagon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise3 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) {</span>
<span id="cb61-80">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb61-81">  </span>
<span id="cb61-82">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define hexagonal base shape</span></span>
<span id="cb61-83">  theta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb61-84">  hexagon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb61-85">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(theta),</span>
<span id="cb61-86">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(theta),</span>
<span id="cb61-87">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(x, y, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lead</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lead</span>(y))</span>
<span id="cb61-88">  )</span>
<span id="cb61-89">  hexagon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb61-90">  hexagon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>(hexagon)</span>
<span id="cb61-91">  base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hexagon <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb61-92">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(</span>
<span id="cb61-93">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, </span>
<span id="cb61-94">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> noise1</span>
<span id="cb61-95">    )</span>
<span id="cb61-96">  </span>
<span id="cb61-97">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define intermediate-base-shapes in clusters</span></span>
<span id="cb61-98">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb61-99">  ijk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb61-100">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb61-101">    base_i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb61-102">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(</span>
<span id="cb61-103">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, </span>
<span id="cb61-104">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> noise2</span>
<span id="cb61-105">      )</span>
<span id="cb61-106">    </span>
<span id="cb61-107">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb61-108">      base_j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base_i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb61-109">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(</span>
<span id="cb61-110">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, </span>
<span id="cb61-111">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> noise2</span>
<span id="cb61-112">        )</span>
<span id="cb61-113">      </span>
<span id="cb61-114">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grow 10 polygons per intermediate-base</span></span>
<span id="cb61-115">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb61-116">        ijk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ijk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb61-117">        polygons[[ijk]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base_j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb61-118">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(</span>
<span id="cb61-119">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, </span>
<span id="cb61-120">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> noise3</span>
<span id="cb61-121">          ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb61-122">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb61-123">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb61-124">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fn =</span> unlist))</span>
<span id="cb61-125">      }</span>
<span id="cb61-126">    }</span>
<span id="cb61-127">  }</span>
<span id="cb61-128">  </span>
<span id="cb61-129">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return as data frame</span></span>
<span id="cb61-130">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(polygons, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb61-131">}</span>
<span id="cb61-132"></span>
<span id="cb61-133"></span>
<span id="cb61-134"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb61-135">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smudged_hexagon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>)</span>
<span id="cb61-136">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4379005"</span>)</span>
<span id="cb61-137"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(</span>
<span id="cb61-138">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smudged-hexagon.png"</span>), </span>
<span id="cb61-139">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> pic,</span>
<span id="cb61-140">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb61-141">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb61-142">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"px"</span>,</span>
<span id="cb61-143">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>,</span>
<span id="cb61-144">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span></span>
<span id="cb61-145">)</span>
<span id="cb61-146"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="splotch.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-16-contents" aria-controls="callout-16" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
splotch.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-16" class="callout-16-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb62-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb62-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb62-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb62-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb62-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb62-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb62-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb62-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb62-10"></span>
<span id="cb62-11">edge_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x1, y1, x2, y2) {</span>
<span id="cb62-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>((x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb62-13">}</span>
<span id="cb62-14"></span>
<span id="cb62-15">edge_noise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(size) {</span>
<span id="cb62-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb62-17">}</span>
<span id="cb62-18"></span>
<span id="cb62-19">sample_edge_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon) {</span>
<span id="cb62-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(polygon), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(polygon, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len))</span>
<span id="cb62-21">}</span>
<span id="cb62-22"></span>
<span id="cb62-23">insert_edge_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, noise) {</span>
<span id="cb62-24">  </span>
<span id="cb62-25">  ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_edge_l</span>(polygon)</span>
<span id="cb62-26">  len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len</span>
<span id="cb62-27">  </span>
<span id="cb62-28">  last_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb62-29">  last_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb62-30">  </span>
<span id="cb62-31">  next_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb62-32">  next_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> polygon[[ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb62-33">  </span>
<span id="cb62-34">  new_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb62-35">  new_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> next_y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_noise</span>(len <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> noise)</span>
<span id="cb62-36">  </span>
<span id="cb62-37">  new_point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb62-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> new_x,</span>
<span id="cb62-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> new_y,</span>
<span id="cb62-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(new_x, new_y, next_x, next_y)</span>
<span id="cb62-41">  )</span>
<span id="cb62-42">  </span>
<span id="cb62-43">  polygon[[ind]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>seg_len <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_length</span>(</span>
<span id="cb62-44">    last_x, last_y, new_x, new_y</span>
<span id="cb62-45">  )</span>
<span id="cb62-46">  </span>
<span id="cb62-47">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb62-48">    polygon[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind],</span>
<span id="cb62-49">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(new_point),</span>
<span id="cb62-50">    polygon[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>ind)]</span>
<span id="cb62-51">  )</span>
<span id="cb62-52">}</span>
<span id="cb62-53"></span>
<span id="cb62-54">grow_polygon_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, iterations, noise, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb62-55">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb62-56">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations) polygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">insert_edge_l</span>(polygon, noise)</span>
<span id="cb62-57">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(polygon)</span>
<span id="cb62-58">}</span>
<span id="cb62-59"></span>
<span id="cb62-60">grow_multipolygon_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(base_shape, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb62-61">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb62-62">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb62-63">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb62-64">    polygons[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(base_shape, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-65">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-66">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-67">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fn =</span> unlist))</span>
<span id="cb62-68">  }</span>
<span id="cb62-69">  polygons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(polygons, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb62-70">  polygons</span>
<span id="cb62-71">}</span>
<span id="cb62-72"></span>
<span id="cb62-73">show_multipolygon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(polygon, fill, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>, ...) {</span>
<span id="cb62-74">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(polygon, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb62-75">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> fill, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb62-76">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb62-77">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb62-78">}</span>
<span id="cb62-79"></span>
<span id="cb62-80">splotch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layers =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb62-81">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb62-82">  square_l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb62-83">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb62-84">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb62-85">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seg_len =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb62-86">  ))</span>
<span id="cb62-87">  square_l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb62-88">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_polygon_l</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-89">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grow_multipolygon_l</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> layers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed) </span>
<span id="cb62-90">}</span>
<span id="cb62-91"></span>
<span id="cb62-92"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb62-93">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splotch</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb62-94">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_multipolygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb62-95"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(</span>
<span id="cb62-96">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"splotch.png"</span>), </span>
<span id="cb62-97">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> pic,</span>
<span id="cb62-98">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb62-99">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb62-100">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"px"</span>,</span>
<span id="cb62-101">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>,</span>
<span id="cb62-102">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span></span>
<span id="cb62-103">)</span>
<span id="cb62-104"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="textured-lines.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-17-contents" aria-controls="callout-17" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
textured-lines.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-17" class="callout-17-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb63-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb63-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb63-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb63-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(e1071)</span>
<span id="cb63-6"></span>
<span id="cb63-7">smooth_loess <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, span) {</span>
<span id="cb63-8">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb63-9">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk =</span> x)</span>
<span id="cb63-10">  mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loess</span>(walk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> time, dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> span)</span>
<span id="cb63-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(mod, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n))</span>
<span id="cb63-12">}</span>
<span id="cb63-13"></span>
<span id="cb63-14">smooth_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">smoothing =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) { </span>
<span id="cb63-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb63-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb63-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smooth_loess</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbridge</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> smoothing),</span>
<span id="cb63-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smooth_loess</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbridge</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> smoothing),</span>
<span id="cb63-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb63-20">  )</span>
<span id="cb63-21">}</span>
<span id="cb63-22"></span>
<span id="cb63-23">perturb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb63-24">  path <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb63-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(stroke) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb63-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, noise),</span>
<span id="cb63-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, noise),</span>
<span id="cb63-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smooth_loess</span>(x, span),</span>
<span id="cb63-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smooth_loess</span>(y, span),</span>
<span id="cb63-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb63-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb63-33">    )</span>
<span id="cb63-34">}</span>
<span id="cb63-35"></span>
<span id="cb63-36">brush <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bristles =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ...) {</span>
<span id="cb63-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb63-38">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb63-39">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bristles) {</span>
<span id="cb63-40">    dat[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perturb</span>(path, ...)</span>
<span id="cb63-41">  }</span>
<span id="cb63-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>))</span>
<span id="cb63-43">}</span>
<span id="cb63-44"></span>
<span id="cb63-45">stroke <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> geom_path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, ...) {</span>
<span id="cb63-46">  dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  </span>
<span id="cb63-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb63-48">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb63-49">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb63-50">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha, </span>
<span id="cb63-51">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, </span>
<span id="cb63-52">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(stroke, id)</span>
<span id="cb63-53">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-54">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom</span>(</span>
<span id="cb63-55">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> colour, </span>
<span id="cb63-56">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb63-57">      ...</span>
<span id="cb63-58">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-59">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-60">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_alpha_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-61">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-62">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-63">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(</span>
<span id="cb63-64">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>, </span>
<span id="cb63-65">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span></span>
<span id="cb63-66">    ))</span>
<span id="cb63-67">}</span>
<span id="cb63-68"></span>
<span id="cb63-69">path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">smooth_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb63-70">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> path <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brush</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stroke</span>()</span>
<span id="cb63-71"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Art from Code {III:} {Polygon} Tricks},
  date = {2024-12-20},
  url = {https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>‚ÄúArt from Code III: Polygon
Tricks.‚Äù</span> December 20, 2024. <a href="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/">https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/</guid>
  <pubDate>Thu, 19 Dec 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-12-20_art-from-code-3/hexagon.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>Art from code II. Spatial tricks with ambient</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><em>A couple of years ago I gave an invited workshop called <a href="https://art-from-code.netlify.app">art from code</a> at the 2022 rstudio::conf (now posit::conf) conference. As part of the workshop I wrote a lengthy series of notes on how to make generative art using R, all of which were released under a CC-BY licence. For a while now I‚Äôd been thinking I should do something with these notes. I considered writing a book, but in all honesty I don‚Äôt have the spare capacity for a side-project of that scale these days. I can barely keep up with the workload at my day job as it is. So instead, I‚Äôve decided that I‚Äôd port them over to this site as a series of blog posts. In doing so I‚Äôve made a deliberate decision not to modify the original content too much (nobody loves it when an artist tries to ‚Äúimprove‚Äù the original, after all). All I‚Äôve done is update the code to accommodate package changes since 2022, and some minor edits so that the images are legible when embedded in this blog (which is light-themed, and the original was dark-theme). Other than that, I‚Äôve left it alone. This is the second post in that series.</em></p>
<ul>
<li><a href="../../posts/2024-12-18_art-from-code-1/">Prelude</a></li>
<li><a href="../../posts/2024-12-19_art-from-code-2/">Spatial tricks with ambient</a></li>
<li><a href="../../posts/2024-12-20_art-from-code-3/">Polygon tricks</a></li>
<li><a href="../../posts/2024-12-21_art-from-code-4/">Shading tricks</a></li>
<li><a href="../../posts/2024-12-22_art-from-code-5/">Iterated function systems</a></li>
<li><a href="../../posts/2024-12-23_art-from-code-6/">Tiles and tessellations</a></li>
<li><a href="../../posts/2024-12-24_art-from-code-7/">Pixel filters</a></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span></code></pre></div>
</div>
<section id="sampling-spatial-patterns" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="sampling-spatial-patterns">Sampling spatial patterns</h2>
<p>Generative art relies on having access to a source of randomness, and using that randomness to construct patterned objects. In the last session I wrote a simple function to generate random palettes, for instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb2-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb2-4">}</span></code></pre></div>
</div>
<p>Every time I call this function (assuming I don‚Äôt set the <code>seed</code> argument), R uses the pseudorandom number generator to select a palette of four colours:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>()</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>()</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "#fcc875" "#baa896" "#e6ccb5" "#e38b75"
[1] "#99d3df" "#88bbd6" "#cdcdcd" "#e9e9e9"
[1] "#265c00" "#68a225" "#b3de81" "#fdffff"</code></pre>
</div>
</div>
<p>Each of these colours is itself an object defined in a three dimensional space (the hex codes refer to co-ordinates in RGB space), and when I sample a palette of four colours what I‚Äôm really doing is constructing a random object with 12 components.</p>
<p>We can take this idea further. The <code>sample_data()</code> function I wrote in the last session creates random tibbles according to some simple rules, and those tibbles are structured objects too. Admittedly the structure to those objects isn‚Äôt very complicated, because there‚Äôs no pattern to numbers in the generated table, but there‚Äôs nothing stopping us from writing a function that randomly generates tabular data structures that have patterns in them, right? For instance, I could do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">sample_cross_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb5-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb5-3">  mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> n)</span>
<span id="cb5-4">  mat[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-5">  mat[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(mat)</span>
<span id="cb5-7">}</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_cross_matrix</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    0    0    1    0    0    0    0    0    0     0
 [2,]    1    1    1    1    1    1    1    1    1     1
 [3,]    0    0    1    0    0    0    0    0    0     0
 [4,]    0    0    1    0    0    0    0    0    0     0
 [5,]    0    0    1    0    0    0    0    0    0     0
 [6,]    0    0    1    0    0    0    0    0    0     0
 [7,]    0    0    1    0    0    0    0    0    0     0
 [8,]    0    0    1    0    0    0    0    0    0     0
 [9,]    0    0    1    0    0    0    0    0    0     0
[10,]    0    0    1    0    0    0    0    0    0     0</code></pre>
</div>
</div>
<p>Again, this isn‚Äôt the most complicated example, but it‚Äôs an illustration of the idea that we can write functions to sample random spatial patterns:</p>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_cross_matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_cross_matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_cross_matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/random-crosses-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/random-crosses-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/random-crosses-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>I‚Äôll concede that a generative art system that draws a cross at a random location in the image isn‚Äôt the most exciting or innovative thing I‚Äôve ever written, but the core idea is clear I hope. And you would probably be unsurprised to learn that there are a number of more sophisticated tools you can use to generate random spatial patterns.</p>
<p>In this post I‚Äôll introduce the <a href="https://ambient.data-imaginist.com/">ambient package</a>, developed by <a href="https://www.data-imaginist.com/">Thomas Lin Pedersen</a>, which supplies R bindings to a C++ library called FastNoise.</p>
</section>
<section id="our-first-ambient-artwork" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="our-first-ambient-artwork">Our first ambient artwork</h2>
<p>The first step in creating art using the <code>ambient</code> package is to define the ‚Äúcanvas‚Äù, a spatial grid of x and y co-ordinates in which values will be stored. I find it helpful to imagine my canvas as the unit square: the smallest value is 0 and the largest value is 1. If I want an 800x800 grid, I use the <code>seq()</code> function to define a length-800 sequence of evenly-spaced numbers starting at 0 and ending at 1:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">x_coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb8-2">y_coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span></code></pre></div>
</div>
<p>The <code>canvas</code> that I‚Äôll paint on will be a data frame consisting of all possible combinations of <code>x_coords</code> and <code>y_coords</code>. In base R we can create an object like this using the <code>expand.grid()</code> function, and there‚Äôs a tidy equivalent called <code>expand_grid()</code> in the <code>tidyr</code> package. However, when working with the <code>ambient</code> package I prefer to use the <code>long_grid()</code> function that it supplies:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_coords, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_coords) </span>
<span id="cb9-2">canvas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 640,000 √ó 2
       x       y
   &lt;dbl&gt;   &lt;dbl&gt;
 1     0 0      
 2     0 0.00125
 3     0 0.00250
 4     0 0.00375
 5     0 0.00501
 6     0 0.00626
 7     0 0.00751
 8     0 0.00876
 9     0 0.0100 
10     0 0.0113 
# ‚Ñπ 639,990 more rows</code></pre>
</div>
</div>
<p>The reason I use <code>long_grid()</code> rather than one of the more familiar versions is that under the hood Thomas has supplied some optimisations that make these objects more efficient for generative art purposes. Among other things, you can easily convert them to arrays, matrices, and raster objects that respect the implied spatial grid, which makes it a lot easier to render images from these objects. But let‚Äôs not dive too deep into the details right now!</p>
<p>Now that we have a ‚Äúcanvas‚Äù we‚Äôll want to add some ‚Äúpaint‚Äù, and to apply that paint we‚Äôll need to select a ‚Äúbrush‚Äù. In this context, the brush is a spatial pattern generator of some kind. The <code>ambient</code> package includes many such generator functions. Some generate very regular patterns:</p>
<ul>
<li><code>gen_waves()</code> generates smooth concentric wave-like patterns</li>
<li><code>gen_spheres()</code> generates concentric circles</li>
<li><code>gen_checkerboard()</code> generates grids of squares in a checkerboard pattern</li>
</ul>
<p>Others generate very irregular patterns:</p>
<ul>
<li><code>gen_white()</code> generates white noise: equal intensity at every spatial frequency</li>
</ul>
<p>The most interesting generators tend to be those that create patterns that have some structure but are still quite unpredictable:</p>
<ul>
<li><code>gen_perlin()</code> and <code>gen_simplex()</code> generate random ‚Äúwavy‚Äù patterns</li>
<li><code>gen_worley()</code> generates random ‚Äúcellular‚Äù patterns</li>
</ul>
<p>We‚Äôll see some examples of those later! For now let‚Äôs use <code>gen_perlin()</code> as our brush! Like all the pattern generators, the <code>gen_perlin()</code> function takes coordinate values as input. At a minimum it expects an <code>x</code> co-ordinate, but you can also supply <code>y</code> and <code>z</code> values if you like. You can also specify the <code>frequency</code> parameter, which sets the scale for the output: high frequency patterns will vary quickly as the co-ordinates change, low-frequency patterns will vary slowly. Compare these outputs for instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_perlin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_perlin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -0.001000010 -0.001000010 -0.001000009 -0.001000009 -0.001000007
[1] -0.375  0.000  0.000 -0.250  0.000</code></pre>
</div>
</div>
<p>Both versions show variability, but the scale is quite different! As an aside, notice that <code>gen_perlin()</code> also allows you to specify the <code>seed</code> used to generate the pattern, similar to the way I did earlier when writing <code>sample_canva()</code> to generate random palettes.</p>
<p>Now that we have a sense for what the <code>gen_perlin()</code> function does let‚Äôs use it to add a new column to our <code>canvas</code>. I have <code>dplyr</code> loaded so I‚Äôll use <code>mutate()</code> to do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_perlin</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>))</span>
<span id="cb13-3"></span>
<span id="cb13-4">canvas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 640,000 √ó 3
       x       y  paint
   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;
 1     0 0       0     
 2     0 0.00125 0.0125
 3     0 0.00250 0.0249
 4     0 0.00375 0.0370
 5     0 0.00501 0.0489
 6     0 0.00626 0.0604
 7     0 0.00751 0.0713
 8     0 0.00876 0.0817
 9     0 0.0100  0.0915
10     0 0.0113  0.101 
# ‚Ñπ 639,990 more rows</code></pre>
</div>
</div>
<p>Now that I have this column, I can use it to control the <code>fill</code> aesthetic in a ggplot. The co-ordinate values <code>x</code> and <code>y</code> specify a two dimensional grid, which means I can use <code>geom_raster()</code> here to create my artwork:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(canvas, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> paint)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) </span></code></pre></div>
</div>
<p>To see what our Perlin art looks like, I‚Äôll build the plot in three different ways. First poorly with no customisation of the ggplot theme and scales, then a little nicer by removing unneeded details, then finally with a little flair:</p>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">art</span>
<span id="cb16-2">art <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span>
<span id="cb16-5">art <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb16-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>())</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/simple-perlin-art-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/simple-perlin-art-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/simple-perlin-art-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>Not bad. A little blurry looking, but it‚Äôs a nice place to start!</p>
<div id="exercise-first-ambient" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Try it yourself! In the materials there is a file called <code>first-ambient-art.R</code> that reproduces the code above. Try playing around with it to see what kind of output you can create by changing the values fed to <code>gen_perlin()</code>, or by trying other generator functions!</p>
</div>
</div>
</section>
<section id="our-first-system" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="our-first-system">Our first system</h2>
<p>The next step in the process is to start thinking about what aspects to the art should be variable, what aspects should be fixed, and use those insights to formalise this as a function. Some things that won‚Äôt change:</p>
<ul>
<li>The art will always be a square grid rendered with <code>geom_raster()</code></li>
<li>The spatial pattern will always come from one of the <code>ambient::gen_*()</code> functions</li>
<li>We‚Äôll always remove extraneous elements from the art using <code>theme_void()</code> etc</li>
</ul>
<p>These aspects to the art will be codified in the function body. There are some things that we might like to vary, however, and those will become arguments to the function:</p>
<ul>
<li>The colour <code>palette</code> could vary from piece to piece</li>
<li>The underlying <code>generator</code> might be different in each piece</li>
<li>The spatial <code>frequency</code> could be different in each piece</li>
<li>The number of <code>pixels</code> in the grid could vary</li>
<li>The random number generator <code>seed</code> could vary</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">make_noise_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb17-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> gen_perlin, </span>
<span id="cb17-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb17-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>,</span>
<span id="cb17-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb17-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e5ddc8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#01949a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004369"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#db1f48"</span>), </span>
<span id="cb17-7">    ...</span>
<span id="cb17-8">) {</span>
<span id="cb17-9">  </span>
<span id="cb17-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the grid</span></span>
<span id="cb17-11">  canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb17-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels),</span>
<span id="cb17-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels)</span>
<span id="cb17-14">  ) </span>
<span id="cb17-15">  </span>
<span id="cb17-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use the generator to add paint</span></span>
<span id="cb17-17">  canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb17-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generator</span>(</span>
<span id="cb17-20">        x, y, </span>
<span id="cb17-21">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency, </span>
<span id="cb17-22">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, </span>
<span id="cb17-23">        ...</span>
<span id="cb17-24">      )</span>
<span id="cb17-25">    )</span>
<span id="cb17-26">  </span>
<span id="cb17-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use ggplot2 to draw the picture</span></span>
<span id="cb17-28">  art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> paint)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette)</span>
<span id="cb17-36">  </span>
<span id="cb17-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(art)</span>
<span id="cb17-38">}</span></code></pre></div>
</div>
<p>Let‚Äôs take a lot the effect of each of these arguments. Varying <code>seed</code> changes the spatial pattern depicted in each piece, but it doesn‚Äôt change it in any systematic way:</p>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1001</span>)</span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9999</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-seed-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-seed-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-seed-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>In contrast, when I change the <code>frequency</code> argument I get systematic variation. The granularity of the spatial pattern changes in predictable ways as the frequency changes:</p>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-frequency-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-frequency-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-frequency-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>Here‚Äôs what happens when I vary <code>palette</code>. In the first example I‚Äôve created a greyscale image by specifying a palette that runs from <code>"white"</code> to <code>"black"</code>. The other two use palettes output by <code>sample_canva()</code>:</p>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>))</span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb20-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>))</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-palette-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-palette-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-palette-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>Finally, we can vary the <code>generator</code> function. It probably will come as no surprise to discover that varying the generator has some wild effects. The output of a checkerboard pattern generator is fundamentally different to the output of a Worley noise generator, which in turn is very distinct from Perlin noise. As you become more familiar with using <code>ambient</code> you‚Äôll start getting a sense of what each of these generators produce, and develop your own preferences for how to use them. For now, it‚Äôs enough to note that because the <code>gen_*()</code> functions all adopt (roughly) the same API, our <code>make_noise_art()</code> function works perfectly well when we swap out one for another:</p>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> gen_perlin)</span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> gen_worley)</span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> gen_waves) </span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-generator-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-generator-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/example-art-generator-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<div id="exercise-first-ambient" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercises
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>In the materials there is a file called <code>make-noise-art.R</code> that includes the <code>make_noise_art()</code> function. Unlike the code I‚Äôve shown here, the version in the script writes the output to a file (located at <code>output/noise-art.png</code>). Try playing around with the inputs to <code>make_noise_art()</code> to see what outputs you can create.</p></li>
<li><p>At the moment, the script is set up so that the output is always written to the same file, <code>output/noise-art.png</code>. When you create your own generative art systems you will want to ensure that each unique output is written to a file with a unique filename, and that this filename should (ideally!) allow you to work out what inputs were used to create the piece. How would you write code to do this?</p></li>
</ol>
</div>
</div>
</section>
<section id="why-dplyr-is-a-girls-best-friend" class="level2">
<h2 class="anchored" data-anchor-id="why-dplyr-is-a-girls-best-friend">Why dplyr is a girls best friend</h2>
<p>As you can see from the output we‚Äôve created so far, spatial noise patterns can be quite pretty even without any special artistic intervention. Our <code>make_noise_art()</code> function isn‚Äôt complicated: it takes the output from a generator function like <code>gen_perlin()</code> and plots it as a raster object. It doesn‚Äôt manipulate or modify that output in any way. However, there‚Äôs nothing preventing us from doing precisely that if that‚Äôs what we want to do. To simplify the later code, let‚Äôs create a <code>blank_canvas</code> object that we can reuse as the starting point for our later pieces:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">blank_canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb22-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>),</span>
<span id="cb22-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)</span>
<span id="cb22-4">) </span></code></pre></div>
</div>
<p>Now, let‚Äôs imagine that we‚Äôve used some <code>ambient</code> magic to add a column called <code>paint</code> to our canvas. Here‚Äôs a plotting function that we can use that plots this as a raster object, just like we‚Äôve been doing in the previous pieces (it optionally takes a <code>palette</code> too):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">plot_painted_canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(canvas, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb23-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(palette)) {</span>
<span id="cb23-3">    palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e5ddc8"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#01949a"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004369"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#db1f48"</span>)</span>
<span id="cb23-4">  }</span>
<span id="cb23-5">  canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> paint)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette)</span>
<span id="cb23-13">}</span></code></pre></div>
</div>
<p>Now that we have these in place, we can recreate one of our earlier pieces by wrting it as a <code>dplyr</code> pipeline:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">blank_canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_perlin</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_painted_canvas</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/dplyr-recreation-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>However, the mere fact that we can rewrite our art code like this opens up the possibility of using the <code>dplyr</code> data manipulation grammar in a more sophisticated way. Here‚Äôs an example that creates three different spatial patterns and then adds them together:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">blank_canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb25-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>),</span>
<span id="cb25-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>),</span>
<span id="cb25-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>),</span>
<span id="cb25-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> lf_noise <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mf_noise <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> hf_noise</span>
<span id="cb25-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_painted_canvas</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/dplyr-art-example-1-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Recall that our <code>plot_painted_canvas()</code> function uses the <code>x</code> and <code>y</code> columns to define the grid, and the <code>paint</code> column to define the to-be-plotted values. The <code>lf_noise</code>, <code>mf_noise</code>, and <code>hf_noise</code> columns are ignored. They‚Äôre intermediate steps, components that get mixed together when we define the <code>paint</code> column!</p>
<p>In the previous example I created the <code>paint</code> column by adding three columns together, but there is nothing preventing me from defining more elaborate mixing rules. In the example below, for example, I‚Äôve generated a fourth spatially-varying pattern and used as a ‚Äúgating‚Äù mechanism. So now what we have is a situation where the <code>lf_noise</code>, <code>mf_noise</code>, and <code>hf_noise</code> patterns are mixed together in a spatially inhomogeneous way that depends on the value of the <code>gate</code> column:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">blank_canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb26-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb26-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb26-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>),</span>
<span id="cb26-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gate =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_spheres</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(),</span>
<span id="cb26-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> lf_noise <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-8">      (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mf_noise) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (gate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> gate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-9">      (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> hf_noise) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (gate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>)</span>
<span id="cb26-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb26-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_painted_canvas</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/dplyr-art-example-2-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>The <code>normalise()</code> function in this code is supplied by the <code>ambient</code> package and in this context all I‚Äôm doing with it is ensuring that the output of the <code>gen_spheres()</code> generator is rescaled to lie between 0 and 1.</p>
<p>The same basic idea can be used to produce some quite striking pieces when we apply a fancier generator to construct the spatial <code>gate</code> pattern:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">blank_canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb27-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb27-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb27-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hf_noise =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>),</span>
<span id="cb27-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gate =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(),</span>
<span id="cb27-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> lf_noise <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-8">      (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mf_noise) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (gate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> gate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-9">      (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> hf_noise) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (gate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_painted_canvas</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/dplyr-art-example-3-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<div id="exercise-dplyr-ambient" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Try it yourself! In the materials there is a script called <code>dplyr-ambient.R</code> that defines <code>blank_canvas</code> and <code>plot_painted_canvas()</code> for you. At the bottom of the file there is space for you to add to the blank canvas. Try using dplyr and ambient together to create a spatial noise pattern of your own.</p>
</div>
</div>
</section>
<section id="fractals" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="fractals">Fractals</h2>
<p>You can also use the <code>ambient</code> package to create fractal patterns. The function that controls this is called <code>fracture()</code> and it‚Äôs easiest to demonstrate if we start with something simple. Suppose we have a ‚Äúgenerator‚Äù function <code>gen_sin()</code> that generates sinusoidal patterns with a particular frequency. The code for this function is very simple:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">gen_sin <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, frequency, ...) {</span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> frequency)</span>
<span id="cb28-3">}</span></code></pre></div>
</div>
<p>To create a fractal pattern based on this generator, we repeatedly apply this function to the input at different values of <code>frequency</code>. The outputs of repeated applications are combined together using a rule prescribed by a <code>fractal</code> function. This combination function doesn‚Äôt have to be very complicated: it might just be a linear combination! As an example, one of the fractal functions provided by <code>ambient</code> is <code>fbm()</code>, which stands for ‚Äúfractional Brownian motion‚Äù. When this is used as the combination rule, the results are added together with increasing frequencies and decreasing strength. The code for <code>fbm()</code> is this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">fbm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(base, new, strength, ...) {</span>
<span id="cb29-2">  base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> new <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> strength</span>
<span id="cb29-3">}</span></code></pre></div>
</div>
<p>A <code>base</code> pattern is added to a <code>new</code> pattern, weighted by some <code>strength</code>. That‚Äôs all it does!</p>
<p>If we wanted to create a fractal based on the <code>gen_sin()</code> generator, using <code>fbm()</code> as our fractal function, this is the code we would use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb30-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, </span>
<span id="cb30-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_sin, </span>
<span id="cb30-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, </span>
<span id="cb30-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb30-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  1.24983550  0.80892271 -0.26356816 -0.20012820 -0.97755603 -0.80161946
 [7]  1.08394804  1.11211005 -0.24443826 -0.04492181 -0.97817310 -1.04255993
[13]  1.07719639  0.86143412  0.21216704  0.24305786 -0.95445686 -1.32043009
[19]  0.56698796  1.00122663</code></pre>
</div>
</div>
<p>In this code, <code>octaves = 8</code> specifies the number of times to apply the generator and fractal function. In essence it is the number of iterations over which we run the algorithm. It‚Äôs easiest to see what this looks like if we gradually increase the number of iterations and plot the results:</p>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb32-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>), </span>
<span id="cb32-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_sin, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb32-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_sin, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb32-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y8 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_sin, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),</span>
<span id="cb32-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y20 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_sin, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb32-7">) </span>
<span id="cb32-8"></span>
<span id="cb32-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y1)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"One iteration"</span>)</span>
<span id="cb32-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y2)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Two iterations"</span>)</span>
<span id="cb32-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y8)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eight iterations"</span>)</span>
<span id="cb32-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y20)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Twenty iterations"</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fracture-api-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fracture-api-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fracture-api-3.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fracture-api-4.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>As the number of octaves increases the plots become more and more detailed. In this case we can‚Äôt visually discriminate between 8 and 20 octaves because the differences are too fine-grained to be visible. That‚Äôs quite typical because ‚Äì unless you modify the <code>gain</code> and <code>frequency</code> functions used by <code>fracture()</code> ‚Äì each successive iteration (or octave) will be calculated at double the frequency of the previous one (leading to finer-grained changes) and with half the strength (less weight is given to later octaves). You can modify this if you want to. For example:</p>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">custom_fracture <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb33-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(strength) {strength <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>},</span>
<span id="cb33-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(frequency) {frequency <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>},</span>
<span id="cb33-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_sin, </span>
<span id="cb33-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm,</span>
<span id="cb33-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb33-8">    ...</span>
<span id="cb33-9">  )</span>
<span id="cb33-10">}</span>
<span id="cb33-11"></span>
<span id="cb33-12">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb33-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>), </span>
<span id="cb33-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">custom_fracture</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb33-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">custom_fracture</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb33-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y8 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">custom_fracture</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),</span>
<span id="cb33-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y20 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">custom_fracture</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb33-18">) </span>
<span id="cb33-19"></span>
<span id="cb33-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y1)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"One iteration"</span>)</span>
<span id="cb33-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y2)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Two iterations"</span>)</span>
<span id="cb33-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y8)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eight iterations"</span>)</span>
<span id="cb33-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y20)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Twenty iterations"</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/custom-fracture-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/custom-fracture-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/custom-fracture-3.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 25.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/custom-fracture-4.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>Hopefully you get the basic idea.</p>
<p>In any case, let‚Äôs take this same concept and start using it in conjunction with the spatial noise generators supplied by <code>ambient</code>. To keep things simple and avoid the need to write plotting code over and over, let‚Äôs define a <code>fractal_art()</code> function like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">fractal_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(fractal, generator, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb34-2">  blank_canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb34-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb34-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> generator,</span>
<span id="cb34-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fractal,</span>
<span id="cb34-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb34-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb34-9">        ...</span>
<span id="cb34-10">      )</span>
<span id="cb34-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_painted_canvas</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> palette)</span>
<span id="cb34-13">}</span></code></pre></div>
</div>
<p>Here‚Äôs what happens when we use <code>gen_checkerboard()</code> as our spatial pattern generator, and <code>fbm()</code> as our fractal function:</p>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(fbm, gen_checkerboard, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(fbm, gen_checkerboard, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(fbm, gen_checkerboard, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-checker-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-checker-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-checker-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>It has the same ‚Äúfeel‚Äù as the sinusoidal fractals we were working with earlier: as we increase the number of octaves the output contains more copies of the ‚Äúchecker board‚Äù pattern, each one depicted on a smaller scale than the last one. The same idea applies to the <code>gen_waves()</code> generator:</p>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(fbm, gen_waves, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb36-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(fbm, gen_waves, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(fbm, gen_waves, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-spheres-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-spheres-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-spheres-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>By the time we reach 20 octaves, the image has a quite intricate pattern of concentric rings. It‚Äôs quite pretty, but <code>gen_checkerboard()</code> and <code>gen_waves()</code> are both very simple generator functions. What happens when our generator is a more elaborate multidimensional noise generator like <code>gen_simplex()</code>? Simplex noise looks like this before we apply any fractal function to it:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">blank_canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_painted_canvas</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/base-simplex-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Here‚Äôs what happens when we combine <code>gen_simplex()</code> with the <code>fbm()</code> fractal function:</p>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(fbm, gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(fbm, gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb38-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(fbm, gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-octaves-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-octaves-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-octaves-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>The result, once we reach 20 octaves, is quite intricate.</p>
<p>Changing the fractal function has a substantial effect on the output. So far all the fractals I‚Äôve created have used <code>fbm()</code> as the fractal function, but there‚Äôs nothing stopping you from writing your own or using one of the other functions supplied by <code>ambient</code>. For example, the <code>ridged()</code> fractal function produces some very lovely patterns:</p>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(ridged, gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb39-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(ridged, gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb39-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(ridged, gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-ridged-octaves-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-ridged-octaves-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-ridged-octaves-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>It‚Äôs also possible to get nice effects by modifying the <code>gain</code> and <code>frequency</code> functions. For example, here‚Äôs an example where the strength of each successive iteration of <code>ridged()</code> noise diminishes to 80% of of the strength of the previous iteration:</p>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">gf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(ridged, gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> gf)</span>
<span id="cb40-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(ridged, gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> gf)</span>
<span id="cb40-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(ridged, gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> gf)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-ridged-gain-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-ridged-gain-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-ridged-gain-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>Worley noise is an interesting case. The behaviour of <code>gen_worley()</code> is to carve the image up in to distinct cells, and colour each pixel in the image based on the cells they belong to. It‚Äôs closely related to Voronoi tesselation, a technique I‚Äôll talk about in a later session. In the simplest case, all pixels in a particular cell are assigned the same colour. So a very basic Worley noise pattern might look like this:</p>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">blank_canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_worley</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_painted_canvas</span>()</span></code></pre></div>
<div class="cell quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/base-worley-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>When we create fractals using this kind of generator, there‚Äôs a tendency to end up with ‚Äúkaleidoscopic‚Äù looking patterns. Here‚Äôs an example using the <code>billow()</code> fractal function:</p>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_worley, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb42-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_worley, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb42-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_worley, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-worley-octaves-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-worley-octaves-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-worley-octaves-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>However, <code>gen_worley()</code> allows also allows you to colour the pixels in different ways. For example, if I set <code>value = "distance"</code>, each pixel will be coloured as a function of how distant it is from the centroid of the cell it belongs to. A basic pattern looks like this:</p>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">blank_canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_worley</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_painted_canvas</span>()</span></code></pre></div>
<div class="cell quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/base-worley-distance-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Fractals created using this method look like this:</p>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_worley, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>)</span>
<span id="cb44-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_worley, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>)</span>
<span id="cb44-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_worley, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-worley-distance-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-worley-distance-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-worley-distance-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>There‚Äôs nothing stopping you from writing your own generator function either. At the start of this section that‚Äôs exactly what I did in one dimension with <code>gen_sin()</code>. As a two dimensional example, let‚Äôs suppose I wanted to create a variation of Worley noise that mixes both the <code>"cell"</code> colouring and the <code>"distance"</code> colouring. Here‚Äôs a generator function that does precisely that:</p>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">gen_scope <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, ...) {</span>
<span id="cb45-2">  worley_cell <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_worley</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cell"</span>, ...)</span>
<span id="cb45-3">  worley_dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_worley</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>, ...)</span>
<span id="cb45-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(worley_cell) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(worley_dist))</span>
<span id="cb45-5">}</span>
<span id="cb45-6"></span>
<span id="cb45-7">pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb45-8"></span>
<span id="cb45-9">blank_canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb45-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_scope</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb45-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_painted_canvas</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> pal)</span></code></pre></div>
<div class="cell quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 100.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/base-worley-mixed-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>I can now use my <code>gen_scope()</code> function as the generator for my fractal:</p>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_scope, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> pal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_scope, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> pal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb46-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_scope, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> pal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-scope-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-scope-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-scope-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>I can make the generator as elaborate as I like. The <code>gen_gate()</code> function below uses a ‚Äúgating‚Äù mechanism just like the example I used earlier:</p>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">gen_gate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, frequency, ...) {</span>
<span id="cb47-2">  lf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency, ...)</span>
<span id="cb47-3">  mf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, ...)</span>
<span id="cb47-4">  hf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, ...)</span>
<span id="cb47-5">  gate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, ...) </span>
<span id="cb47-6">  gate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(gate)</span>
<span id="cb47-7">  paint <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lf <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-8">    (mf <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (gate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> gate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-9">    (hf <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (gate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(paint)</span>
<span id="cb47-11">}</span>
<span id="cb47-12"></span>
<span id="cb47-13">pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb47-14"></span>
<span id="cb47-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_gate, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> pal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_gate, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> pal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb47-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fractal_art</span>(billow, gen_gate, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> pal, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-gated-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-gated-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/fractal-art-gated-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<div id="exercise-fractal-art" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercises
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>fractal_art.R</code> script in the materials contains all the setup you need to play around with the <code>fractal_art()</code> function. Try using it to explore the possibilities! There are a lot of possibilities in fractals. Here are a few ideas to get you started:</p>
<ol type="1">
<li><p>The easiest way to play around with fractals is to modify the basic arguments. Try changing the <code>generator</code>, <code>fractal</code>, <code>freq_init</code> (i.e., frequency value for the first octave), <code>octaves</code>, <code>seed</code>, and <code>palette</code> to make a piece you really like.</p></li>
<li><p>A fun inversion: use those same arguments to create something that you find incredibly ugly!</p></li>
<li><p>The <code>fractal_art()</code> function is written flexibly enough that you can pass your own gain functions and frequency functions. There‚Äôs an example of this above. Try writing your own functions to modify the <code>gain</code> and <code>frequency</code> rules that apply to the fractal.</p></li>
<li><p>Using the <code>gen_scope()</code> and <code>gen_gate()</code> examples to motivate you, write your own generator function. See what effect that has.</p></li>
</ol>
</div>
</div>
</section>
<section id="curl-of-a-spatial-noise-pattern" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="curl-of-a-spatial-noise-pattern">Curl (of a spatial) noise (pattern)</h2>
<p>The last topic to talk about in regards to the <code>ambient</code> package is curl noise. The concept comes from vector calculus, I‚Äôm afraid, but fortunately for us we don‚Äôt actually need to care. To quote from Wikipedia, the <a href="https://en.wikipedia.org/wiki/Curl_(mathematics)">curl</a> is</p>
<blockquote class="blockquote">
<p>a vector operator that describes the infinitesimal circulation of a vector field in three-dimensional Euclidean space. The curl at a point in the field is represented by a vector whose length and direction denote the magnitude and axis of the maximum circulation. The curl of a field is formally defined as the circulation density at each point of the field.</p>
</blockquote>
<p>Exciting stuff. But what does it <em>mean</em>? Well, let‚Äôs suppose I have a vector field and‚Ä¶</p>
<p>‚Ä¶ wait, what?</p>
<p>Okay, let‚Äôs take a step back. Suppose I have a very small grid of points:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">smol_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb48-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(smol_grid) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/smol-grid-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Now let‚Äôs compute the value of the simplex noise pattern at each of these points using <code>gen_simplex()</code>, and represent that as the size of the plot marker (because I can‚Äôt resist the urge to make something pretty), or more conventionally as a contour plot illustrating the ‚Äúheight‚Äù of the pattern at each point:</p>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">smol_simplex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> smol_grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) </span>
<span id="cb49-3"></span>
<span id="cb49-4">smol_simplex <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> z)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span>
<span id="cb49-9">smol_simplex <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> z)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_contour_filled</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/smol-simplex-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/smol-simplex-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Now imagine placing a ball at a point on this surface. Unless it‚Äôs at a completely flat spot, it will start rolling in a particular direction and at a particular speed. We can work out where it will start rolling by computing the slope of surface at each point. To do this, we‚Äôll use a finite differencing approximation to calculate the partial derivatives. Or, to put it in less fancy terms, we‚Äôll add a small diffrenece <code>eps</code> to the x-coordinate and compute the value of the simplex noise at the modified values. That gives us the slope in the x-direction. We do the same thing for the y-direction. Putting these two vectors together gives us the local slope.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">eps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span></span>
<span id="cb50-2">smol_curl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> smol_grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb50-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_add =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb50-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_sub =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb50-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_add =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb50-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_sub =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_simplex</span>(x, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb50-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_slope =</span> (x_add <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_sub) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> eps), </span>
<span id="cb50-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_slope =</span> (y_add <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_sub) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> eps),</span>
<span id="cb50-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_curl =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y_slope, </span>
<span id="cb50-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y_curl =</span> x_slope</span>
<span id="cb50-11">)</span></code></pre></div>
</div>
<p>If I wanted to plot how fast the simplex noise field was changing at each point on this grid, I‚Äôd just plot the <code>x_slope</code> and <code>y_slope</code> values. That would give me something like this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(smol_curl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb51-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb51-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb51-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb51-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_slope <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb51-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_slope <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb51-8">    ), </span>
<span id="cb51-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrow</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>))</span>
<span id="cb51-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb51-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb51-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/smol-slope-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>This map of arrows (a.k.a. vector field) depicts the slope at each point on the simplex noise surface. It‚Äôs a measure of how fast a ball would start rolling if you placed it down at a particular spot.</p>
<p>Let‚Äôs tweak the analogy slightly. Instead of a ball on a hill, imagine the arrows depict a current pushing a rough-edged disc around in a pool of water. When we place the disc in the water it will start moving because the current pushes it around, but because it‚Äôs rough-edged the friction of water flowing over it will make it start rotating. The <em>curl</em> of a field describes these rotational forces. In the same way that our simplex noise pattern implies a vector field of slope values, it also implies a vector field of curl values. For reasons that I‚Äôm sure a physicist can explain to me ‚Äì that I‚Äôm certain will have something to do with a conservation law of some kind ‚Äì <code>x_curl = -y_slope</code> and <code>y_curl = x_slope</code>.</p>
<p>Whatever.</p>
<p>Anyway.</p>
<p>Now we have the curl of our simplex noise and we know vaguely what it means. More importantly, we can draw a pretty picture of the curl field:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(smol_curl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb52-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb52-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb52-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb52-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_curl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb52-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_curl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb52-8">    ), </span>
<span id="cb52-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrow</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>))</span>
<span id="cb52-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb52-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb52-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/smol-curl-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>As it turns out I actually didn‚Äôt need to bother with computing this manually, because <code>ambient</code> supplies a <code>curl_noise()</code> function that does the exact same computations for us. I pass it the <code>x</code> and <code>y</code> coordinates from my <code>smol_grid</code>, specify that the <code>generator</code> function is <code>gen_simplex()</code>, and pass the parameters of the noise function (e.g., its <code>seed</code> and <code>frequency</code>) as additional arguments:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">curl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb53-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> gen_simplex,</span>
<span id="cb53-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb53-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb53-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> smol_grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, </span>
<span id="cb53-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> smol_grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb53-7">)</span>
<span id="cb53-8"></span>
<span id="cb53-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(curl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 400 √ó 2
         x        y
     &lt;dbl&gt;    &lt;dbl&gt;
 1  0.312   0.0597 
 2  0.124   0.0560 
 3 -0.0121  0.00537
 4 -0.0647 -0.0316 
 5 -0.0808 -0.0412 
 6 -0.121  -0.0349 
 7 -0.216  -0.0351 
 8 -0.214  -0.0817 
 9 -0.0387 -0.196  
10  0.138  -0.311  
# ‚Ñπ 390 more rows</code></pre>
</div>
</div>
<p>This <code>curl</code> data frame contains <code>x</code> and <code>y</code> columns that specify the curl values at each point in the input. So now I can plot these curl values in the same ‚Äúmap of arrows‚Äù style, and unsurprisingly I obtain the same result as last time:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">smol_grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb55-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb55-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x2 =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb55-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y2 =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb55-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb55-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb55-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb55-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y2),</span>
<span id="cb55-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrow</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>))</span>
<span id="cb55-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb55-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb55-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/smol-curl2-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Generative artists have a particular fondness for computing the curl of a noise field and using it for nefarious purposes. There are technical reasons for that, no doubt, but I‚Äôm lazy and I feel like I‚Äôve spent too much of my life thinking about this already. So let‚Äôs skip the reasons this time and just start doing it. To make my life a little easier I‚Äôll write an <code>update_curl()</code> function that takes a <code>current_state</code> data frame as input (which we assume contains variables <code>x</code> and <code>y</code> that define a grid), computes the curl at all points in this grid, and then returns a new set of <code>x</code> and <code>y</code> values that ‚Äúadd a little bit of curl‚Äù to those <code>x</code> and <code>y</code> values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">update_curl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(current_state, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">step_size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0005</span>, ...) {</span>
<span id="cb56-2">  curl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb56-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, </span>
<span id="cb56-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb56-5">    ...</span>
<span id="cb56-6">  )</span>
<span id="cb56-7">  next_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> current_state <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb56-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> step_size,</span>
<span id="cb56-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> step_size,</span>
<span id="cb56-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb56-12">    )</span>
<span id="cb56-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(next_state)</span>
<span id="cb56-14">}</span></code></pre></div>
</div>
<p>Next, let‚Äôs define an initial state. At ‚Äútime‚Äù point 1 we have a set of co-ordinates laid out on a grid:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb57-2">time_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> coords, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> coords) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb57-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb57-4">time_1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2,500 √ó 4
       x      y    id  time
   &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;
 1     0 0          1     1
 2     0 0.0204     2     1
 3     0 0.0408     3     1
 4     0 0.0612     4     1
 5     0 0.0816     5     1
 6     0 0.102      6     1
 7     0 0.122      7     1
 8     0 0.143      8     1
 9     0 0.163      9     1
10     0 0.184     10     1
# ‚Ñπ 2,490 more rows</code></pre>
</div>
</div>
<p>Now we can use our <code>update_curl()</code> function to compute a new set of <code>x</code> and <code>y</code> values. We can do this multiple times if we like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">time_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> time_1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb59-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update_curl</span>(</span>
<span id="cb59-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> gen_simplex,</span>
<span id="cb59-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb59-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span></span>
<span id="cb59-6">  )</span>
<span id="cb59-7"></span>
<span id="cb59-8">time_3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> time_2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb59-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update_curl</span>(</span>
<span id="cb59-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> gen_simplex,</span>
<span id="cb59-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb59-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span></span>
<span id="cb59-13">  )</span>
<span id="cb59-14"></span>
<span id="cb59-15">time_3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2,500 √ó 4
          x      y    id  time
      &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;
 1 -0.0264  0.0309     1     3
 2  0.0226  0.0502     2     3
 3  0.0417  0.0712     3     3
 4  0.00234 0.0843     4     3
 5 -0.0372  0.0573     5     3
 6 -0.0253  0.0786     6     3
 7 -0.0154  0.117      7     3
 8 -0.00378 0.136      8     3
 9  0.00913 0.159      9     3
10 -0.0199  0.201     10     3
# ‚Ñπ 2,490 more rows</code></pre>
</div>
</div>
<p>At this point it‚Äôs important to notice something of particular relevance to generative art. Are there any physicists near you as you read this? Can you hear them sighing?</p>
<p>Good.</p>
<p>From a physics perspective I‚Äôve done something quite peculiar in this code. I‚Äôve updated the ‚Äúposition‚Äù of a set of points (or particles) by adding their <em>rotation</em> (i.e.&nbsp;curl) to their current ‚Äúposition‚Äù. I‚Äôm not really simulating real movement in physical space I‚Äôm plotting changes in rotational forces. Curl fields don‚Äôt plot real world movement, they‚Äôre an abstraction.</p>
<p>Which is fine. From an artistic point of view we care mostly about the fact that we can use this tool to make pretty things. So let‚Äôs visualise these ‚Äúcurl updates‚Äù:</p>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">dat12 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(time_1, time_2)</span>
<span id="cb61-2">dat123 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(time_1, time_2, time_3)</span>
<span id="cb61-3"></span>
<span id="cb61-4">dat12 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb61-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb61-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb61-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb61-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() </span>
<span id="cb61-9">dat123 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb61-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb61-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb61-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb61-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() </span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/simple-curl-noise-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/simple-curl-noise-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>This seems promising, right?</p>
</section>
<section id="curl-of-a-fractal-pattern" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="curl-of-a-fractal-pattern">Curl of a fractal pattern</h2>
<p>One nice thing about <code>curl_noise()</code> is that it can be applied to any generator, including <code>fracture()</code>. Here‚Äôs the basic idea:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">curl_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb62-2">    data, </span>
<span id="cb62-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb62-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">step_size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>,</span>
<span id="cb62-5">    ...</span>
<span id="cb62-6">) {</span>
<span id="cb62-7">  </span>
<span id="cb62-8">  update <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(current_state, iteration, ...) {</span>
<span id="cb62-9">    curl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb62-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, </span>
<span id="cb62-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb62-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> fracture,</span>
<span id="cb62-13">      ...</span>
<span id="cb62-14">    )</span>
<span id="cb62-15">    next_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> current_state <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb62-17">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> step_size,</span>
<span id="cb62-18">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> step_size,</span>
<span id="cb62-19">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb62-20">      )</span>
<span id="cb62-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(next_state)</span>
<span id="cb62-22">  }</span>
<span id="cb62-23">  </span>
<span id="cb62-24">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb62-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations, update, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> _, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>()</span>
<span id="cb62-28">}</span>
<span id="cb62-29"></span>
<span id="cb62-30">curl_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(...) {</span>
<span id="cb62-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_data</span>(...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb62-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb62-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb62-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb62-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() </span>
<span id="cb62-36">}</span></code></pre></div>
</div>
<p>A grid of small fractal walks:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">smol_grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/curl-art-examples-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="3000"></p>
</figure>
</div>
</div>
</div>
<p>An example where the initial points all lie on a circle:</p>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb64-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb64-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theta =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n, </span>
<span id="cb64-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(theta),</span>
<span id="cb64-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(theta)</span>
<span id="cb64-6">  )</span>
<span id="cb64-7">}</span>
<span id="cb64-8"></span>
<span id="cb64-9">curl_circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(octaves) {</span>
<span id="cb64-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_art</span>(</span>
<span id="cb64-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>),</span>
<span id="cb64-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb64-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex,</span>
<span id="cb64-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm,</span>
<span id="cb64-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves, </span>
<span id="cb64-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb64-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb64-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>,</span>
<span id="cb64-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb64-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb64-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">step_size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">003</span></span>
<span id="cb64-22">  )</span>
<span id="cb64-23">}</span>
<span id="cb64-24"></span>
<span id="cb64-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb64-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb64-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-nrow="1">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/curl-art-octaves-1.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/curl-art-octaves-2.png" class="img-fluid" width="1800"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/curl-art-octaves-3.png" class="img-fluid" width="1800"></p>
</div>
</div>
</div>
<p>A related example using polygons, heavily influenced by Thomas Lin Pedersen‚Äôs ‚Äúgenesis‚Äù system:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">custom_curl_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb65-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_data</span>(</span>
<span id="cb65-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data,</span>
<span id="cb65-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, </span>
<span id="cb65-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb65-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ridged,</span>
<span id="cb65-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_cubic,</span>
<span id="cb65-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb65-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>,</span>
<span id="cb65-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb65-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb65-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb65-13">  )</span>
<span id="cb65-14">}</span>
<span id="cb65-15"></span>
<span id="cb65-16">dat1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb65-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">custom_curl_data</span>()</span>
<span id="cb65-18"></span>
<span id="cb65-19">dat2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb65-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb65-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">custom_curl_data</span>()</span>
<span id="cb65-22"></span>
<span id="cb65-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> time)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb65-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb65-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">02</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb65-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb65-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/index_files/figure-html/curl-art-examples-2-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="3000"></p>
</figure>
</div>
</div>
</div>
<div id="exercise-curl-art" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercises
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>curl-art-1.R</code> and <code>curl-art-2.R</code> scripts contain code to generate the ‚Äúsmall grid of fractal walks‚Äù image and the ‚Äúgenesis-inspired‚Äù image. In both cases the ouput is written to a 2000x2000 pixel png file, and the time taken to complete the task printed to the screen.</p>
<ol type="1">
<li><p>Run both scripts, and compare the difference in rendering times.</p></li>
<li><p>Modify the ‚Äúsmall grid‚Äù version so that it produces smoother looking results.</p></li>
<li><p>Explore what you can do with the ‚Äúgenesis style‚Äù. It‚Äôs a powerful technique that can do a lot more than I‚Äôve done in this code. By now you should have a good sense of what dials you can turn: the fractal, the generator, the parameters, the palette, etc. You can use dplyr to modify the data if you want to. Try to make something you really like!</p></li>
</ol>
</div>
</div>
</section>
<section id="materials" class="level2">
<h2 class="anchored" data-anchor-id="materials">Materials</h2>
<p>Code for each of the source files referred to in this section of the workshop is included here. Click on the callout box below to see the code for the file you want to look at. Please keep in mind that (unlike the code in the main text) I haven‚Äôt modified these scripts since the original workshop, so you might need to play around with them to get them to work!</p>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="curl-art-1.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
curl-art-1.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb66-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb66-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb66-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb66-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb66-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb66-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb66-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb66-9"></span>
<span id="cb66-10">curl_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb66-11">    data, </span>
<span id="cb66-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb66-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">step_size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>,</span>
<span id="cb66-14">    ...</span>
<span id="cb66-15">) {</span>
<span id="cb66-16">  </span>
<span id="cb66-17">  update <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(current_state, iteration, ...) {</span>
<span id="cb66-18">    curl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb66-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, </span>
<span id="cb66-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb66-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> fracture,</span>
<span id="cb66-22">      ...</span>
<span id="cb66-23">    )</span>
<span id="cb66-24">    next_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> current_state <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb66-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> step_size,</span>
<span id="cb66-27">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> step_size,</span>
<span id="cb66-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb66-29">      )</span>
<span id="cb66-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(next_state)</span>
<span id="cb66-31">  }</span>
<span id="cb66-32">  </span>
<span id="cb66-33">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb66-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations, update, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> _, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>()</span>
<span id="cb66-37">}</span>
<span id="cb66-38"></span>
<span id="cb66-39">curl_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(...) {</span>
<span id="cb66-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_data</span>(...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb66-41">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb66-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb66-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb66-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() </span>
<span id="cb66-45">}</span>
<span id="cb66-46"></span>
<span id="cb66-47">smol_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb66-48"></span>
<span id="cb66-49">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> smol_grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-50">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>(y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb66-51">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_simplex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fbm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb66-52"></span>
<span id="cb66-53"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb66-54"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(</span>
<span id="cb66-55">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"curl-art-1.png"</span>), </span>
<span id="cb66-56">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> pic,</span>
<span id="cb66-57">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb66-58">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb66-59">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"px"</span>,</span>
<span id="cb66-60">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>,</span>
<span id="cb66-61">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span></span>
<span id="cb66-62">)</span>
<span id="cb66-63"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="curl-art-2.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
curl-art-2.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb67-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb67-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb67-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb67-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb67-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb67-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb67-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span>
<span id="cb67-9"></span>
<span id="cb67-10">curl_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb67-11">    data, </span>
<span id="cb67-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb67-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">step_size =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>,</span>
<span id="cb67-14">    ...</span>
<span id="cb67-15">) {</span>
<span id="cb67-16">  </span>
<span id="cb67-17">  update <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(current_state, iteration, ...) {</span>
<span id="cb67-18">    curl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb67-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, </span>
<span id="cb67-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> current_state<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb67-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> fracture,</span>
<span id="cb67-22">      ...</span>
<span id="cb67-23">    )</span>
<span id="cb67-24">    next_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> current_state <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb67-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb67-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> step_size,</span>
<span id="cb67-27">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> step_size,</span>
<span id="cb67-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb67-29">      )</span>
<span id="cb67-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(next_state)</span>
<span id="cb67-31">  }</span>
<span id="cb67-32">  </span>
<span id="cb67-33">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb67-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb67-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations, update, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> _, ...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb67-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>()</span>
<span id="cb67-37">}</span>
<span id="cb67-38"></span>
<span id="cb67-39">curl_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(...) {</span>
<span id="cb67-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_data</span>(...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb67-41">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb67-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb67-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() </span>
<span id="cb67-45">}</span>
<span id="cb67-46"></span>
<span id="cb67-47">custom_curl_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb67-48">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_data</span>(</span>
<span id="cb67-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data,</span>
<span id="cb67-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, </span>
<span id="cb67-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb67-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ridged,</span>
<span id="cb67-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> gen_cubic,</span>
<span id="cb67-54">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">freq_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb67-55">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>,</span>
<span id="cb67-56">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb67-57">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb67-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb67-59">  )</span>
<span id="cb67-60">}</span>
<span id="cb67-61"></span>
<span id="cb67-62">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb67-63">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb67-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theta =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n, </span>
<span id="cb67-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(theta),</span>
<span id="cb67-66">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(theta)</span>
<span id="cb67-67">  )</span>
<span id="cb67-68">}</span>
<span id="cb67-69"></span>
<span id="cb67-70">dat1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb67-71">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">custom_curl_data</span>()</span>
<span id="cb67-72"></span>
<span id="cb67-73">dat2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb67-74">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb67-75">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">custom_curl_data</span>()</span>
<span id="cb67-76"></span>
<span id="cb67-77">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> time)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-78">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff10"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-79">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#22222205"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-80">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb67-81">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>()</span>
<span id="cb67-82"></span>
<span id="cb67-83"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb67-84"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(</span>
<span id="cb67-85">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"curl-art-2.png"</span>), </span>
<span id="cb67-86">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> pic,</span>
<span id="cb67-87">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb67-88">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb67-89">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"px"</span>,</span>
<span id="cb67-90">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>,</span>
<span id="cb67-91">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span></span>
<span id="cb67-92">)</span>
<span id="cb67-93"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="dplyr-ambient.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
dplyr-ambient.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb68-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb68-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb68-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb68-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb68-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb68-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb68-8"></span>
<span id="cb68-9">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb68-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb68-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb68-12">}</span>
<span id="cb68-13"></span>
<span id="cb68-14">blank_canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb68-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>),</span>
<span id="cb68-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)</span>
<span id="cb68-17">) </span>
<span id="cb68-18"></span>
<span id="cb68-19">plot_painted_canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(canvas, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb68-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(palette)) {</span>
<span id="cb68-21">    palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e5ddc8"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#01949a"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004369"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#db1f48"</span>)</span>
<span id="cb68-22">  }</span>
<span id="cb68-23">  canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb68-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> paint)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb68-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb68-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb68-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb68-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb68-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb68-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette)</span>
<span id="cb68-31">}</span>
<span id="cb68-32"></span>
<span id="cb68-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code here! add to the blank canvas :)</span></span>
<span id="cb68-34">blank_canvas</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="first-ambient-art.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
first-ambient-art.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb69-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb69-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb69-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb69-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb69-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb69-7"></span>
<span id="cb69-8">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb69-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb69-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb69-11">}</span>
<span id="cb69-12"></span>
<span id="cb69-13">x_coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb69-14">y_coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb69-15">canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x_coords, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y_coords) </span>
<span id="cb69-16"></span>
<span id="cb69-17">freq_spatial <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb69-18">seed_spatial <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb69-19">seed_palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span></span>
<span id="cb69-20"></span>
<span id="cb69-21">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb69-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb69-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_perlin</span>(</span>
<span id="cb69-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb69-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb69-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> freq_spatial, </span>
<span id="cb69-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed_spatial</span>
<span id="cb69-28">    )</span>
<span id="cb69-29">  )</span>
<span id="cb69-30">  </span>
<span id="cb69-31">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb69-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> paint)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb69-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb69-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-36">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb69-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(</span>
<span id="cb69-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(seed_palette)</span>
<span id="cb69-40">  )</span>
<span id="cb69-41"></span>
<span id="cb69-42"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(pic)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="fractal-art.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
fractal-art.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb70-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb70-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb70-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb70-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb70-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb70-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb70-8"></span>
<span id="cb70-9">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb70-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb70-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb70-12">}</span>
<span id="cb70-13"></span>
<span id="cb70-14">blank_canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb70-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>),</span>
<span id="cb70-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)</span>
<span id="cb70-17">) </span>
<span id="cb70-18"></span>
<span id="cb70-19">plot_painted_canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(canvas, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb70-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(palette)) {</span>
<span id="cb70-21">    palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e5ddc8"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#01949a"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004369"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#db1f48"</span>)</span>
<span id="cb70-22">  }</span>
<span id="cb70-23">  canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb70-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> paint)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb70-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb70-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette)</span>
<span id="cb70-31">}</span>
<span id="cb70-32"></span>
<span id="cb70-33">fractal_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(fractal, generator, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb70-34">  blank_canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb70-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb70-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb70-37">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> generator,</span>
<span id="cb70-38">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> fractal,</span>
<span id="cb70-39">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb70-40">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb70-41">        ...</span>
<span id="cb70-42">      )</span>
<span id="cb70-43">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb70-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_painted_canvas</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> palette)</span>
<span id="cb70-45">}</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="make-noise-art.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
make-noise-art.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb71-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb71-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb71-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb71-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb71-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ambient)</span>
<span id="cb71-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(here)</span>
<span id="cb71-8"></span>
<span id="cb71-9">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb71-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb71-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb71-12">}</span>
<span id="cb71-13"></span>
<span id="cb71-14">make_noise_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb71-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> gen_perlin, </span>
<span id="cb71-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb71-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>,</span>
<span id="cb71-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>,</span>
<span id="cb71-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e5ddc8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#01949a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004369"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#db1f48"</span>), </span>
<span id="cb71-20">    ...</span>
<span id="cb71-21">) {</span>
<span id="cb71-22">  </span>
<span id="cb71-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the grid</span></span>
<span id="cb71-24">  canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_grid</span>(</span>
<span id="cb71-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels),</span>
<span id="cb71-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> pixels)</span>
<span id="cb71-27">  ) </span>
<span id="cb71-28">  </span>
<span id="cb71-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use the generator to add paint</span></span>
<span id="cb71-30">  canvas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb71-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb71-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">paint =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generator</span>(</span>
<span id="cb71-33">        x, y, </span>
<span id="cb71-34">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency, </span>
<span id="cb71-35">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, </span>
<span id="cb71-36">        ...</span>
<span id="cb71-37">      )</span>
<span id="cb71-38">    )</span>
<span id="cb71-39">  </span>
<span id="cb71-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use ggplot2 to draw the picture</span></span>
<span id="cb71-41">  art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> canvas <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb71-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> paint)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb71-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb71-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb71-45">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb71-46">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb71-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb71-48">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette)</span>
<span id="cb71-49">  </span>
<span id="cb71-50">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(art)</span>
<span id="cb71-51">}</span>
<span id="cb71-52"></span>
<span id="cb71-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># call make_noise_art with idiosyncratic parameters</span></span>
<span id="cb71-54">art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_noise_art</span>(</span>
<span id="cb71-55">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> gen_worley,</span>
<span id="cb71-56">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb71-57">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>),</span>
<span id="cb71-58">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance"</span>,</span>
<span id="cb71-59">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pixels =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb71-60">)</span>
<span id="cb71-61"></span>
<span id="cb71-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save the plot to file with a generic file name</span></span>
<span id="cb71-63"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(</span>
<span id="cb71-64">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">here</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"noise-art.png"</span>), </span>
<span id="cb71-65">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> art,</span>
<span id="cb71-66">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb71-67">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb71-68">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"px"</span>,</span>
<span id="cb71-69">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb71-70">)</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Art from Code {II.} {Spatial} Tricks with Ambient},
  date = {2024-12-19},
  url = {https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>‚ÄúArt from Code II. Spatial Tricks with
Ambient.‚Äù</span> December 19, 2024. <a href="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/">https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/</guid>
  <pubDate>Wed, 18 Dec 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-12-19_art-from-code-2/ridged.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Art from code I: Generative art with R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><em>A couple of years ago I gave an invited workshop called <a href="https://art-from-code.netlify.app">art from code</a> at the 2022 rstudio::conf (now posit::conf) conference. As part of the workshop I wrote a lengthy series of notes on how to make generative art using R, all of which were released under a CC-BY licence. For a while now I‚Äôd been thinking I should do something with these notes. I considered writing a book, but in all honesty I don‚Äôt have the spare capacity for a side-project of that scale these days. I can barely keep up with the workload at my day job as it is. So instead, I‚Äôve decided that I‚Äôd port them over to this site as a series of blog posts. In doing so I‚Äôve made a deliberate decision not to modify the original content too much (nobody loves it when an artist tries to ‚Äúimprove‚Äù the original, after all). All I‚Äôve done is update the code to accommodate package changes since 2022, and some minor edits so that the images are legible when embedded in this blog (which is light-themed, and the original was dark-theme). Other than that, I‚Äôve left it alone. This is the first post in that series.</em></p>
<ul>
<li><a href="../../posts/2024-12-18_art-from-code-1/">Prelude</a></li>
<li><a href="../../posts/2024-12-19_art-from-code-2/">Spatial tricks with ambient</a></li>
<li><a href="../../posts/2024-12-20_art-from-code-3/">Polygon tricks</a></li>
<li><a href="../../posts/2024-12-21_art-from-code-4/">Shading tricks</a></li>
<li><a href="../../posts/2024-12-22_art-from-code-5/">Iterated function systems</a></li>
<li><a href="../../posts/2024-12-23_art-from-code-6/">Tiles and tessellations</a></li>
<li><a href="../../posts/2024-12-24_art-from-code-7/">Pixel filters</a></li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Once upon a time I was a professor.</p>
<p>It‚Äôs a dull story, and I won‚Äôt bore you with the details, but I mention it because at the start of almost every class I taught I‚Äôd have to go being by explaining the terminology. Want to teach a class on human learning? You better start out by saying what you think ‚Äúlearning‚Äù means. Want to teach people about computational models of cognition? The students would like you to start by giving a working definition of ‚Äúcomputation‚Äù, ‚Äúmodel‚Äù and ‚Äúcognition‚Äù. It doesn‚Äôt really matter if the definitions aren‚Äôt <em>good</em> definitions (spoiler: they‚Äôre always terrible), but it helps people to start out from something that looks vaguely like stable ground to stand on.</p>
<p>So. If this is going to be a workshop on generative art in R, I should say something about what I mean by ‚ÄúR‚Äù, ‚Äúart‚Äù, and ‚Äúgenerative‚Äù. Of the three terms, R is the easiest one to define: it‚Äôs a programming language used primarily for statistical computing and data science. To anyone starting this workshop I don‚Äôt really have to give a lot more detail than that. We all know (roughly speaking) what R is: we wouldn‚Äôt be participating at rstudio::conf if we didn‚Äôt! For the current purposes all I‚Äôll say is that I‚Äôm talking about R the way it is typically used in 2022: R doesn‚Äôt just mean ‚Äúbase R‚Äù. It also includes ‚Äútidyverse‚Äù. It includes the sprawling ecosystem of packages on CRAN and GitHub. Often that includes code written in other languages: thanks to packages like Rcpp and cpp11 it‚Äôs not at all unusual for computationally intensive subroutines to be farmed out to C++ code, and not written in ‚Äúpure‚Äù R. Supplying bindings to libraries written in other languages is a well-established tradition in R: in this workshop we shall not be purists. If we can do a thing by working with R code, then we‚Äôre doing something with R even if other languages are doing some of the work for us.</p>
<p>Okay, so that‚Äôs ‚ÄúR‚Äù. What about ‚Äúart‚Äù ‚Äì what counts as ‚Äúart‚Äù? In this essay I will‚Ä¶</p>
<p>‚Ä¶just kidding. I do not have the arrogance to pretend that I know what art is. Art is pretty (except when it isn‚Äôt). Art is created (except when it is found). Art is intentional (except when it is accidental). Art makes you think (sometimes, not always). Art relies on artist skill (except when you send GPT-3 generated text to DALL-E). Art is uniquely human (no it isn‚Äôt). Art‚Ä¶ yeah, look, I have no idea what art is. Personally, I like to make pretty things from code that appeal to my aesthetic sensibilities, and that‚Äôs good enough for me.</p>
<p>Which brings me to the third word: ‚Äúgenerative‚Äù. When we talk about ‚Äúgenerative art‚Äù, what do we mean? The term isn‚Äôt particularly well defined, but what we typically (not always) mean is that generative art is computational artwork that incorporates some source of noise, disorder, or randomness (natural or artificial) into the artistic process itself. It‚Äôs a kind of perverse artistry: almost always we‚Äôre working with computers, one of the most precise and flexible tools that humans have devised, and yet we are deliberately making the products of the machine unpredictable, unknowable even to the artist.</p>
<p>We are writing code that makes unpredictable paintings.</p>
</section>
<section id="art-is-theft" class="level2">
<h2 class="anchored" data-anchor-id="art-is-theft">Art is theft</h2>
<p>Okay that‚Äôs quite enough preamble. Let‚Äôs stop talking and start making some art! Following the oft-repeated dictum that ‚Äúart is theft‚Äù I want to begin with an act of wholesale thievery. I am going to co-opt tools that were created for serious data science purposes and repurpose them for art. If you‚Äôre in this room with me then you already know these tools by name: ggplot2 is an R package designed for data visualisation; dplyr is designed for data manipulation; tibble is designed for data representation. None of these packages were created for artists. They‚Äôre practical tools designed for statisticians, data scientists, analysts, and other knowledge workers.</p>
<p>Fuck it. Let‚Äôs steal them. Sorry Hadley.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span></code></pre></div>
</div>
<p>Let‚Äôs start with a data visualisation exercise that most R users have encountered at one time or another: creating a scatterplot. The ggplot2 package supplies the tediously-overused <code>mpg</code> data set that‚Ä¶ I don‚Äôt know, it has something to do with cars, I think? I don‚Äôt drive and I am trying very hard to pretend I never learned anything about the internal combustion engine. The point here is that we have a data set. From the perspective of the generative artist our main concern is that it‚Äôs a table that contains some numbers and text organised in a table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mpg</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 234 √ó 11
   manufacturer model  displ  year   cyl trans drv     cty   hwy fl    class
   &lt;chr&gt;        &lt;chr&gt;  &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;
 1 audi         a4       1.8  1999     4 auto‚Ä¶ f        18    29 p     comp‚Ä¶
 2 audi         a4       1.8  1999     4 manu‚Ä¶ f        21    29 p     comp‚Ä¶
 3 audi         a4       2    2008     4 manu‚Ä¶ f        20    31 p     comp‚Ä¶
 4 audi         a4       2    2008     4 auto‚Ä¶ f        21    30 p     comp‚Ä¶
 5 audi         a4       2.8  1999     6 auto‚Ä¶ f        16    26 p     comp‚Ä¶
 6 audi         a4       2.8  1999     6 manu‚Ä¶ f        18    26 p     comp‚Ä¶
 7 audi         a4       3.1  2008     6 auto‚Ä¶ f        18    27 p     comp‚Ä¶
 8 audi         a4 qu‚Ä¶   1.8  1999     4 manu‚Ä¶ 4        18    26 p     comp‚Ä¶
 9 audi         a4 qu‚Ä¶   1.8  1999     4 auto‚Ä¶ 4        16    25 p     comp‚Ä¶
10 audi         a4 qu‚Ä¶   2    2008     4 manu‚Ä¶ 4        20    28 p     comp‚Ä¶
# ‚Ñπ 224 more rows</code></pre>
</div>
</div>
<p>We need not concern ourselves with why <code>displ</code> refers to engine displacement nor what that term even means. Nor do we have to care about how <code>hwy</code> represents highway mileage or how <code>drv</code> has something to do with gears. Really, this is not our concern. As generative artists we think of these as raw sources of structure and randomness.</p>
<p>Here‚Äôs what I mean. As a data scientist, I might draw a plot like this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/familiar-ggplot-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>On the x-axis I‚Äôve plotted one column in the table, on the y-axis I‚Äôve plotted another column, and each row in the table shows up as a dot. A third row of the table is used to supply the colour. Because ggplot2 is designed to support interpretation, the resulting plot has a collection of guides, legends and other labels. In the world of data visualisation, these things are essential for helping the viewer understand how the picture relates to the thing in the world (cars, apparently) that the data pertains to.</p>
<p>As an artist, I cannot be bothered with such dull practicalities. Let‚Äôs get rid of all of them, and ‚Äì violating all sorts of data visualisation best practices ‚Äì I‚Äôm going to vary the size of the dots in a way that doesn‚Äôt help anyone make sense of the data:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> drv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> cyl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_brewer</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/tweak-ggplot-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Once we strip away the practical purpose of the data visualisation, we‚Äôre left with something that isn‚Äôt quite so easy to interpret, but is‚Ä¶ well, it‚Äôs kind of pretty, right? There‚Äôs an overall structure to the scatterplot. The colours, shapes, and positions of the data don‚Äôt necessarily tell an easily-understood story about the real world anymore but they‚Äôre quite pleasing to look at.</p>
<p>Viewing ggplot2 through this lens opens up a new world of possibilities. Inspired by Leland Wilkinson‚Äôs book on the subject, Hadley Wickham wrote the package to provide a <em>grammar</em> of graphics: it supplies a collection of transformation and composition rules that we can use to construct mappings between data (that represent a thing in the world) and images (that our visual systems can quickly interpret). Those rules are not arbitrary: they‚Äôre created to make our lives as data analysts easier. But we can repurpose them. The grammatical rules of human language did not evolve to serve the needs of poets, but the poets use them anyway. So too we as visual artists can (and will) reuse the grammar of graphics for artistic purposes. A few minor tweaks gives us this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_brewer</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/tweak-ggplot-more-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>And let‚Äôs be honest. At this point the image has very little to do with cars. Sure, I‚Äôm using the <code>mpg</code> data to drive the process, but as far as I‚Äôm concerned it‚Äôs really just a source of raw numbers. As a generative artist these numbers are my raw materials, but I‚Äôm not too fussed about exactly how I came into possession of these numbers.</p>
<div id="exercise-mpg-art" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Try it yourself! Using nothing other than ggplot2 and the <code>mpg</code> data set, create your own artwork. Don‚Äôt take too long: 3 minutes at the absolute most! See what you can come up with in that time!</p>
</div>
</div>
<p>I could just have easily created my own raw materials. As a statistical programming language R comes equipped with a very sophisticated collection of tools for generating pseudorandom numbers with various distributions. I can tap into this whenever I like but in a lot of cases I don‚Äôt need anything more fancy than the <code>runif()</code> function. Uniformly distributed random numbers are perfectly adequate for many purposes. Let‚Äôs make some:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb7-3">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb7-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb7-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> x0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb7-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb7-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n), </span>
<span id="cb7-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n)</span>
<span id="cb7-10">)</span>
<span id="cb7-11">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 50 √ó 6
       x0     y0    x1      y1 shade width
    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 0.266  0.478  0.327  0.523  0.268 0.762
 2 0.372  0.861  0.313  0.884  0.219 0.933
 3 0.573  0.438  0.481  0.370  0.517 0.471
 4 0.908  0.245  1.11   0.226  0.269 0.604
 5 0.202  0.0707 0.255  0.0709 0.181 0.485
 6 0.898  0.0995 0.784 -0.0282 0.519 0.109
 7 0.945  0.316  0.796  0.328  0.563 0.248
 8 0.661  0.519  0.652  0.349  0.129 0.499
 9 0.629  0.662  0.799  0.573  0.256 0.373
10 0.0618 0.407  0.101  0.292  0.718 0.935
# ‚Ñπ 40 more rows</code></pre>
</div>
</div>
<p>Yup. Those look like a bunch of numbers. They do not mean anything to me. They‚Äôre entirely deterministic ‚Äì at least in the sense that the <code>set.seed()</code> command ensures that the pseudorandom number will always generate the same random numbers with this code ‚Äì but the underlying generator is utterly without structure. As the outside observer I am entirely indifferent about whether I should use <code>set.seed(1)</code> or <code>set.seed(234534)</code>. Both versions of this command will initialise the state of the random number generator in a way that ensures that <code>runif()</code> generates pure noise. Under the hood there are some fancy definitions of what we mean by ‚Äúrandomness‚Äù and ‚Äúnoise‚Äù, but this is not the place to talk about <a href="https://en.wikipedia.org/wiki/Algorithmically_random_sequence">Martin-L√∂f randomness</a>. For our purposes it is sufficient to agree that the output of a uniform random number generator is meaningless noise, no matter what seed value we supply.</p>
<p>The key point is this: the input is garbage. Garbage in‚Ä¶</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb9-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x0,</span>
<span id="cb9-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y0,</span>
<span id="cb9-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x1,</span>
<span id="cb9-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y1,</span>
<span id="cb9-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shade,</span>
<span id="cb9-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> width</span>
<span id="cb9-9">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_c</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_linewidth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb9-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/coord-polar-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>‚Ä¶art out?</p>
<p>Not that anyone has ever asked my opinion on the topic, but this is what I think generative art really is. An automated process that takes garbage as input and creates unpredictably delightful outputs ‚Äì sometimes with a little helpful human oversight and curation ‚Äì is a generative art system. It is fundamentally a process of making something from nothing. Art from the void. Treasure from trash. Signal from noise. You get the idea.</p>
</section>
<section id="technique" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="technique">Technique</h2>
<p>At this point we have some sense of what our creative endeavour is all about, which leads naturally to questions about technique. One thing I‚Äôve learned ‚Äì about art, yes, but I think it holds quite generally ‚Äì is that you can‚Äôt teach ‚Äúpersonal style‚Äù. Everyone has their own tastes and preferences, and it makes no sense whatsoever to tell someone else who, what, or how they should love. I have no business telling you what is pleasing and what isn‚Äôt. I‚Äôm not arrogant enough to try.</p>
<p>What I can do, however, is talk about the tools and coding practices that have made it easier for me to create the things that I think have aesthetic value. When art schools talk about teaching ‚Äútechnique‚Äù, this is what I think they mean. The point isn‚Äôt to dictate what you create, but to give you skills that will let you make a reality from the thing you envision. Fundamentally, this is a workshop on <em>technique</em>, in this sense of the term.</p>
<p>Let‚Äôs start with a core principle: code reuse. The entire point of generative art is that we‚Äôre turning trash into treasure, and trash is not a scarce resource. If you can write code to create one beautiful thing, the same code should be reusable to create many beautiful things. This ‚Äúreuse principle‚Äù means that the substantive work of writing generative art code is almost always a matter of writing functions. Functions are beautiful‚Ä¶</p>
<p>‚Ä¶but they are opinionated. A function exists if (and only if) you intend to reuse it. In the ideal case, a function is a thing that makes sense on its own terms and ‚Äì as a consequence ‚Äì you might reuse it in many different contexts. Every scientific programming language since the dawn of time has included functions like <code>exp()</code> and <code>log()</code> because scientists will always reuse these functions. Exponents and logarithms are scientifically-reusable concepts.</p>
<p>So what counts as an artistically-reusable concept? Well, at a minimum, the definition of an artistic <em>system</em> is a reusable concept. Suppose I want to create many art pieces that are ‚Äúin the same style‚Äù as the piece I created above. To do that, I could wrap my code in a function that I‚Äôll call <code>polar_art()</code>:</p>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">polar_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed, n, palette) {</span>
<span id="cb10-2">  </span>
<span id="cb10-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the state of the random number generator</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb10-5">  </span>
<span id="cb10-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data frame containing random values for </span></span>
<span id="cb10-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># aesthetics we might want to use in the art</span></span>
<span id="cb10-8">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb10-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb10-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb10-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> x0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb10-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb10-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n), </span>
<span id="cb10-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n)</span>
<span id="cb10-15">  )</span>
<span id="cb10-16">  </span>
<span id="cb10-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot segments in various colours, using </span></span>
<span id="cb10-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># polar coordinates and a gradient palette</span></span>
<span id="cb10-19">  dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb10-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x0,</span>
<span id="cb10-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y0,</span>
<span id="cb10-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x1,</span>
<span id="cb10-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y1,</span>
<span id="cb10-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shade,</span>
<span id="cb10-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> width</span>
<span id="cb10-27">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_linewidth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb10-35">}</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">

</div>
<p>Because I‚Äôve written this thing down as a function, I‚Äôm now free to reuse it to create multiple pieces. Varying the <code>seed</code> argument creates new pieces that don‚Äôt differ in any systematic way from one another, whereas varying <code>n</code> and <code>palette</code> changes the number of segments plotted and the colour scheme used.</p>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"antiquewhite"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bisque"</span>))</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>))</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>))</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/art-functions-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/art-functions-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/art-functions-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<div id="exercise-polar-art" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercises
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>In the materials there is a file called <code>polar_art.R</code> that contains a copy of the <code>polar_art()</code> function. Open it and use the <code>polar_art()</code> function to generate your own pieces. Try changing the <code>seed</code>, <code>n</code>, and the <code>palette</code> to create a variety of different pieces.</p></li>
<li><p>Create a new file called <code>polar_art_02.R</code> that contains the <code>polar_art()</code> function. In the new file, try modifying the <code>polar_art()</code> function itself to see if you can create your own new system.</p></li>
<li><p>Something to think about: Usually in data science we try to avoid naming our files <code>my_file_version_1</code>, <code>my_file_version_2</code>, etc, and instead we place files under version control using git. Yet here I am in an art context, apparently giving the advice to fall back on the old-fashioned system of naming files with version numbers. Why might I be doing that?</p></li>
</ol>
</div>
</div>
</section>
<section id="colour" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="colour">Colour</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scales)</span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span></code></pre></div>
</div>
<p>Picking a palette is always tricky, but can often be made simpler because R has so many packages that provides prespecified colour palettes. My usual approach is to use palettes defined by a few colours, and it‚Äôs easy to find sites online that make it easy to find colour combinations you like. One of my favourite sites is <a href="https://coolors.co">coolors.co</a>, which you can browse for preselected palettes or use the tools to build your own. For example I might decide that <a href="https://coolors.co/palette/cdb4db-ffc8dd-ffafcc-bde0fe-a2d2ff">this palette</a> is the one I want to use. The site makes it easy to export the hex codes for each colour, so I can cut and paste to get this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#cdb4db"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffc8dd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffafcc"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bde0fe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a2d2ff"</span>)</span></code></pre></div>
</div>
<p>The <code>show_col()</code> function from the scales package is a nice way to quickly preview the colours:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(pal)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/show-col-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Though there are only five colours in this palette, the <code>polar_art()</code> function uses <code>scales_colour_gradientn()</code> to construct a continuous colour scale from them by linearly interpolating between them. You can do the same thing manually using <code>colorRampPalette()</code>. In the code below I‚Äôve created a new function <code>palette_fn()</code> that will generate a vector of colours that linearly interpolates between the five input colours in <code>pal</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">palette_fn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(pal)</span></code></pre></div>
</div>
<p>If I need 100 colours distributed along the spectrum defined by <code>pal</code>, all I need to do is this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">palette_fn</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "#CDB4DB" "#CFB4DB" "#D1B5DB" "#D3B6DB" "#D5B7DB" "#D7B8DB" "#D9B8DB"
  [8] "#DBB9DB" "#DDBADB" "#DFBBDB" "#E1BCDB" "#E3BCDB" "#E5BDDB" "#E7BEDC"
 [15] "#E9BFDC" "#EBC0DC" "#EDC0DC" "#EFC1DC" "#F1C2DC" "#F3C3DC" "#F5C4DC"
 [22] "#F7C4DC" "#F9C5DC" "#FBC6DC" "#FDC7DC" "#FFC7DC" "#FFC6DC" "#FFC5DB"
 [29] "#FFC4DA" "#FFC3DA" "#FFC2D9" "#FFC1D8" "#FFC0D8" "#FFBFD7" "#FFBED6"
 [36] "#FFBDD5" "#FFBCD5" "#FFBBD4" "#FFBAD3" "#FFB9D3" "#FFB8D2" "#FFB7D1"
 [43] "#FFB6D1" "#FFB5D0" "#FFB4CF" "#FFB3CF" "#FFB2CE" "#FFB1CD" "#FFB0CD"
 [50] "#FFAFCC" "#FDAFCD" "#FBB1CF" "#F8B3D1" "#F5B5D3" "#F3B7D5" "#F0B9D7"
 [57] "#EDBBD9" "#EBBDDB" "#E8BFDD" "#E5C1DF" "#E3C3E1" "#E0C5E3" "#DDC7E5"
 [64] "#DBC9E7" "#D8CBE9" "#D5CDEB" "#D3CFED" "#D0D1EF" "#CDD3F1" "#CBD5F3"
 [71] "#C8D7F5" "#C5D9F7" "#C3DBF9" "#C0DDFB" "#BDDFFD" "#BCDFFE" "#BBDFFE"
 [78] "#BADEFE" "#B8DDFE" "#B7DDFE" "#B6DCFE" "#B5DCFE" "#B4DBFE" "#B3DBFE"
 [85] "#B2DAFE" "#B1D9FE" "#B0D9FE" "#AFD8FE" "#AED8FE" "#ACD7FE" "#ABD7FE"
 [92] "#AAD6FE" "#A9D5FE" "#A8D5FE" "#A7D4FE" "#A6D4FE" "#A5D3FE" "#A4D3FE"
 [99] "#A3D2FE" "#A2D2FF"</code></pre>
</div>
</div>
<p>Here‚Äôs what those colours look like as a smooth palette:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(</span>
<span id="cb18-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">palette_fn</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>),</span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useRaster =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb18-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb18-6">)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/palette-function-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>In this example, I took one set of colours from the web to define a palette, but there are many built-in palettes you can select from randomly as part of your generative process. For example, the ggthemes package contains a list called <code>canva_palettes</code>, which contains 150 palettes taken from <a href="https://www.canva.com/colors/color-palettes/">canva.com</a>. For example, here‚Äôs one of those palettes</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">canva_palettes[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "#4abdac" "#fc4a1a" "#f7b733" "#dfdce3"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(canva_palettes[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>]])</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/show-canva-palette-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>The fact that we have a list containing 150 different palettes, it‚Äôs a simple matter to write a <code>sample_canva()</code> function that samples one of these palettes at random:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb22-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb22-4">}</span></code></pre></div>
</div>
<p>Here‚Äôs an example of me using it:</p>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/canva-palettes-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/canva-palettes-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/canva-palettes-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Notice that I‚Äôve set it up in a way that allows me some degree of control over which elements of the image are allowed to vary. In all three images I used the same seed when calling <code>polar_art()</code>, so the random configuration of shapes is identical in all three cases. In contrast, I gave different seeds to the <code>sample_canva()</code> function, so the images have different palettes. The reverse is also possible, producing different configurations with the same colour scheme:</p>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_art</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/canva-palettes-2-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/canva-palettes-2-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/canva-palettes-2-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>The ability to pick and choose when the randomness gets turned on and off is quite handy!</p>
<div id="exercise-palettes" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercises
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>In the materials there is a file called <code>palette-generators.R</code> that contains a copy of the <code>sample_canva()</code> function. Take a look and try calling the function a few times to see what kind of output it produces. You may find it handy to use <code>show_col()</code> to visualise the results.</p></li>
<li><p>Try writing your own random palette generator. A simple (and occasionally useful) approach is to construct a palette consisting of distinct but otherwise randomly selected named colours in R. There is a set of 502 colour names generated by calling <code>colours()</code> with <code>distinct = TRUE)</code>. Write a function called <code>sample_named_colours()</code> that takes <code>n</code> as an input argument, and then returns a sample of <code>n</code> of these colour. Try using it with the <code>polar_art()</code> function.</p></li>
<li><p>The <code>sample_canva()</code> function, as I‚Äôve written it, preserves the original structure of the 150 palettes in <code>ggthemes::canva_palettes</code>, so that the 4 colours returned all belong to the same palette on the Canva website originally. Try breaking this constraint. If you call <code>unlist(ggthemes::canva_palettes)</code> you get a vector of 600 distinct colours. Write a palette generating function that samples colours randomly from that set of 600 colours.</p></li>
</ol>
</div>
</div>
</section>
<section id="composition" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="composition">Composition</h2>
<p>The <code>polar_art()</code> function I wrote earlier is nice, but it‚Äôs not very flexible. It allows some control over the palette and the number of segments to be plotted, but that‚Äôs all. It doesn‚Äôt let me use the full flexibility of ggplot2 to create artwork. For example, what if I wanted to create more pieces in a ‚Äúsimilar‚Äù style to the ones I created earlier, but plot different geoms? Or perhaps I want to plot more than one data set as part of a single piece? The <code>polar_art()</code> function doesn‚Äôt allow that. The data generation and plot building is all handled internally. Perhaps there‚Äôs a case to be made that we should break this into smaller functions and see if that helps.</p>
<p>Let‚Äôs start out by writing a ‚Äúrandom tibble generator‚Äù function, <code>sample_data()</code>. This function will generate tibbles full of random numbers, but that‚Äôs all:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">sample_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>){</span>
<span id="cb25-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb25-3">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb25-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb25-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb25-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> x0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb25-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb25-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n), </span>
<span id="cb25-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb25-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb25-11">  )</span>
<span id="cb25-12">}</span></code></pre></div>
</div>
<p>Next, let‚Äôs create a <code>styled_plot()</code> function that takes a palette and (optionally) a data set as inputs, and sets up the mappings and the stylistic aspects to the plot. This function does a lot of the work in defining what kind of artwork is possible using this system, even though it doesn‚Äôt actually draw anything. For example, it specifies <code>coord_polar()</code> as the coordinate system, so any points or lines that get created will be shown in polar coordinates. It uses <code>guide_none()</code> to suppress legends, and <code>theme_void()</code> to suppress axes, axis titles and so on.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">polar_styled_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, palette) {</span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb26-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data,</span>
<span id="cb26-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb26-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x0,</span>
<span id="cb26-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y0,</span>
<span id="cb26-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x1,</span>
<span id="cb26-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y1,</span>
<span id="cb26-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shade,</span>
<span id="cb26-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size</span>
<span id="cb26-11">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb26-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clip =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(</span>
<span id="cb26-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb26-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb26-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oob =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>oob_keep</span>
<span id="cb26-17">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(</span>
<span id="cb26-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb26-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb26-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oob =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>oob_keep</span>
<span id="cb26-22">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb26-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb26-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb26-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb26-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(</span>
<span id="cb26-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(),</span>
<span id="cb26-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(),</span>
<span id="cb26-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(),</span>
<span id="cb26-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()</span>
<span id="cb26-31">    )</span>
<span id="cb26-32">}</span></code></pre></div>
</div>
<p>This structure gives a clean delineation of responsibility among the different functions. The <code>sample_canva()</code> function does the work of generating random palettes, <code>sample_data()</code> does the job of creating random data to drive the plot, <code>polar_styled_plot()</code> takes care of all the ggplot set up, and then you can pick and choose which geom you want to add. So we can write code like this that differs only in the choice of geom:</p>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb27-2">pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_styled_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> pal) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>()</span>
<span id="cb27-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_styled_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> pal) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>()</span>
<span id="cb27-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_styled_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> pal) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell column-screen-inset quarto-layout-panel" data-layout-ncol="3" data-layout-align="center">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/simple-composition-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/simple-composition-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/simple-composition-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
</div>
<p>Because the output of <code>polar_styled_plot()</code> is a ggplot that we can add layers to, and because each layer in a ggplot can supply its own data, we now have the ability to reuse these components in different ways. For that it‚Äôs helpful to load dplyr. Here‚Äôs an example where we generate two random data sets and feed those into four separate geoms:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb28-2"></span>
<span id="cb28-3">dat1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>) </span>
<span id="cb28-4">dat2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  </span>
<span id="cb28-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb28-6"></span>
<span id="cb28-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_styled_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb28-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb28-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb28-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb28-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb28-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), </span>
<span id="cb28-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineend =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"round"</span>, </span>
<span id="cb28-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span></span>
<span id="cb28-15">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb28-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>), </span>
<span id="cb28-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineend =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"round"</span>, </span>
<span id="cb28-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span></span>
<span id="cb28-20">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb28-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb28-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span></span>
<span id="cb28-24">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/compositionality-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Another example that three copies of the same random data set to produce a variation that has additional symmetries:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_styled_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/compositionality-2-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<p>Finally, here‚Äôs a version that uses the <code>linetype</code> argument to <code>geom_segment()</code> to create a ‚Äúchoppier‚Äù version of these pieces:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_styled_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_canva</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb30-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"331311"</span>) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/index_files/figure-html/compositionality-3-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="1800"></p>
</figure>
</div>
</div>
</div>
<div id="exercise-grammars" class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercises
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li><p>In the materials there is a file called <code>polar-styled-plots.R</code> that contains a copy of the <code>sample_canva()</code>, <code>sample_data()</code> and <code>polar_styled_plot()</code> functions. Without modifying any of these three functions, explore how much flexibility you have to make different pieces in which (1) data are generated with <code>sample_data()</code>, (2) the plot is initialised by calling <code>polar_styled_plot()</code>, and (3) the piece is created by adding ggplot2 geoms. Data manipulation with dplyr is allowed!</p></li>
<li><p>In the examples above and the previous exercise you saw that the <code>polar_styled_plot()</code> function plays the role of defining an overarching ‚Äústyle‚Äù for possible art pieces, but it doesn‚Äôt completely constrain artistic freedom. Your task in this exercise is to try to write a <code>my_styled_plot()</code> that does something similar‚Ä¶ but creates a different style that you can explore</p></li>
</ol>
</div>
</div>
</section>
<section id="materials" class="level2">
<h2 class="anchored" data-anchor-id="materials">Materials</h2>
<p>Code for each of the source files referred to in this section of the workshop is included here. Click on the callout box below to see the code for the file you want to look at. Please keep in mind that (unlike the code in the main text) I haven‚Äôt modified these scripts since the original workshop, so you might need to play around with them to get them to work!</p>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="palette-generators.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
palette-generators.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the original function from the first session</span></span>
<span id="cb31-4">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb31-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb31-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb31-7">}</span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the extended function used in later sessions</span></span>
<span id="cb31-10">sample_canva2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb31-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb31-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb31-13">    (\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(x)(n))()  </span>
<span id="cb31-14">}</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="polar-art.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
polar-art.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb32-3"></span>
<span id="cb32-4">polar_art <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(seed, n, palette) {</span>
<span id="cb32-5">  </span>
<span id="cb32-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the state of the random number generator</span></span>
<span id="cb32-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb32-8">  </span>
<span id="cb32-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data frame containing random values for </span></span>
<span id="cb32-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># aesthetics we might want to use in the art</span></span>
<span id="cb32-11">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb32-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb32-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb32-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> x0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb32-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb32-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n), </span>
<span id="cb32-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n)</span>
<span id="cb32-18">  )</span>
<span id="cb32-19">  </span>
<span id="cb32-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot segments in various colours, using </span></span>
<span id="cb32-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># polar coordinates and a gradient palette</span></span>
<span id="cb32-22">  dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb32-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb32-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x0,</span>
<span id="cb32-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y0,</span>
<span id="cb32-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x1,</span>
<span id="cb32-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y1,</span>
<span id="cb32-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shade,</span>
<span id="cb32-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size</span>
<span id="cb32-30">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb32-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb32-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb32-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb32-38">}</span>
<span id="cb32-39"></span>
<span id="cb32-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polar_art</span>(</span>
<span id="cb32-41">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb32-42">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, </span>
<span id="cb32-43">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb32-44">)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="polar-styled-plots.R">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
polar-styled-plots.R
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb33-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb33-4"></span>
<span id="cb33-5">sample_canva <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb33-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb33-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb33-8">}</span>
<span id="cb33-9"></span>
<span id="cb33-10">sample_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>){</span>
<span id="cb33-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb33-12">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb33-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb33-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb33-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> x0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb33-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> y0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb33-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n), </span>
<span id="cb33-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n),</span>
<span id="cb33-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb33-20">  )</span>
<span id="cb33-21">}</span>
<span id="cb33-22"></span>
<span id="cb33-23">polar_styled_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, palette) {</span>
<span id="cb33-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb33-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data,</span>
<span id="cb33-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb33-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x0,</span>
<span id="cb33-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y0,</span>
<span id="cb33-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x1,</span>
<span id="cb33-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y1,</span>
<span id="cb33-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> shade,</span>
<span id="cb33-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size</span>
<span id="cb33-33">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clip =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(</span>
<span id="cb33-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb33-37">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb33-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oob =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>oob_keep</span>
<span id="cb33-39">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(</span>
<span id="cb33-41">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb33-42">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb33-43">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oob =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>oob_keep</span>
<span id="cb33-44">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-45">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-46">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-48">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(</span>
<span id="cb33-49">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(),</span>
<span id="cb33-50">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(),</span>
<span id="cb33-51">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>(),</span>
<span id="cb33-52">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_none</span>()</span>
<span id="cb33-53">    )</span>
<span id="cb33-54">}</span></code></pre></div>
</div>
</div>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Art from Code {I:} {Generative} Art with {R}},
  date = {2024-12-18},
  url = {https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>‚ÄúArt from Code I: Generative Art with
R.‚Äù</span> December 18, 2024. <a href="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/">https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/</guid>
  <pubDate>Tue, 17 Dec 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-12-18_art-from-code-1/compositionality.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
