{
  "hash": "885bb1b9993b68114adc924e4c22061b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Making tables in R with table1\"\ndescription: \"A pretty reckless dive into a package that hits the sweet spot for me\"\ndate: \"2024-06-21\"\ncategories: [\"R\"]\nformat: \n  html:\n    css: style-tweaks.css\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n> I'll never be good enough <br>\n> You make me wanna die <br>\n> And everything you love will burn up in the light <br>\n> And every time I look inside your eyes <br>\n> You make me wanna die <br>\n> &nbsp; &nbsp; - [*The Pretty Reckless*](https://www.youtube.com/watch?v=txBfhpm1jI0)\n\nIt's no secret that my health hasn't been so great these last few months. Nothing life-threatening, I hasten to add, but severe enough that I've spent a depressing amount of 2024 in bed, and not in the fun way. I'm fortunate enough to have a remote job, and the workload this year hasn't been as demanding as it was last year. I've been able to manage, yes,^[It always strikes me as a bitter failure of public policy that when someone falls sick, their first thought is *always* something along the lines of \"can I still work?\" Very few people actually love their jobs so much that they want to work through a serious illness, but the fear that the company will discard you the moment something bad happens is built into our society at a low level. If you're not dead you work. Because capitalism.] but it has been rough. I've necessarily been focusing what little energy I've had on my kids and on my day to day work. I've had no bandwidth at all to write, or make art, or learn new things. A sorry state of affairs, and one that sucks much of the joy out of life.\n\nHappily, things have started to turn around in recent weeks. I've had a little more energy, I've been able to work from my desk rather than my bed, and while the artistic impulse hasn't come back yet I've started to write once more. \n\nThe [table1](https://benjaminrich.github.io/table1/) package by Benjamin Rich. Package source code is on [github](https://github.com/benjaminrich/table1), and the [package vignette](https://benjaminrich.github.io/table1/vignettes/table1-examples.html) provides a lot of useful detail that you can't necessarily find by browsing the help files.\n\n\n![](./make-me-wanna-die.jpg)\n\n## Getting started\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(table1)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex     year\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int> <fct>  <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750 male    2007\n 2 Adelie  Torgersen           39.5          17.4               186        3800 female  2007\n 3 Adelie  Torgersen           40.3          18                 195        3250 female  2007\n 4 Adelie  Torgersen           NA            NA                  NA          NA <NA>    2007\n 5 Adelie  Torgersen           36.7          19.3               193        3450 female  2007\n 6 Adelie  Torgersen           39.3          20.6               190        3650 male    2007\n 7 Adelie  Torgersen           38.9          17.8               181        3625 female  2007\n 8 Adelie  Torgersen           39.2          19.6               195        4675 male    2007\n 9 Adelie  Torgersen           34.1          18.1               193        3475 <NA>    2007\n10 Adelie  Torgersen           42            20.2               190        4250 <NA>    2007\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\nBasic usage:^[The output of a call to `table1()` has S3 class \"table1\", and internally specifies an HTML table (more on that later). When printed in a quarto or R markdown document like this one, in the normal course of events the `table1:::knit_print.table()` method is called, in which case the table1 object is coerced to a data frame and the end result looks the same as a data frame would look when `knitr::kable()` is called. However, this is slightly different to how the table looks if you call it interactively in an R session where the S3 method called is `table1:::print.table1()`. Because I want the output in this post to look as close as possible to the typical output when calling `table1()` in a regular R session, I've set `results = \"asis\"` for all my code chunks in this document, thereby ending up with tables that look the same as the ones you see interactively in the R session.]\n\n\n\n```{.r .cell-code}\ntable1(~ island + bill_length_mm | species, penguins)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>island</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Biscoe</td>\n<td>44 (28.9%)</td>\n<td>0 (0%)</td>\n<td>124 (100%)</td>\n<td>168 (48.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Dream</td>\n<td>56 (36.8%)</td>\n<td>68 (100%)</td>\n<td>0 (0%)</td>\n<td>124 (36.0%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Torgersen</td>\n<td class='lastrow'>52 (34.2%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>52 (15.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>bill_length_mm</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>38.8 (2.66)</td>\n<td>48.8 (3.34)</td>\n<td>47.5 (3.08)</td>\n<td>43.9 (5.46)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>38.8 [32.1, 46.0]</td>\n<td>49.6 [40.9, 58.0]</td>\n<td>47.3 [40.9, 59.6]</td>\n<td>44.5 [32.1, 59.6]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\nThe stratification variable (i.e. `species`) isn't actually necessary to create a table, and if you wanted you could produce a table using a formula like `~ island + bill_length_mm`. In practice, however, I've found that I never do this: almost every table I've created in real life has a stratification variable.\n\n## Applying labels\n\nAdding labels:^[The table1 package also supports units as a separate piece of metadata via the `units()` function, but I have to admit I never really use that one.]\n\n\n\n```{.r .cell-code}\nlabel(penguins$island) <- \"Island\"\nlabel(penguins$bill_length_mm) <- \"Bill Length (mm)\"\n\ntable1(~ island + bill_length_mm | species, penguins)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Island</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Biscoe</td>\n<td>44 (28.9%)</td>\n<td>0 (0%)</td>\n<td>124 (100%)</td>\n<td>168 (48.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Dream</td>\n<td>56 (36.8%)</td>\n<td>68 (100%)</td>\n<td>0 (0%)</td>\n<td>124 (36.0%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Torgersen</td>\n<td class='lastrow'>52 (34.2%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>52 (15.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Bill Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>38.8 (2.66)</td>\n<td>48.8 (3.34)</td>\n<td>47.5 (3.08)</td>\n<td>43.9 (5.46)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>38.8 [32.1, 46.0]</td>\n<td>49.6 [40.9, 58.0]</td>\n<td>47.3 [40.9, 59.6]</td>\n<td>44.5 [32.1, 59.6]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\nUsing the `label()` function in table1 is how I've seen most people do it, but in truth there's nothing fancy here: all that the function does is set the \"label\" metadata attribute for the relevant object, so you could totally do it in base R via the `attr()` function:\n\n\n\n```{.r .cell-code}\nattr(penguins$bill_depth_mm, \"label\") <- \"Bill Depth (mm)\"\n\ntable1(~ bill_depth_mm | species, penguins)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Bill Depth (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>18.3 (1.22)</td>\n<td>18.4 (1.14)</td>\n<td>15.0 (0.981)</td>\n<td>17.2 (1.97)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>18.4 [15.5, 21.5]</td>\n<td>18.5 [16.4, 20.8]</td>\n<td>15.0 [13.1, 17.3]</td>\n<td>17.3 [13.1, 21.5]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\nHowever, I am slowly coming to like the `setLabel()` convenience function in table1 because it returns the labelled object and hence plays nicely with a dplyr workflow: \n\n\n\n```{.r .cell-code}\npenguins <- penguins |> \n  mutate(\n    flipper_length_mm = setLabel(flipper_length_mm, \"Flipper Length (mm)\"),\n    body_mass_g = setLabel(body_mass_g, \"Body Mass (g)\"),\n    sex = setLabel(sex, \"Sex\"),\n    year = setLabel(year, \"Year\")\n  )\n\ntable1(~ flipper_length_mm + body_mass_g + sex + year | species, penguins)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>190 (6.54)</td>\n<td>196 (7.13)</td>\n<td>217 (6.48)</td>\n<td>201 (14.1)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>190 [172, 210]</td>\n<td>196 [178, 212]</td>\n<td>216 [203, 231]</td>\n<td>197 [172, 231]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>3700 (459)</td>\n<td>3730 (384)</td>\n<td>5080 (504)</td>\n<td>4200 (802)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>3700 [2850, 4780]</td>\n<td>3700 [2700, 4800]</td>\n<td>5000 [3950, 6300]</td>\n<td>4050 [2700, 6300]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Sex</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>female</td>\n<td>73 (48.0%)</td>\n<td>34 (50.0%)</td>\n<td>58 (46.8%)</td>\n<td>165 (48.0%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>male</td>\n<td>73 (48.0%)</td>\n<td>34 (50.0%)</td>\n<td>61 (49.2%)</td>\n<td>168 (48.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>6 (3.9%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>5 (4.0%)</td>\n<td class='lastrow'>11 (3.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Year</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>2010 (0.822)</td>\n<td>2010 (0.863)</td>\n<td>2010 (0.792)</td>\n<td>2010 (0.818)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Median [Min, Max]</td>\n<td class='lastrow'>2010 [2010, 2010]</td>\n<td class='lastrow'>2010 [2010, 2010]</td>\n<td class='lastrow'>2010 [2010, 2010]</td>\n<td class='lastrow'>2010 [2010, 2010]</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n\n![](my-medicine.jpg)\n\n## Customing cell content\n\n> Somebody mixed my medicine <br>\n> Somebody's in my head again <br>\n> Well, I'll drink what you leak and I'll smoke what you sigh <br>\n> See across the room with a look in your eye <br>\n> &nbsp; &nbsp; --[*The Pretty Reckless*](https://www.youtube.com/watch?v=cJMSDlWlfMM)\n\nOne thing I really like about the table1 package is that it supplies very sensible defaults for tables of descriptive statistics: continuous variables are summarised not only via means and standard deviations, but you also get the medians, ranges, and missing data summaries. Categorical variables are summarised with counts and percentages, and again you get a missing data summary. Very often this is exactly the summary you want, and no customisation at all is required.\n\nInevitably, though, every data analyst comes across as situation that requires a different collection of summary statistics. At that point, you need to dive a little deeper and understand the syntax table1 uses to modify the summaries that it produces. \n\n### Using abbreviated codes\n\nThe table1 package has a very practical and flexible mechanism for customising the descriptive statistics that it produces, but one that needs a bit of unpacking to understand. If you really want to do so, you can write an entire \"rendering\" function from scratch that affords very fine grained control over the output (more on that later!) but most of the time you don't actually want to go to all that effort. In most situations, all you *really* want to do is swap out one widely-used descriptive statistic for a different widely-used descriptive statistic. It would be no fun for the analyst if they had to write an entire rendering function from scratch just to switch from reporting arithmetic means to reporting geometric means. To that end, table1 provides a compact syntax using \"abbreviated codes\" that covers a lot of common use cases.\n\nAs a concrete example, let's consider the task I described above: reporting geometric means and standard deviations. This is a very common task in pharmacometrics because a lot of observed data are approximately log-normal in distribution, and in my everyday work I find I have to do this a lot. Luckily for me, the table1 package recognises the strings `\"GMEAN\"` and `\"GSD\"` as abbreviated codes, and internally will replace them with function calls that compute the geometric mean and geometric standard deviation. To define a custom render that produces these two statistics, all I have to do is define a named vector like this one:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_geometric <- c(\n  \"Geometric mean\" = \"GMEAN\", \n  \"Geometric SD\" = \"GSD\"\n)\n```\n:::\n\n\nIn this compressed syntax, the names define the row labels that will be printed in the output table (e.g., `\"Geometric mean\"` becomes a row label), and the values are interpreted using the abbreviated code (e.g., the `\"GMEAN\"` string is replaced by the value of the geometric mean). To apply this custom render to my table only to the continuous variables in the summary table, all I have to do is include `render.continuous = render_geometric` in the call to `table1()`:\n\n\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g + sex + year | species, \n  data = penguins, \n  render.continuous = render_geometric\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Geometric mean</td>\n<td>190</td>\n<td>196</td>\n<td>217</td>\n<td>200</td>\n</tr>\n<tr>\n<td class='rowlabel'>Geometric SD</td>\n<td>1.04</td>\n<td>1.04</td>\n<td>1.03</td>\n<td>1.07</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Geometric mean</td>\n<td>3670</td>\n<td>3710</td>\n<td>5050</td>\n<td>4130</td>\n</tr>\n<tr>\n<td class='rowlabel'>Geometric SD</td>\n<td>1.13</td>\n<td>1.11</td>\n<td>1.11</td>\n<td>1.21</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Sex</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>female</td>\n<td>73 (48.0%)</td>\n<td>34 (50.0%)</td>\n<td>58 (46.8%)</td>\n<td>165 (48.0%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>male</td>\n<td>73 (48.0%)</td>\n<td>34 (50.0%)</td>\n<td>61 (49.2%)</td>\n<td>168 (48.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>6 (3.9%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>5 (4.0%)</td>\n<td class='lastrow'>11 (3.2%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Year</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Geometric mean</td>\n<td>2010</td>\n<td>2010</td>\n<td>2010</td>\n<td>2010</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Geometric SD</td>\n<td class='lastrow'>1.00</td>\n<td class='lastrow'>1.00</td>\n<td class='lastrow'>1.00</td>\n<td class='lastrow'>1.00</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\nAs you can see from the output, the custom render has been applied to the two continuous variables `flipper_length_mm` and `body_mass_g` but not the categorical variables `sex` and `year`, just as you'd expect given that the argument I specified is called `render.continuous`. However, there are two features that might be a little surprising:\n\n- The missing data summary for the continuous variables is unaffected\n- If you look at the documentation for `table1()` you'll notice it has a `render` argument but not a `render.continuous` argument\n\nI'll unpack both of those things later in the blog post, but I wanted to mention them now because these things confused me a little when I first started using table1. For now, let's just accept that it works and move on.\n\nThe table1 package comes equipped with quite a few of these abbreviated codes, which makes life considerably easier. For instance if we needed to compute the 10th, 50th, and 90th percentiles of each continuous variable, we could use the `\"q10\"`, `\"q50\"`, and `\"q90\"` keywords, like so:\n\n\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g + sex | species, \n  data = penguins, \n  render.continuous = c(\n    \"10th percentile\" = \"q10\", \n    \"50th percentile\" = \"q50\",\n    \"90th percentile\" = \"q90\"\n  )\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>10th percentile</td>\n<td>181</td>\n<td>187</td>\n<td>209</td>\n<td>185</td>\n</tr>\n<tr>\n<td class='rowlabel'>50th percentile</td>\n<td>190</td>\n<td>196</td>\n<td>216</td>\n<td>197</td>\n</tr>\n<tr>\n<td class='rowlabel'>90th percentile</td>\n<td>198</td>\n<td>205</td>\n<td>228</td>\n<td>221</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>10th percentile</td>\n<td>3150</td>\n<td>3300</td>\n<td>4400</td>\n<td>3300</td>\n</tr>\n<tr>\n<td class='rowlabel'>50th percentile</td>\n<td>3700</td>\n<td>3700</td>\n<td>5000</td>\n<td>4050</td>\n</tr>\n<tr>\n<td class='rowlabel'>90th percentile</td>\n<td>4300</td>\n<td>4200</td>\n<td>5700</td>\n<td>5400</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Sex</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>female</td>\n<td>73 (48.0%)</td>\n<td>34 (50.0%)</td>\n<td>58 (46.8%)</td>\n<td>165 (48.0%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>male</td>\n<td>73 (48.0%)</td>\n<td>34 (50.0%)</td>\n<td>61 (49.2%)</td>\n<td>168 (48.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>6 (3.9%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>5 (4.0%)</td>\n<td class='lastrow'>11 (3.2%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\nVery handy. \n\n\n### Supported aliases\n\nThe natural question you might have as the user of the package is, of course, what abbreviated codes does the table1 package understand? As documented [here](https://benjaminrich.github.io/table1/vignettes/table1-examples.html#using-abbreviated-code-to-specify-a-custom-renderer) in the package vignette, you can find a complete listing by playing around with the `stats.default()` function.^[If you're a foolish person like I am you can also dig into the [source code](https://github.com/benjaminrich/table1/blob/master/R/table1.R) to find the answer, because why would I be smart and read the package vignette *before* reading the source code?] So let's do that. For continuous variables, this is the list of supported aliases:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontinuous <- 1:10\nnames(stats.default(continuous)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"N\"      \"NMISS\"  \"SUM\"    \"MEAN\"   \"SD\"     \"CV\"     \"GMEAN\"  \"GSD\"    \"GCV\"   \n[10] \"MEDIAN\" \"MIN\"    \"MAX\"    \"q01\"    \"q02.5\"  \"q05\"    \"q10\"    \"q25\"    \"q50\"   \n[19] \"q75\"    \"q90\"    \"q95\"    \"q97.5\"  \"q99\"    \"Q1\"     \"Q2\"     \"Q3\"     \"IQR\"   \n[28] \"T1\"     \"T2\"    \n```\n\n\n:::\n:::\n\n\nHere's what each of these mean:^[If you want a more precise answer, you can use a command like `parse.abbrev.render.code(\"GMEAN\")` to return the actual function that is executed whenever a `\"GMEAN\"` is computed during the table rendering process.]\n\n- `\"N\"`, `\"NMISS\"`: these compute the number of non-missing observations and number of missing observations respectively\n- `\"SUM\"`, `\"MEAN\"`, `\"SD\"`, `\"MEDIAN\"`, `\"MIN\"`, `\"MAX\"`: these all correspond to to the functions of the same name, e.g., `\"SUM\"` produces a call to `sum()`, with missing values removed\n- `\"CV\"`: the coefficient of variation, i.e., 100 times the standard deviation divided by the absolute value of the mean\n- `\"GMEAN\"`, `\"GSD\"`, `\"GCV\"`: the geometric mean, geometric standard deviation, and geometric coefficient of variation\n- `q01`, `q02.5`, `\"q05\"`, `\"q10\"`, `\"q25\"`, `\"q50\"`, `\"q75\"`, `\"q90\"`, `\"q95\"`, `\"q97.5\"`, `\"q99\"`: these are understood to refer to specific quantiles, e.g., `\"q25\"` is translated as a function call that computes the 25th percentile\n- `\"Q1\"`, `\"Q2\"` `\"Q3\"`: these are used to compute quartiles (25th, 50th, and 75th percentiles)\n- `\"T1\"`, `\"T2\"`: these are used to compute tertiles (33rd and 67th percentiles)\n- `\"IQR\"`: this computes the interquartile range\n\nIn all cases except for `\"NMISS\"`, the relevant statistics are computed after removing missing values. Turning now to categorical variables, we can again use the `stats.default()` function to find the supported abbreviated codes:^[If you're curious as to why I'm extracting the first element of the output in this code, try playing around with `stats.default()` and looking at the differences between how the output is structured for continuous versus categorical inputs.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncategorical <- c(\"a\", \"b\", \"c\")\nnames(stats.default(categorical)[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"FREQ\"    \"PCT\"     \"PCTnoNA\" \"NMISS\"  \n```\n\n\n:::\n:::\n\n\nThe interpretation of these is as follows:\n\n- `\"FREQ\"`: the frequency count for a category\n- `\"PCT\"`: the percent relative frequency, with missing values included in the denominator\n- `\"PCTnoNA\"`: the percent relative frequency, after missing values are removed\n- `\"NMISS\"`: the number of missing values, as before\n\nThe nice thing about these abbreviated codes is that they cover a surprisingly wide variety of use cases. More often than not I've found that the descriptive statistics I need can be specified using this mechanism. From the analyst perspective this is great: you really don't want to waste time writing more code than you have to, so if you can specify your table of descriptive statistics without bothering to write a function, you're doing well.\n\n![](hit-me-like-a-man.jpg)\n\n### Writing render functions\n\n> I am strong, love is evil <br>\n> It's a version of perversion that is only for the lucky people <br>\n> Take your time and do with me what you will <br>\n> I won't mind, you know I'm ill, you know I'm ill <br>\n> So hit me like a man <br>\n> And love me like a woman <br>\n> &nbsp; &nbsp; -- *[The Pretty Reckless](https://www.youtube.com/watch?v=Z6ZtYZiHong)*\n\nAlas life is not always kind to us, and it's not uncommon to run into situations where your table of descriptive statistics requires the computation of something that doesn't have an abbreviated code in table1. When that happens, the only recourse is for the user to write a rendering function that takes the data as input and returns a vector of strings to be printed into the table. As an example, suppose you have a need to report [Winsorised](https://en.wikipedia.org/wiki/Winsorizing) summary statistics for your continuous variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_winsorized <- function(x, cutoff = .05, ...) {\n  lo <- quantile(x, cutoff, na.rm = TRUE)\n  hi <- quantile(x, 1 - cutoff, na.rm = TRUE)\n  x[x < lo] <- lo\n  x[x > hi] <- hi\n  strs <- c(\n    \"\",\n    \"Winsorized mean\" = sprintf(\"%1.2f\", mean(x, na.rm = TRUE)),\n    \"Winsorized SD\" = sprintf(\"%1.2f\", sd(x, na.rm = TRUE))\n  )\n  return(strs)\n}\n```\n:::\n\n\nNotice that this `render_winsorized()` function returns a named vector of strings that follows the same convention that we followed with the simpler `render_geometric` example earlier: the names of the output string become the row labels, and the values are printed into the table itself. Along similar lines, we can define a rendering function to be applied to the categorical variables in the data. Here's a very simple one that reports only the absolute frequencies for each category:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_counts <- function(x, ...) c(\"\", table(stringr::str_to_title(x)))\n```\n:::\n\n\nHaving defined our render functions, we produce the desired table by passing `render_winsorized()` as the handler for continuous variables and `render_counts()` as the handler for categorical variables:\n\n\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g + sex | species, \n  data = penguins, \n  render.continuous = render_winsorized,\n  render.categorical = render_counts\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Winsorized mean</td>\n<td>189.91</td>\n<td>195.99</td>\n<td>217.23</td>\n<td>200.85</td>\n</tr>\n<tr>\n<td class='rowlabel'>Winsorized SD</td>\n<td>5.75</td>\n<td>6.43</td>\n<td>6.38</td>\n<td>13.52</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Winsorized mean</td>\n<td>3696.52</td>\n<td>3738.68</td>\n<td>5074.80</td>\n<td>4200.80</td>\n</tr>\n<tr>\n<td class='rowlabel'>Winsorized SD</td>\n<td>432.98</td>\n<td>336.76</td>\n<td>471.74</td>\n<td>765.82</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Sex</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Female</td>\n<td>73</td>\n<td>34</td>\n<td>58</td>\n<td>165</td>\n</tr>\n<tr>\n<td class='rowlabel'>Male</td>\n<td>73</td>\n<td>34</td>\n<td>61</td>\n<td>168</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>6 (3.9%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>5 (4.0%)</td>\n<td class='lastrow'>11 (3.2%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\nOur table is mostly done, but we still don't have a method for adjusting how the missing data summaries are produced. To do that we need to define one more rendering function and pass it as the `render.missing` argument:\n\n\n\n```{.r .cell-code}\nrender_missing <- function(x, ...) c(\"Missing\" = sum(is.na(x)))\n\ntable1(\n  x = ~ flipper_length_mm + body_mass_g + sex | species, \n  data = penguins, \n  render.continuous = render_winsorized,\n  render.categorical = render_counts,\n  render.missing = render_missing\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Winsorized mean</td>\n<td>189.91</td>\n<td>195.99</td>\n<td>217.23</td>\n<td>200.85</td>\n</tr>\n<tr>\n<td class='rowlabel'>Winsorized SD</td>\n<td>5.75</td>\n<td>6.43</td>\n<td>6.38</td>\n<td>13.52</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1</td>\n<td class='lastrow'>0</td>\n<td class='lastrow'>1</td>\n<td class='lastrow'>2</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Winsorized mean</td>\n<td>3696.52</td>\n<td>3738.68</td>\n<td>5074.80</td>\n<td>4200.80</td>\n</tr>\n<tr>\n<td class='rowlabel'>Winsorized SD</td>\n<td>432.98</td>\n<td>336.76</td>\n<td>471.74</td>\n<td>765.82</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1</td>\n<td class='lastrow'>0</td>\n<td class='lastrow'>1</td>\n<td class='lastrow'>2</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Sex</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Female</td>\n<td>73</td>\n<td>34</td>\n<td>58</td>\n<td>165</td>\n</tr>\n<tr>\n<td class='rowlabel'>Male</td>\n<td>73</td>\n<td>34</td>\n<td>61</td>\n<td>168</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>6</td>\n<td class='lastrow'>0</td>\n<td class='lastrow'>5</td>\n<td class='lastrow'>11</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n### Unpacking render functions\n\nThere's still a bit of a mystery here, because the `table1()` function doesn't have arguments `render.continuous`, `render.categorical`, or `render.missing`: instead, it has a `render` argument. What's actually going on here is that the default value for `render` is the `render.default()` function exported by table1, and `render.default()` accepts `render.continuous`, `render.categorical`, or `render.missing` as arguments. In other words, what's happening in the code above is that my custom functions end up being passed to `render.default()` via the dots. \n\nThere's nothing to prevent you from bypassing this whole process by writing your own render function that handles *all* the input variables. For example, here's a very simple rendering function that counts the number of non-missing observations, and prints it in the same row as the variable name:\n\n\n\n```{.r .cell-code}\nrender_n <- function(x, ...) sum(!is.na(x))\n\ntable1(\n  x = ~ flipper_length_mm + body_mass_g + sex | species, \n  data = penguins, \n  render = render_n\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow lastrow'>Flipper Length (mm)</td>\n<td class='firstrow lastrow'>151</td>\n<td class='firstrow lastrow'>68</td>\n<td class='firstrow lastrow'>123</td>\n<td class='firstrow lastrow'>342</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow lastrow'>Body Mass (g)</td>\n<td class='firstrow lastrow'>151</td>\n<td class='firstrow lastrow'>68</td>\n<td class='firstrow lastrow'>123</td>\n<td class='firstrow lastrow'>342</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow lastrow'>Sex</td>\n<td class='firstrow lastrow'>146</td>\n<td class='firstrow lastrow'>68</td>\n<td class='firstrow lastrow'>119</td>\n<td class='firstrow lastrow'>333</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\nI have to confess it took me waaaaay too long to realise that I could do this in table1. True, I don't often have a need to bypass the `render.default()` function, but there are definitely times when that's a handy little bit of functionality. Sigh. Sometimes I'm quite dense. \n\n![](follow-me-down.jpg)\n\n## Table annotations\n\n> Follow me down to the river <br>\n> Drink while the water is clean <br>\n> Follow me down to the river tonight <br>\n> I'll be down here on my knees <br>\n> &nbsp; &nbsp; --*[The Pretty Reckless](https://www.youtube.com/watch?v=vfwJ-SoYw4U)*\n\nTime to switch gears a little. In the previous section I talked about how to customise the statistics that are reported in the table cells. Implicit in this discussion is the fact that a custom render function allows you to customise the row labels associated with each statistic, in exactly the same way that variable labels allow you to customise the variable descriptions that appear in the leftmost column of the table. Taken together, these two mechanisms (render functions and variable labels) give the user a *lot* of control over what appears in the leftmost column of the table. But what about the header row? How do we customise that in table1?\n\n\n### Strata column labels\n\n\n\n```{.r .cell-code}\nrender_strat <- function(label, n, transpose = FALSE) {\n  sprintf(\"<span class='stratlabel'>%s</span>\", label)\n}\n\ntable1(\n  x = ~ flipper_length_mm + body_mass_g | species,\n  data = penguins,\n  render.strat = render_strat\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>190 (6.54)</td>\n<td>196 (7.13)</td>\n<td>217 (6.48)</td>\n<td>201 (14.1)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>190 [172, 210]</td>\n<td>196 [178, 212]</td>\n<td>216 [203, 231]</td>\n<td>197 [172, 231]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>3700 (459)</td>\n<td>3730 (384)</td>\n<td>5080 (504)</td>\n<td>4200 (802)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>3700 [2850, 4780]</td>\n<td>3700 [2700, 4800]</td>\n<td>5000 [3950, 6300]</td>\n<td>4050 [2700, 6300]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n### Other column labels\n\n\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g | species,\n  data = penguins,\n  overall = \"All Species\",\n  rowlabelhead = \"Measurement\"\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'>Measurement</th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>All Species<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>190 (6.54)</td>\n<td>196 (7.13)</td>\n<td>217 (6.48)</td>\n<td>201 (14.1)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>190 [172, 210]</td>\n<td>196 [178, 212]</td>\n<td>216 [203, 231]</td>\n<td>197 [172, 231]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>3700 (459)</td>\n<td>3730 (384)</td>\n<td>5080 (504)</td>\n<td>4200 (802)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>3700 [2850, 4780]</td>\n<td>3700 [2700, 4800]</td>\n<td>5000 [3950, 6300]</td>\n<td>4050 [2700, 6300]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n### Footnotes\n\n\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g | species,\n  data = penguins,\n  footnote = \"Created using table1 and palmerpenguins\"\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n<tfoot><tr><td colspan=\"5\" class=\"Rtable1-footnote\"><p>Created using table1 and palmerpenguins</p>\n</td></tr></tfoot>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>190 (6.54)</td>\n<td>196 (7.13)</td>\n<td>217 (6.48)</td>\n<td>201 (14.1)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>190 [172, 210]</td>\n<td>196 [178, 212]</td>\n<td>216 [203, 231]</td>\n<td>197 [172, 231]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>3700 (459)</td>\n<td>3730 (384)</td>\n<td>5080 (504)</td>\n<td>4200 (802)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>3700 [2850, 4780]</td>\n<td>3700 [2700, 4800]</td>\n<td>5000 [3950, 6300]</td>\n<td>4050 [2700, 6300]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n### Captions\n\n\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g | species,\n  data = penguins,\n  caption = \"Flipper length and body mass by species among the Palmer penguins\"\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\"><caption>Flipper length and body mass by species among the Palmer penguins</caption>\n\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>190 (6.54)</td>\n<td>196 (7.13)</td>\n<td>217 (6.48)</td>\n<td>201 (14.1)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>190 [172, 210]</td>\n<td>196 [178, 212]</td>\n<td>216 [203, 231]</td>\n<td>197 [172, 231]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>3700 (459)</td>\n<td>3730 (384)</td>\n<td>5080 (504)</td>\n<td>4200 (802)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>3700 [2850, 4780]</td>\n<td>3700 [2700, 4800]</td>\n<td>5000 [3950, 6300]</td>\n<td>4050 [2700, 6300]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n<td class='lastrow'>2 (0.6%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n## Table structure\n\n### Removing \"overall\"\n\n\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g | species,\n  data = penguins,\n  overall = FALSE\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>190 (6.54)</td>\n<td>196 (7.13)</td>\n<td>217 (6.48)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>190 [172, 210]</td>\n<td>196 [178, 212]</td>\n<td>216 [203, 231]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>3700 (459)</td>\n<td>3730 (384)</td>\n<td>5080 (504)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>3700 [2850, 4780]</td>\n<td>3700 [2700, 4800]</td>\n<td>5000 [3950, 6300]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>1 (0.7%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n### Nested stratifications\n\n\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g | species * island,\n  data = penguins,\n  overall = FALSE\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class=\"grouplabel\"></th>\n<th colspan=\"3\" class=\"grouplabel\"><div>Adelie</div></th>\n<th colspan=\"1\" class=\"grouplabel\"><div>Chinstrap</div></th>\n<th colspan=\"1\" class=\"grouplabel\"><div>Gentoo</div></th>\n</tr>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Biscoe<br><span class='stratn'>(N=44)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Dream<br><span class='stratn'>(N=56)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Torgersen<br><span class='stratn'>(N=52)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Dream<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Biscoe<br><span class='stratn'>(N=124)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Flipper Length (mm)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>189 (6.73)</td>\n<td>190 (6.59)</td>\n<td>191 (6.23)</td>\n<td>196 (7.13)</td>\n<td>217 (6.48)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>190 [172, 203]</td>\n<td>190 [178, 208]</td>\n<td>191 [176, 210]</td>\n<td>196 [178, 212]</td>\n<td>216 [203, 231]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (1.9%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Body Mass (g)</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Mean (SD)</td>\n<td>3710 (488)</td>\n<td>3690 (455)</td>\n<td>3710 (445)</td>\n<td>3730 (384)</td>\n<td>5080 (504)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Median [Min, Max]</td>\n<td>3750 [2850, 4780]</td>\n<td>3580 [2900, 4650]</td>\n<td>3700 [2900, 4700]</td>\n<td>3700 [2700, 4800]</td>\n<td>5000 [3950, 6300]</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Missing</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (1.9%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>1 (0.8%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n### Adding extra columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_p_value <- function(x, ...) {\n  dat <- bind_rows(\n    purrr::map(x, ~ data.frame(value = .)), \n    .id = \"group\"\n  )\n  mod <- aov(value ~ group, dat)\n  p <- summary(mod)[[1]][1, 5]\n  return(scales::label_pvalue()(p))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_mean <- function(x, ...) {\n  as.character(round(mean(x, na.rm = TRUE)))\n}\n```\n:::\n\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g | species,\n  data = penguins,\n  render = render_mean,\n  extra.col = list(\"p-value\" = render_p_value)\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall<br><span class='stratn'>(N=344)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>p-value</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow lastrow'>Flipper Length (mm)</td>\n<td class='firstrow lastrow'>190</td>\n<td class='firstrow lastrow'>196</td>\n<td class='firstrow lastrow'>217</td>\n<td class='firstrow lastrow'>201</td>\n<td class='firstrow lastrow'><0.001</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow lastrow'>Body Mass (g)</td>\n<td class='firstrow lastrow'>3701</td>\n<td class='firstrow lastrow'>3733</td>\n<td class='firstrow lastrow'>5076</td>\n<td class='firstrow lastrow'>4202</td>\n<td class='firstrow lastrow'><0.001</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n### Transposing tables\n\n\n\n```{.r .cell-code}\nrender_mean_sd <- function(x, ...) {\n  m <- mean(x, na.rm = TRUE)\n  s <- sd(x, na.rm = TRUE)\n  sprintf(\"%1.1f (%1.1f)\", m, s)\n}\n\ntable1(\n  x = ~ bill_length_mm + bill_depth_mm + flipper_length_mm + body_mass_g | species,\n  data = penguins,\n  transpose = TRUE,\n  rowlabelhead = \"Species\",\n  render = render_mean_sd,\n  render.strat = render_strat\n)\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'>Species</th>\n<th class='firstrow lastrow'>Bill Length (mm)</th>\n<th class='firstrow lastrow'>Bill Depth (mm)</th>\n<th class='firstrow lastrow'>Flipper Length (mm)</th>\n<th class='firstrow lastrow'>Body Mass (g)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow lastrow'><span class='stratlabel'>Adelie</span></td>\n<td class='firstrow lastrow'>38.8 (2.7)</td>\n<td class='firstrow lastrow'>18.3 (1.2)</td>\n<td class='firstrow lastrow'>190.0 (6.5)</td>\n<td class='firstrow lastrow'>3700.7 (458.6)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow lastrow'><span class='stratlabel'>Chinstrap</span></td>\n<td class='firstrow lastrow'>48.8 (3.3)</td>\n<td class='firstrow lastrow'>18.4 (1.1)</td>\n<td class='firstrow lastrow'>195.8 (7.1)</td>\n<td class='firstrow lastrow'>3733.1 (384.3)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow lastrow'><span class='stratlabel'>Gentoo</span></td>\n<td class='firstrow lastrow'>47.5 (3.1)</td>\n<td class='firstrow lastrow'>15.0 (1.0)</td>\n<td class='firstrow lastrow'>217.2 (6.5)</td>\n<td class='firstrow lastrow'>5076.0 (504.1)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow lastrow'><span class='stratlabel'>Overall</span></td>\n<td class='firstrow lastrow'>43.9 (5.5)</td>\n<td class='firstrow lastrow'>17.2 (2.0)</td>\n<td class='firstrow lastrow'>200.9 (14.1)</td>\n<td class='firstrow lastrow'>4201.8 (802.0)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n### Arbitrary stratification\n\n> Why'd you bring a shotgun to the party? <br>\n> &nbsp; &nbsp; --[*The Pretty Reckless*](https://www.youtube.com/watch?v=PYxd8gh7g_k)\n\nUsing the data frame interface we can exercise finer-grained control over the strata.\n\n\n\n```{.r .cell-code}\npenguins <- penguins |>\n  mutate(\n    sex = stringr::str_to_title(sex),\n    year = factor(year)\n  )\n\npenguins_strata <- c(\n    split(penguins, ~species), \n    split(penguins, ~sex),\n    list(\"All\" = penguins)\n  )\n\npenguins_labels <- list(\n    variables = list(island = \"Island\", year = \"Year\"), \n    groups = list(\"Species\", \"Sex\", \"\")\n  )\n\ntable1(penguins_strata, penguins_labels, groupspan = c(3, 2, 1))\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1\">\n<thead>\n<tr>\n<th class=\"grouplabel\"></th>\n<th colspan=\"3\" class=\"grouplabel\"><div>Species</div></th>\n<th colspan=\"2\" class=\"grouplabel\"><div>Sex</div></th>\n<th colspan=\"1\" class=\"grouplabel\"></th>\n</tr>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie<br><span class='stratn'>(N=152)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap<br><span class='stratn'>(N=68)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo<br><span class='stratn'>(N=124)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Female<br><span class='stratn'>(N=165)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Male<br><span class='stratn'>(N=168)</span></span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>All<br><span class='stratn'>(N=344)</span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow'>Island</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>Biscoe</td>\n<td>44 (28.9%)</td>\n<td>0 (0%)</td>\n<td>124 (100%)</td>\n<td>80 (48.5%)</td>\n<td>83 (49.4%)</td>\n<td>168 (48.8%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>Dream</td>\n<td>56 (36.8%)</td>\n<td>68 (100%)</td>\n<td>0 (0%)</td>\n<td>61 (37.0%)</td>\n<td>62 (36.9%)</td>\n<td>124 (36.0%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>Torgersen</td>\n<td class='lastrow'>52 (34.2%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>0 (0%)</td>\n<td class='lastrow'>24 (14.5%)</td>\n<td class='lastrow'>23 (13.7%)</td>\n<td class='lastrow'>52 (15.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow'>Year</td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n<td class='firstrow'></td>\n</tr>\n<tr>\n<td class='rowlabel'>2007</td>\n<td>50 (32.9%)</td>\n<td>26 (38.2%)</td>\n<td>34 (27.4%)</td>\n<td>51 (30.9%)</td>\n<td>52 (31.0%)</td>\n<td>110 (32.0%)</td>\n</tr>\n<tr>\n<td class='rowlabel'>2008</td>\n<td>50 (32.9%)</td>\n<td>18 (26.5%)</td>\n<td>46 (37.1%)</td>\n<td>56 (33.9%)</td>\n<td>57 (33.9%)</td>\n<td>114 (33.1%)</td>\n</tr>\n<tr>\n<td class='rowlabel lastrow'>2009</td>\n<td class='lastrow'>52 (34.2%)</td>\n<td class='lastrow'>24 (35.3%)</td>\n<td class='lastrow'>44 (35.5%)</td>\n<td class='lastrow'>58 (35.2%)</td>\n<td class='lastrow'>59 (35.1%)</td>\n<td class='lastrow'>120 (34.9%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n## Styling tables\n\n### Built-in styles\n\nThere are a few built-in styles, discussed in the package vignette:\n\n- `zebra`: alternating shaded and unshaded rows\n- `grid`: show all grid lines\n- `shade`: shade the header in gray\n- `times`: use a serif font\n- `center`: center all columns\n\nSelecting a style using the `topclass` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g | species,\n  data = penguins,\n  topclass = \"Rtable1-zebra\",\n  render = render_mean,\n  render.strat = render_strat,\n  footnote = \"Source: palmerpenguins\"\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1-zebra\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall</span></th>\n</tr>\n<tfoot><tr><td colspan=\"5\" class=\"Rtable1-footnote\"><p>Source: palmerpenguins</p>\n</td></tr></tfoot>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow lastrow'>Flipper Length (mm)</td>\n<td class='firstrow lastrow'>190</td>\n<td class='firstrow lastrow'>196</td>\n<td class='firstrow lastrow'>217</td>\n<td class='firstrow lastrow'>201</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow lastrow'>Body Mass (g)</td>\n<td class='firstrow lastrow'>3701</td>\n<td class='firstrow lastrow'>3733</td>\n<td class='firstrow lastrow'>5076</td>\n<td class='firstrow lastrow'>4202</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable1(\n  x = ~ flipper_length_mm + body_mass_g | species,\n  data = penguins,\n  topclass = \"Rtable1-zebra Rtable1-shade Rtable1-times\",\n  render = render_mean,\n  render.strat = render_strat,\n  footnote = \"Source: palmerpenguins\"\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"Rtable1-zebra Rtable1-shade Rtable1-times\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall</span></th>\n</tr>\n<tfoot><tr><td colspan=\"5\" class=\"Rtable1-footnote\"><p>Source: palmerpenguins</p>\n</td></tr></tfoot>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow lastrow'>Flipper Length (mm)</td>\n<td class='firstrow lastrow'>190</td>\n<td class='firstrow lastrow'>196</td>\n<td class='firstrow lastrow'>217</td>\n<td class='firstrow lastrow'>201</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow lastrow'>Body Mass (g)</td>\n<td class='firstrow lastrow'>3701</td>\n<td class='firstrow lastrow'>3733</td>\n<td class='firstrow lastrow'>5076</td>\n<td class='firstrow lastrow'>4202</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n### Using custom CSS\n\n> Signed with the devil <br>\n> Signed with the devil <br>\n> Signed with the devil, oh <br>\n> &nbsp; &nbsp; --*[The Pretty Reckless](https://www.youtube.com/watch?v=BQpZv2r8fb4)*\n\nHere's the HTML that gets generated for a table:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl <- table1(\n  x = ~ flipper_length_mm + body_mass_g | species,\n  data = penguins,\n  topclass = \"mytable\",\n  render = render_mean,\n  render.strat = render_strat,\n  footnote = \"Source: palmerpenguins\"\n)\n\ncat(as.character(tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<table class=\"mytable\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall</span></th>\n</tr>\n<tfoot><tr><td colspan=\"5\" class=\"Rtable1-footnote\"><p>Source: palmerpenguins</p>\n</td></tr></tfoot>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow lastrow'>Flipper Length (mm)</td>\n<td class='firstrow lastrow'>190</td>\n<td class='firstrow lastrow'>196</td>\n<td class='firstrow lastrow'>217</td>\n<td class='firstrow lastrow'>201</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow lastrow'>Body Mass (g)</td>\n<td class='firstrow lastrow'>3701</td>\n<td class='firstrow lastrow'>3733</td>\n<td class='firstrow lastrow'>5076</td>\n<td class='firstrow lastrow'>4202</td>\n</tr>\n</tbody>\n</table>\n```\n\n\n:::\n:::\n\n\nSo we can add a bit of custom CSS like so:\n\n```css\n.mytable {\n  .Rtable1-footnote {\n    font-style: italic;\n  }\n  .stratlabel {\n    color: hotpink\n  }\n}\n```\n\nNow the result looks like this:\n\n\n\n```{.r .cell-code}\ntbl\n```\n\n```{=html}\n<div class=\"Rtable1\"><table class=\"mytable\">\n<thead>\n<tr>\n<th class='rowlabel firstrow lastrow'></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Adelie</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Chinstrap</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Gentoo</span></th>\n<th class='firstrow lastrow'><span class='stratlabel'>Overall</span></th>\n</tr>\n<tfoot><tr><td colspan=\"5\" class=\"Rtable1-footnote\"><p>Source: palmerpenguins</p>\n</td></tr></tfoot>\n</thead>\n<tbody>\n<tr>\n<td class='rowlabel firstrow lastrow'>Flipper Length (mm)</td>\n<td class='firstrow lastrow'>190</td>\n<td class='firstrow lastrow'>196</td>\n<td class='firstrow lastrow'>217</td>\n<td class='firstrow lastrow'>201</td>\n</tr>\n<tr>\n<td class='rowlabel firstrow lastrow'>Body Mass (g)</td>\n<td class='firstrow lastrow'>3701</td>\n<td class='firstrow lastrow'>3733</td>\n<td class='firstrow lastrow'>5076</td>\n<td class='firstrow lastrow'>4202</td>\n</tr>\n</tbody>\n</table>\n</div>\n```\n\n\n<br>\n\n![](take-me-down.jpg)\n\n## Epilogue\n\nIn the process of writing this post I discovered that The Pretty Reckless have recorded a [cover](https://www.youtube.com/watch?v=PJ9Xy3RJoOA) of \"Champagne Supernova\" and I cannot stop laughing. It's good to laugh again.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/table1-1.0/table1_defaults.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}