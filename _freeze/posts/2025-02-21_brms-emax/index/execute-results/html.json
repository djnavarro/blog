{
  "hash": "52f5d91de28b3171d76d615be6538129",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bayesian Emax regression using brms\"\ndescription: \"This is a subtitle\"\ndate: \"2025-02-21\"\n--- \n\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(brms)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(tidybayes)\n```\n:::\n\n\n\nLetting $x_i$ denote the observed exposure for the $i$-th subject, and letting $y_i$ denote the observed response, the form of the Emax model for a continuous-valued response is typically written as the following nonlinear regression model:\n\n$$\ny_i = E_0 + E_{max} \\frac{x_i^\\gamma}{EC_{50}^\\gamma + x_i^\\gamma} + \\epsilon_i \n$$\n\nwhere we typically assume iid normal residual error, $\\epsilon_i \\sim \\mbox{Normal}(0, \\sigma^2)$. This model has five parameters that need to be estimated:\n\n- $E_0$ is an intercept term and represents the baseline response when drug exposure is zero\n- $E_{max}$ is an asymptote term and defines the maximum change from baseline as the drug exposure becomes arbitrarily large\n- $EC_{50}$ is a location parameter, and defines the exposure level at which the change from baseline is 50% of the maximum possible change\n- $\\gamma$ is the \"Hill coefficient\" that describes the steepness of the response curve. It is not uncommon to fix $\\gamma = 1$ in Emax modelling, and I'll start by doing that\n- $\\sigma^2$ is the residual variance used to describe the level of measurement error in the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemax_fn <- function(exposure, emax, ec50, e0, gamma = 1, ...) {\n  e0 + emax * (exposure ^ gamma) / (ec50 ^ gamma + exposure ^ gamma)\n}\n```\n:::\n\n\n\n## Continuous response\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_exposure <- function(dose, n, meanlog = 4, sdlog = 0.5) {\n  dose * qlnorm(\n    p = runif(n, min = .01, max = .99), \n    meanlog = meanlog,\n    sdlog = sdlog\n  )\n}\n\ngenerate_covariate <- function(n) {\n  rbeta(n, 2, 2) * 10\n}\n\nmake_data <- function(dose, n, par) {\n  tibble(\n    dose = dose, \n    exposure = generate_exposure(max(dose, .01), n = n), \n    cov_a = generate_covariate(n = n),\n    cov_b = generate_covariate(n = n),\n    cov_c = generate_covariate(n = n),\n    response = emax_fn(\n      exposure,\n      emax = par$emax, \n      ec50 = par$ec50, \n      e0 = par$e0, \n      gamma = par$gamma\n    ) + \n      par$coef_a * cov_a + \n      par$coef_b * cov_b + \n      par$coef_c * cov_c + \n      rnorm(n, 0, par$sigma)\n  )\n}\n\npar <- list(\n  emax   = 10, \n  ec50   = 4000, \n  e0     = 5,\n  gamma  = 1,\n  sigma  = .6,\n  coef_a = .3,\n  coef_b = .2,\n  coef_c = 0\n)\n\ndat <- bind_rows(\n  make_data(dose = 100, n = 100, par = par),  \n  make_data(dose = 200, n = 100, par = par),\n  make_data(dose = 300, n = 100, par = par)\n) \n```\n:::\n\n\n\nThe data frame for our continuous response scenario looks like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 300 × 6\n    dose exposure cov_a cov_b cov_c response\n   <dbl>    <dbl> <dbl> <dbl> <dbl>    <dbl>\n 1   100    4020.  6.11  1.36  3.91     11.8\n 2   100    4654.  3.31  2.18  4.20     11.0\n 3   100    5974.  5.96  7.65  7.31     14.1\n 4   100   10364.  2.06  3.29  5.76     13.7\n 5   100    3633.  8.54  1.55  3.82     12.1\n 6   100   10093.  3.97  9.20  1.93     15.2\n 7   100   11676.  2.25  6.19  4.07     13.7\n 8   100    6688.  6.58  4.33  2.49     14.1\n 9   100    6416.  4.62  7.78  4.27     14.2\n10   100    2616.  4.89  7.38  6.10     11.8\n# ℹ 290 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat |> \n  pivot_longer(\n    cols = c(exposure, cov_a, cov_b, cov_c), \n    names_to = \"variable\",\n    values_to = \"value\"\n  ) |> \n  ggplot(aes(value, response)) + \n  geom_point() + \n  geom_smooth(formula = y ~ x, method = \"loess\") + \n  facet_wrap(~ variable, scales = \"free_x\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n\n### Simple Emax regression\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- brm(\n  formula = brmsformula(\n    response ~ e0 + emax * exposure / (ec50 + exposure),\n    e0 + emax + ec50 ~ 1,\n    nl = TRUE\n  ),\n  family = gaussian(),\n  data = dat,\n  prior = c(\n    prior(normal(0, 5), nlpar = \"e0\"),\n    prior(normal(0, 5), nlpar = \"emax\"),\n    prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n  )\n)\n```\n:::\n\n\n\nPrint the model object:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n   Data: dat (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       5.36      1.06     2.95     7.10 1.00      866      923\nemax_Intercept    11.70      1.03     9.98    13.98 1.00      902      977\nec50_Intercept  2690.29    408.09  1908.78  3514.41 1.00      947     1156\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.06      0.04     0.97     1.15 1.00     1749     1874\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nepred_mod <- mod |> \n  epred_draws(newdata = tibble(exposure = seq(0, 50000, 1000))) |> \n  ungroup() |> \n  summarize(response = mean(.epred), .by = exposure)\n\nepred_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51 × 2\n   exposure response\n      <dbl>    <dbl>\n 1        0     5.36\n 2     1000     8.60\n 3     2000    10.4 \n 4     3000    11.6 \n 5     4000    12.4 \n 6     5000    13.0 \n 7     6000    13.5 \n 8     7000    13.8 \n 9     8000    14.1 \n10     9000    14.4 \n# ℹ 41 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mapping = aes(exposure, response)) + \n  geom_path(data = epred_mod) + \n  geom_point(data = dat) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nBut notice, we are missing the effect of covariates. If we colour the data points by the value of `cov_a`, we can see this very clearly:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mapping = aes(exposure, response)) + \n  geom_path(data = epred_mod) + \n  geom_point(mapping = aes(color = cov_a), data = dat) + \n  scale_color_distiller(palette = \"PuOr\", limits = c(0, 10)) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n## old\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- BayesERtools::d_sim_binom_cov_hgly2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- brm(\n  formula = brmsformula(\n    AEFLAG ~ e0 + emax * AUCss / (ec50 + AUCss),\n    e0 + emax + ec50 ~ 1,\n    nl = TRUE\n  ),\n  family = bernoulli(),\n  data = dat,\n  prior = c(\n    prior(normal(0, 5), nlpar = \"e0\"),\n    prior(normal(0, 5), nlpar = \"emax\"),\n    prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n  )\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod |>\n  epred_draws(newdata = tibble(AUCss = seq(0, 10000, 100))) |>\n  ungroup() |>\n  summarise(AEPROB = mean(.epred), .by = AUCss) |> \n  ggplot(aes(AUCss, AEPROB)) + \n  geom_path() + \n  geom_jitter(\n    mapping = aes(AUCss, AEFLAG), \n    data = dat |> mutate(AEFLAG = ifelse(AEFLAG == 1, 1.125, -0.125)), \n    height = 0.075, \n    width = 0\n  ) +\n  scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(-0.2, 1.2)) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}