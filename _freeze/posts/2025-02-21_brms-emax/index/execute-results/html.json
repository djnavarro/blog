{
  "hash": "025119b48c313df597f7e357540cbc3b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bayesian Emax regression using brms\"\ndescription: \"This is a draft post, please do not cite or share yet\"\ndate: \"2025-02-21\"\n--- \n\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(brms)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(tidybayes)\n```\n:::\n\n\n\nLetting $x_i$ denote the observed exposure for the $i$-th subject, and letting $y_i$ denote the observed response, the form of the Emax model for a continuous-valued response is typically written as the following nonlinear regression model:\n\n$$\ny_i = E_0 + E_{max} \\frac{x_i^\\gamma}{EC_{50}^\\gamma + x_i^\\gamma} + \\epsilon_i \n$$\n\nwhere we typically assume iid normal residual error, $\\epsilon_i \\sim \\mbox{Normal}(0, \\sigma^2)$. This model has five parameters that need to be estimated:\n\n- $E_0$ is an intercept term and represents the baseline response when drug exposure is zero\n- $E_{max}$ is an asymptote term and defines the maximum change from baseline as the drug exposure becomes arbitrarily large\n- $EC_{50}$ is a location parameter, and defines the exposure level at which the change from baseline is 50% of the maximum possible change\n- $\\gamma$ is the \"Hill coefficient\" that describes the steepness of the response curve. It is not uncommon to fix $\\gamma = 1$ in Emax modelling, and I'll start by doing that\n- $\\sigma^2$ is the residual variance used to describe the level of measurement error in the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemax_fn <- function(exposure, emax, ec50, e0, gamma = 1, ...) {\n  e0 + emax * (exposure ^ gamma) / (ec50 ^ gamma + exposure ^ gamma)\n}\n```\n:::\n\n\n\n## Continuous response\n\nFirst we need a data set. Simulating semi-plausible data sets for exposure-response analysis isn't easy when you don't have a fully specified pharmacokinetic model under the hood, but with a few simplifying assumptions it's not terrible. Luckily I talked about this in [an earlier blog post about emax regression](/posts/2024-11-11_emax-parameters/) so I won't repeat myself. Instead, I'll just wrap everything in a `generate_data()` function, and hide the code here:\n\n::: {.callout-caution collapse=\"true\" appearance=\"minimal\" title=\"Click to see the code\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_data <- function(seed = 123) {\n  \n  set.seed(seed)\n  \n  # exposures are assumed to be slightly-truncated log-normal distributed\n  # variates, and scale linearly with dose\n  generate_exposure <- function(dose, n, meanlog = 4, sdlog = 0.5) {\n    dose * qlnorm(\n      p = runif(n, min = .01, max = .99), \n      meanlog = meanlog,\n      sdlog = sdlog\n    )\n  }\n  \n  # for simplicity, continuous covariates presumed to be \n  generate_covariate <- function(n) {\n    rbeta(n, 2, 2) * 10\n  }\n  \n  make_data <- function(dose, n, par) {\n    tibble(\n      \n      # exposure depends on dose, of course\n      dose = dose, \n      exposure = generate_exposure(max(dose, .01), n = n), \n      \n      # covariates\n      cov_a = generate_covariate(n = n),\n      cov_b = generate_covariate(n = n),\n      cov_c = generate_covariate(n = n),\n      \n      # response is an emax function of exposure plus covariate model\n      response = emax_fn(\n        exposure,\n        emax = par$emax, \n        ec50 = par$ec50, \n        e0 = par$e0, \n        gamma = par$gamma\n      ) + \n        par$coef_a * cov_a + \n        par$coef_b * cov_b + \n        par$coef_c * cov_c + \n        rnorm(n, 0, par$sigma)\n    )\n  }\n  \n  # parameters governing the whole thing\n  par <- list(\n    emax   = 10, \n    ec50   = 4000, \n    e0     = 5,\n    gamma  = 1,\n    sigma  = .6,\n    coef_a = .3,\n    coef_b = .2,\n    coef_c = 0\n  )\n  \n  # simulate a simple experiment with three dose groups\n  dat <- bind_rows(\n    make_data(dose = 100, n = 100, par = par),  \n    make_data(dose = 200, n = 100, par = par),\n    make_data(dose = 300, n = 100, par = par)\n  ) \n  \n  return(dat)\n}\n```\n:::\n\n\n\n:::\n\nWithout further ado, here's a data set we can use for Emax regression with a continuous response variable, and three continuous covariates:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- generate_data()\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 300 × 6\n    dose exposure cov_a cov_b cov_c response\n   <dbl>    <dbl> <dbl> <dbl> <dbl>    <dbl>\n 1   100    4151.  5.71  2.33  7.83     13.8\n 2   100    8067.  4.92  4.66  6.74     14.0\n 3   100    4878.  4.88  4.21  4.68     13.2\n 4   100    9713.  8.42  6.56  1.29     16.1\n 5   100   11491.  4.37  3.96  3.55     15.1\n 6   100    2452.  8.69  7.60  3.64     13.4\n 7   100    5652.  6.61  3.95  5.13     13.5\n 8   100    9939.  5.35  7.77  8.29     15.5\n 9   100    5817.  5.61  2.24  9.60     12.5\n10   100    5176.  6.06  1.79  8.74     13.3\n# ℹ 290 more rows\n```\n\n\n:::\n:::\n\n\n\nThe easiest way to see what's going on in this data set is to plot `response` as a function of `exposure`, as well as the three covariates `cov_a`, `cov_b`, and `cov_c`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat |> \n  pivot_longer(\n    cols = c(exposure, cov_a, cov_b, cov_c), \n    names_to = \"variable\",\n    values_to = \"value\"\n  ) |> \n  ggplot(aes(value, response)) + \n  geom_point() + \n  geom_smooth(formula = y ~ x, method = \"loess\") + \n  facet_wrap(~ variable, scales = \"free_x\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n\nAt a quick glance it's clear that `exposure` is related to `response` (as one would hope), but there's also a fairly obvious that the response is related to `cov_a` and possibly also `cov_b`\n\n### Simple Emax regression\n\nSpecify the model. The first step is describing the nonlinear predictor function using `brmsformula()`, or just `bf()` if we want to use the shorthand:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure),\n  e0 ~ 1,\n  emax ~ 1,\n  ec50 ~ 1,\n  nl = TRUE\n) \n```\n:::\n\n\n\nThere are a few important things to note here. \n\n- First, notice that we've set `nl = TRUE`. This is important because the syntax for a nonlinear model formula is qualitatively different to the syntax for a linear model formula. For linear models, we use the compact syntax where the model parameters (i.e., the regression coefficients) are *implicit*, like `y ~ x1 + x2` corresponds to the regression model $y_i = b_0 + b_1 x_1 + b_2 x_2$. For nonlinear models, this approach won't work because brms has no way to know the form of the model. So we have to be *explicit* and include the parameters (in this case `e0`, `emax`, and `ec50`) in the model formula.\n\n- Second, note that I explicitly included formulas `e0 ~ 1`, `emax ~ 1`, and `ec50 ~ 1` in the model specification. This serves two purposes. First, it tells brms that `e0`, `emax` and `ec50` should be interpreted as model parameters (and brms will expect a prior for these parameters), whereas `exposure` should be treated as a predictor (brms will look for it in the data set).\n\n- Third, be aware that the formula notation like `e0 ~ 1` is not arbitrary. In this particular model, `e0` will be treated like an \"intercept\" parameter: it's a single parameter and doesn't have a covariate model or any random effects attached to it. I'll come back to this later, but for now let's just be aware of this because you'll see this pop up in the output later.\n\nOkay, let's get back on track. \n\nThe second step is specifying the error model and link function. In an Emax regression with continuous response variables, we typically adopt the same approach we would do in an ordinary linear regression, and assume that measurement errors are normally distributed with an identity link:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasurement_model <- brmsfamily(\n  family = \"gaussian\", \n  link = \"identity\"\n)\n```\n:::\n\n\n\nFinally we need to specify priors. By default brms uses an improper flat prior for regression terms, but that's not usually the best approach and (at least in my experience) can misbehave when you have a nonlinear model such as Emax. In addition, since the `e0` and `emax` variables are interpreted on the same scale as `response`, and `ec50` is interpreted on the same scale as `exposure`, it's usually possible to set informed priors that make sense for the experimental design (e.g., if you've already built a PK model you have a good sense of the range of possible exposures, and that in turn tells you something about the plausible range for your EC50 parameter). Anyway, here's a prior that is pretty conservative but not unreasonable for this design (e.g., I'm allowing for an exposure-response relationship but not specifying the direction in advance), but rules out nonsense parameters (e.g., you really shouldn't have negative EC50 values):^[Okay yes, I have not manually specified the prior for the error variance $\\sigma$. Feel free to inspect the Stan code to see how brms handles that.]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_prior <- c(\n  prior(normal(0, 5), nlpar = \"e0\"),\n  prior(normal(0, 5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n)\n```\n:::\n\n\n\nNow that we have all three components we are ready to go. It's possible to use `make_stancode()` to inspect the Stan code that brms generates, and you can take a look at it here if you want to get a sense of what the \"brms to stan\" translation does, but I'll admit it's not always very pretty:\n\n::: {.callout-caution collapse=\"true\" appearance=\"minimal\" title=\"Click to see the Stan code\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_stancode(\n  formula = base_model, \n  family = measurement_model, \n  data = dat, \n  prior = base_prior\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n// generated with brms 2.22.0\nfunctions {\n}\ndata {\n  int<lower=1> N;  // total number of observations\n  vector[N] Y;  // response variable\n  int<lower=1> K_e0;  // number of population-level effects\n  matrix[N, K_e0] X_e0;  // population-level design matrix\n  int<lower=1> K_emax;  // number of population-level effects\n  matrix[N, K_emax] X_emax;  // population-level design matrix\n  int<lower=1> K_ec50;  // number of population-level effects\n  matrix[N, K_ec50] X_ec50;  // population-level design matrix\n  // covariates for non-linear functions\n  vector[N] C_1;\n  int prior_only;  // should the likelihood be ignored?\n}\ntransformed data {\n}\nparameters {\n  vector[K_e0] b_e0;  // regression coefficients\n  vector[K_emax] b_emax;  // regression coefficients\n  vector<lower=0>[K_ec50] b_ec50;  // regression coefficients\n  real<lower=0> sigma;  // dispersion parameter\n}\ntransformed parameters {\n  real lprior = 0;  // prior contributions to the log posterior\n  lprior += normal_lpdf(b_e0 | 0, 5);\n  lprior += normal_lpdf(b_emax | 0, 5);\n  lprior += normal_lpdf(b_ec50 | 2000, 500)\n    - 1 * normal_lccdf(0 | 2000, 500);\n  lprior += student_t_lpdf(sigma | 3, 0, 2.5)\n    - 1 * student_t_lccdf(0 | 3, 0, 2.5);\n}\nmodel {\n  // likelihood including constants\n  if (!prior_only) {\n    // initialize linear predictor term\n    vector[N] nlp_e0 = rep_vector(0.0, N);\n    // initialize linear predictor term\n    vector[N] nlp_emax = rep_vector(0.0, N);\n    // initialize linear predictor term\n    vector[N] nlp_ec50 = rep_vector(0.0, N);\n    // initialize non-linear predictor term\n    vector[N] mu;\n    nlp_e0 += X_e0 * b_e0;\n    nlp_emax += X_emax * b_emax;\n    nlp_ec50 += X_ec50 * b_ec50;\n    for (n in 1:N) {\n      // compute non-linear predictor values\n      mu[n] = (nlp_e0[n] + nlp_emax[n] * C_1[n] / (nlp_ec50[n] + C_1[n]));\n    }\n    target += normal_lpdf(Y | mu, sigma);\n  }\n  // priors including constants\n  target += lprior;\n}\ngenerated quantities {\n}\n```\n\n\n:::\n:::\n\n\n\n:::\n\nMore important for our current purposes we can fit the model by calling `brm()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_fit <- brm(\n  formula = base_model, \n  family = measurement_model, \n  data = dat, \n  prior = base_prior\n) \n```\n:::\n\n\n\nPrint the output:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n   Data: dat (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       5.39      0.92     3.35     6.94 1.00      909      981\nemax_Intercept    11.87      0.89    10.35    13.83 1.00      930     1065\nec50_Intercept  2795.81    382.33  2072.97  3569.03 1.00     1048      984\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.04      0.04     0.96     1.13 1.00     1578     1751\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\nExtract model predictions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_epred <- base_fit |> \n  epred_draws(newdata = tibble(exposure = seq(0, 50000, 1000))) |> \n  ungroup() |> \n  summarize(response = mean(.epred), .by = exposure)\n\nbase_epred\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51 × 2\n   exposure response\n      <dbl>    <dbl>\n 1        0     5.39\n 2     1000     8.57\n 3     2000    10.4 \n 4     3000    11.6 \n 5     4000    12.4 \n 6     5000    13.0 \n 7     6000    13.5 \n 8     7000    13.9 \n 9     8000    14.2 \n10     9000    14.5 \n# ℹ 41 more rows\n```\n\n\n:::\n:::\n\n\n\nPlot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mapping = aes(exposure, response)) + \n  geom_path(data = base_epred) + \n  geom_point(data = dat) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n### Including covariates\n\nWe can adapt the exposure-response curve in the last example to illustrate why the simple emax regression model `base_model` is insufficient to handle our problem. Shading the data points by the value of `cov_a` makes it obvious:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mapping = aes(exposure, response)) + \n  geom_path(data = base_epred) + \n  geom_point(mapping = aes(color = cov_a), data = dat) + \n  scale_color_distiller(palette = \"PuOr\", limits = c(0, 10)) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nSo we need an extended model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_model <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure) + \n    a * cov_a + b * cov_b + c * cov_c,\n  e0 ~ 1,\n  emax ~ 1,\n  ec50 ~ 1,\n  a ~ 1, \n  b ~ 1,\n  c ~ 1,\n  nl = TRUE\n)\n\nfull_prior <- c(\n  prior(normal(0, 5), nlpar = \"e0\"),\n  prior(normal(0, 5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0),\n  prior(normal(0, 5), nlpar = \"a\"),\n  prior(normal(0, 5), nlpar = \"b\"),\n  prior(normal(0, 5), nlpar = \"c\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_fit <- brm(\n  formula = full_model, \n  family = measurement_model, \n  data = dat, \n  prior = full_prior\n) \n```\n:::\n\n\n\nLet's take a look: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) + a * cov_a + b * cov_b + c * cov_c \n         e0 ~ 1\n         emax ~ 1\n         ec50 ~ 1\n         a ~ 1\n         b ~ 1\n         c ~ 1\n   Data: dat (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       2.70      0.86     0.86     4.17 1.00     1499     1521\nemax_Intercept    11.80      0.78    10.46    13.50 1.00     1554     1623\nec50_Intercept  2622.44    340.40  1994.25  3310.37 1.00     1520     1925\na_Intercept        0.32      0.02     0.29     0.35 1.00     3774     2595\nb_Intercept        0.22      0.02     0.18     0.25 1.00     3320     2550\nc_Intercept       -0.00      0.02    -0.04     0.03 1.00     4069     2382\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.63      0.03     0.58     0.68 1.00     3526     2160\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\n\nALTERNATIVELY\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_model_2 <- brmsformula(\n  response ~ e0 + emax * exposure / (ec50 + exposure),\n  e0 ~ 1 + cov_a + cov_b + cov_c,\n  emax ~ 1,\n  ec50 ~ 1,\n  nl = TRUE\n)\n\nfull_prior_2 <- c(\n  prior(normal(0, 5), nlpar = \"e0\"),\n  prior(normal(0, 5), nlpar = \"emax\"),\n  prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_fit_2 <- brm(\n  formula = full_model_2, \n  family = measurement_model, \n  data = dat, \n  prior = full_prior_2\n) \n```\n:::\n\n\n\nLet's take a look: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_fit_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: response ~ e0 + emax * exposure/(ec50 + exposure) \n         e0 ~ 1 + cov_a + cov_b + cov_c\n         emax ~ 1\n         ec50 ~ 1\n   Data: dat (Number of observations: 300) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n               Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\ne0_Intercept       2.71      0.89     0.74     4.24 1.00     1400     1411\ne0_cov_a           0.32      0.02     0.29     0.35 1.00     3320     2491\ne0_cov_b           0.22      0.02     0.18     0.25 1.00     3231     2610\ne0_cov_c          -0.00      0.02    -0.03     0.03 1.00     3476     2651\nemax_Intercept    11.79      0.81    10.42    13.57 1.00     1468     1438\nec50_Intercept  2634.90    350.50  1976.86  3341.67 1.00     1407     1505\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.63      0.03     0.58     0.68 1.00     3592     2229\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## old\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- BayesERtools::d_sim_binom_cov_hgly2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- brm(\n  formula = brmsformula(\n    AEFLAG ~ e0 + emax * AUCss / (ec50 + AUCss),\n    e0 + emax + ec50 ~ 1,\n    nl = TRUE\n  ),\n  family = bernoulli(),\n  data = dat,\n  prior = c(\n    prior(normal(0, 5), nlpar = \"e0\"),\n    prior(normal(0, 5), nlpar = \"emax\"),\n    prior(normal(2000, 500), nlpar = \"ec50\", lb = 0)\n  )\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod |>\n  epred_draws(newdata = tibble(AUCss = seq(0, 10000, 100))) |>\n  ungroup() |>\n  summarise(AEPROB = mean(.epred), .by = AUCss) |> \n  ggplot(aes(AUCss, AEPROB)) + \n  geom_path() + \n  geom_jitter(\n    mapping = aes(AUCss, AEFLAG), \n    data = dat |> mutate(AEFLAG = ifelse(AEFLAG == 1, 1.125, -0.125)), \n    height = 0.075, \n    width = 0\n  ) +\n  scale_y_continuous(breaks = seq(0, 1, 0.2), limits = c(-0.2, 1.2)) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}