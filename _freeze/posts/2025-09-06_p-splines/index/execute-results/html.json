{
  "hash": "a92854ae67333c007ca27cc70d374a31",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Splines, B-splines, P-splines, and a disapproving kitten\"\ndescription: \"No, I do not care about splines. But I am trying to learn about GAMLSS regression, and yes, it is to this dark place that this topic has taken me\"\ndate: \"2025-09-06\"\ncategories: [\"Statistics\", \"R\"]\nimage: haunted.jpg\nimage-alt: A black cat looking disapproving\nknitr:\n  opts_chunk: \n    dev.args:\n      bg: \"#00000000\"\n--- \n\n\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(ggplot2)\n```\n:::\n\n\n\n\nThis is a post about splines. It's also a post about \"basis splines\" and \"penalised splines\", a fact that does not endear it to me greatly. Indeed, let's be brutally honest here, dear reader: I do not care for penalised splines any more than I care for the [Box-Cox power exponential distribution](/posts/2025-08-02_box-cox-power-exponential/) that I wittered on about in the last post. I did not care about the BCPE then and I do not care about P-splines now. Unfortunately, in much the same way that I had to learn about the BCPE distribution in order to understand the [GAMLSS regression](https://en.wikipedia.org/wiki/Generalized_additive_model_for_location,_scale_and_shape) framework that I'm going to talk about in the [next post](/posts/2025-09-07_gamlss/) -- so much so that my BCPE notes became their own sad and sorry post -- I have fallen prey to my vices and again found myself through the looking glass, shaving an unhappy yak, and writing about a topic very different to the one I originally intended to. \n\nOh well.\n\n## Splines\n\nA [spline](https://en.wikipedia.org/wiki/Spline_(mathematics)) is just a piecewise polynomial, and for the sake of my sanity I'm only going to consider polynomials in a single variable $x$, and consider a spline function $f(x)$ defined over the interval $[a, b]$. To build the spline, we partition the interval $[a, b]$ into $m$ disjoint regions $r_1, r_2, \\ldots, r_m$, whose edges are defined by a vector of **knot** points $\\mathbf{k} = (k_0, k_1, \\ldots, k_m)$.^[Conventionally, the knot points are denoted $t$ and the number of knots uses $k$ as the notation but honestly I think that's stupid and just makes it harder to understand.] If we order the knot points such that $k_i \\leq k_{i+1}$ and set $k_0 = a$ and $k_m = b$, then the $i$-th region corresponds to the interval $[k_{i-1}, k_i]$ between two successive knots.^[I suppose if I were being nitpicky enough to define the partition properly I would be a bit more precise and use half-open intervals like $[k_{i-1}, k_i)$ and then make a special case for the final interval by making that one closed, i.e., $[k_{m-1}, k_m]$, but this isn't the kind of post where I'm going to be that technical, and frankly even if I tried I'd probably just fuck it up.] Given this partition we can then define a continuous spline function in terms of $m$ distinct polynomial functions $p_1(x), p_2(x), \\ldots p_m(x)$, one for each subinterval. Our spline function is just a fancy if-then rule. If the point $x$ lies within region $r_i$, use the polynomial $p_i(x)$:\n\n$$\nf(x) = \n\\left\\{\n\\begin{array}{rcl}\np_1(x) &\\mbox{if}& x \\in r_1 \\\\\np_2(x) &\\mbox{if}& x \\in r_2 \\\\\n\\ldots \\\\\np_k(x) &\\mbox{if}& x \\in r_k \\\\\n\\end{array}\n\\right.\n$$\n\nTo ensure that the resulting spline function $f(x)$ is continuous, the polynomials must be constrained so the polynomials on either side of the knot point have the same value at the knot point that connects them.^[To write it slightly more tediously in order to pretend that the author is smart, she notes that the constraint is that $p_i(k_i) = p_{i+1}(k_i)$ for $i = 1, 2, \\ldots m-1$. This adds precisely nothing of value to the post, of course. However, in deference to her undiagnosed-but-painfully-obvious autism she will dump it in a footnote and move on.] To help get a feel for how splines work, I wrote `piecewise()` function that takes knot vector and a list of functions as inputs, and returns the corresponding piecewise polynomial function `f`. The source for `piecewise()` isn't very interesting but for what it's worth it's hidden below the fold here:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code for piecewise()\"}\npiecewise <- function(knots, funs) { \n  f <- function(x) {\n    k <- length(funs)\n    n <- length(x)\n    y <- rep(NA_real_, n)\n    r <- rep(NA_integer_, n)\n    for (i in 1:k) {\n      ind <- x >= knots[i] & x < knots[i + 1]\n      r[ind] <- i\n      y[ind] <- funs[[i]](x[ind])\n    }\n    ind <- x == knots[k + 1]\n    r[ind] <- k\n    y[ind] <- funs[[k]](x[ind])\n    attr(y, \"region\") <- r\n    y\n  }\n  attr(f, \"knots\") <- knots\n  attr(f, \"funs\") <- funs\n  return(f)\n}\n```\n:::\n\n\n\n\nIn my implementation the spline function is undefined outside the interval $[a, b]$ so the values outside the interval are always `NA`, but I suppose other choices could be made. It's not important: my `piecewise()` function isn't intended for serious use, it's just something I wrote so that I could play around with simple splines before moving into the world of pain that is B-splines and P-splines. Armed with this entirely uninteresting tool, let's consider the following example. At the risk of stretching the imagination beyond the limits of human capability, let's try to pretend that I am deeply interested in the following spline: \n\n$$\nf(x) = \n\\left\\{\n\\begin{array}{rcl}\n2x^2 - 3x + 2 & \\mbox{if} & x \\in [0, 1] \\\\\nx & \\mbox{if} & x \\in [1, 3] \\\\\n-x^3 + 28x - 54 &\\mbox{if} & x \\in [3, 3.5] \\\\\n\\end{array}\n\\right.\n$$\n\nIt is comprised of three polynomials of different [degree](https://en.wikipedia.org/wiki/Degree_of_a_polynomial): there's a linear function (degree 1), a quadratic function (degree 2), and a cubic function (degree 3). So the degree of our spline is at most 3. For reasons that escape me, if the maximum degree of any of the polynomial pieces is $d$, we say that the spline is of **order** $d+1$. So this is a spline of order 4. Again, thrilling. But let's suppose I want to implement this spline using my `piecewise()` function. All I need to do is this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- piecewise(\n  knots = c(0, 1, 3, 3.5),\n  funs = list(\n    \\(x) 2*x^2 - 3*x + 2, # left piece is quadratic\n    \\(x) x,               # middle piece is linear\n    \\(x) -x^3 + 28*x - 54 # right piece is cubic\n  )\n) \n```\n:::\n\n\n\n\nYay. To get a sense of what the function looks like I'll also define a `plot_piecewise()` function that plots the spline over the interval $[a, b]$, but it's really boring so I'm again going to hide the code behind the fold and jump straight to plotting the spline function `f`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code for plot_piecewise()\"}\nplot_piecewise <- function(f, n = 5000L) {\n\n  lb <- min(attr(f, \"knots\"))\n  ub <- max(attr(f, \"knots\"))\n  x <- seq(lb, ub, length.out = n)\n\n  dat_sp <- tibble(\n    x = x, \n    y = f(x),\n    r = factor(attr(y, \"region\"))\n  )\n\n  dat_pn <- attr(f, \"funs\") |> \n    map(\\(p) tibble(x = x, y = p(x))) |> \n    bind_rows(.id = \"r\") |> \n    mutate(r = factor(r))\n\n  dat_kn <- tibble(\n    x = attr(f, \"knots\"),\n    y = f(x)\n  )\n\n  plt <- ggplot() +\n    geom_path(data = dat_sp, aes(x, y, color = r), linewidth = 5, alpha = .25) + \n    geom_path(data = dat_pn, aes(x, y, color = r)) +\n    geom_path(data = dat_sp, aes(x, y, group = r), linewidth = 1) + \n    geom_point(data = dat_kn, mapping = aes(x, y), size = 3) + \n    labs(x = \"x\", y = \"f(x)\", color = \"polynomial\")\n\n  return(plt)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_piecewise(f) + lims(y = c(0, 4))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/piecewise-0-1.png){width=672}\n:::\n:::\n\n\n\n\nFirst derivatives are continuous:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf_deriv1 <- piecewise(\n  knots = c(0, 1, 3, 3.5),\n  funs = list(\n    \\(x) 4*x - 3,       # 1st derivative of left piece\n    \\(x) 1,             # 1st derivative of middle piece \n    \\(x) -3 * x^2 + 28  # 1st derivative of right piece\n  )\n)\nplot_piecewise(f_deriv1) + lims(y = c(-10, 2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/piecewise-1-1.png){width=672}\n:::\n:::\n\n\n\n\nSecond derivatives are not:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf_deriv2 <- piecewise(\n  knots = c(0, 1, 3, 3.5),\n  funs = list(\n    \\(x) 4,      # 2nd derivative of left piece\n    \\(x) 0,      # 2nd derivative of middle piece\n    \\(x) -6 * x  # 2nd derivative of right piece\n  )\n)\nplot_piecewise(f_deriv2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/piecewise-2-1.png){width=672}\n:::\n:::\n\n\n\n\nTo put it in slightly fancier language, since the 0th derivative (the function) and 1st derivative are continuous everywhere we say that our example spline has **smoothness 1 everywhere**. However, because the 2nd derivatives are discontinuous at the knot points, the spline does not have smoothness 2 at the knots. More generally, for the spline to have [smoothness](https://en.wikipedia.org/wiki/Smoothness) $s$ at a knot, the derivatives of orders $0, 1, \\ldots, s$ of adjacent polynomials must all be equal at the knot point.\n\nYeah, yeah, whatever.\n\n## B-splines\n\nNext comes the \"basis spline\" trick. As it happens, you can rewrite *any* spline as a weighted sum of so-called B-splines. Let $f_{m, \\mathbf{k}}(x)$ denote a spline function of order $m$ with knot vector $\\mathbf{k}$. Then \n\n$$\nf_{m, \\mathbf{k}}(x) = \\sum_i \\alpha_i \\ B_{i,m}(x)\n$$\n\nwhere $B_{i,m}(x)$ is a **basis spline** ([B-spline](https://en.wikipedia.org/wiki/B-spline)) function defined with respect to the same knot vector $\\mathbf{k}$, and the coefficient $\\alpha_i$ define the weight assigned to the $i$-th basis spline of order $m$. The basis spline functions are themselves splines, but they are a specific set of spline functions designed to give us the result above.^[Something something about B-splines forming a basis for the spline function space or whatever.] From the perspective of a data analyst who wants to fit an arbitrary spline function to a set of points, it can be awfully convenient to work with basis splines because the problem of estimating the unknown spline function $f(x)$ can be transformed into the problem of estimating the coefficients $\\alpha$. \n\n$$\nB_{i,0}(x) = \n\\left\\{\n  \\begin{array}{rl}\n  1 & \\mbox{ if } x \\in [k_i, k_{i+1}) \\\\\n  0 & \\mbox{ otherwise}\n  \\end{array}\n\\right.\n$$\n\nThe higher-order basis splines can be conveniently constructed using the Cox-de Boer recursion which expresses a basis spline of order $m$ as a weighted sum of two basis splines of order $m-1$:\n\n$$\nB_{i,m}(x) \\ = \\ \\frac{x - k_i}{k_{i+m} - k_i} B_{i, m-1}(x) \\ + \\ \\frac{k_{i+m+1} - x}{k_{i+m+1} - k_{i+1}} B_{i+1, m-1}(x)\n$$\n\nAgain, just to provide a sense of what these basis spline functions look like, we'll use B-splines with evenly spaced knots, and -- using a very hacky `plot_b_splines()` function hidden below the fold -- show what B-splines look like when we increase the order of the splines that we wish to represent using them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code for b_spline(), even_knots(), plot_b_splines()\"}\neven_knots <- function(n_internal, k0 = 0, kn = 1) {\n  k <- function(i) {\n    if (i < 0) return(k0)\n    if (i > (n_internal+1)) return(kn)\n    return(k0 + (kn - k0) * ceiling(i)/(n_internal+1))\n  }\n  knot_vals <- (k0 + (kn - k0) * 0:(n_internal+1))/(n_internal+1)\n  attr(k, \"n_internal\") <- n_internal\n  attr(k, \"knots\") <- knot_vals\n  return(k)\n}\n\nknots <- even_knots(4)\n\nb_spline <- function(x, i, m, k) {\n  if(m == 0) {\n    y <- rep(0, length(x))\n    y[x >= k(i) & x < k(i+1)] <- 1  \n    return(y)\n  } \n\n  n <- length(x)\n  if (k(i+m) == k(i)) w1 <- rep(0, n)\n  if (k(i+m) != k(i)) w1 <- (x - k(i)) / (k(i+m) - k(i))\n  if (k(i+m+1) == k(i+1)) w2 <- rep(0, n)\n  if (k(i+m+1) != k(i+1)) w2 <- (k(i+m+1) - x) / (k(i+m+1) - k(i+1))\n\n  y1 <- b_spline(x, i, m-1, k)\n  y2 <- b_spline(x, i+1, m-1, k)\n  y <- (w1 * y1) + (w2 * y2)\n\n  return(y)\n}\n\nplot_b_splines <- function(degree, knots = even_knots(degree)) {\n  k0 <- min(attr(knots, \"knots\"))\n  kn <- max(attr(knots, \"knots\"))\n  x_val <- seq(k0, kn, length.out = 200L)\n  n_internal <- attr(knots, \"n_internal\")\n  knot_index <- -n_internal:n_internal\n  dat_fn <- knot_index |> \n    map_dfr(\\(i_val) tibble(\n      x = x_val,\n      i = i_val, \n      y = b_spline(\n        x = x_val, \n        i = i_val, \n        m = degree, \n        k = knots\n      )\n    )) |> \n    mutate(i = factor(i))\n  dat_kn <- tibble(\n    x = map_dbl(knot_index, knots),\n    y = 0\n  )\n  plt <- ggplot() + \n    geom_path(\n      data = dat_fn, \n      mapping = aes(x, y, color = i),\n      linewidth = 1, \n      show.legend = FALSE\n    ) +\n    geom_point(\n      data = dat_kn, \n      mapping = aes(x, y),\n      show.legend = FALSE\n    ) + \n    facet_wrap(~i) + \n    labs(x = \"x\", y = \"B(x)\")\n  return(plt)\n}\n```\n:::\n\n\n\n\n### Flat \"splines\" \n\nFor the degree 0 basis splines, there's... really not very much to say. Like, okay, if we call my plotting code it shows us that yup, the basis functions are just step functions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_b_splines(degree = 0, knots)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/b-splines-0-1.png){width=672}\n:::\n:::\n\n\n\n\nThe only interesting thing to note here is that each basis spline covers only a single region, and since the knots carve the interval into 5 regions, there's only 5 basis splines that are identical apart from being shifted.^[Okay yes, the code also plots several other \"basis splines\" that are zero everywhere, but we can ignore those: it's purely because I was lazy in how I wrote the code hidden beneath the fold. Actually there are several respects in which the code is a bit sloppy but I'm not going to let myself be bothered by that in a silly blog post like this] The key thing to notice is that if I define a new spline using these as my B-splines (with the assistance of the `b_spline()` function that is also hidden behind the fold above), I'll always end up with step functions (i.e., piecewise flat): \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code for plot_custom_spline()\"}\nplot_custom_spline <- function(f) {\n  dat_f <- tibble(\n    x = seq(0, .99, by = .01),\n    y = f(x)    \n  )\n  dat_k <- tibble(\n    x = attr(knots, \"knots\"), \n    y = f(x)\n  )\n  ggplot(mapping = aes(x, y)) + \n    geom_path(data = dat_f) + \n    geom_point(data = dat_k)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_spline_0 <- function(x) {\n  0.4 * b_spline(x, i = 0, m = 0, knots) + \n  2.5 * b_spline(x, i = 1, m = 0, knots) + \n  3.1 * b_spline(x, i = 2, m = 0, knots) +\n  1.4 * b_spline(x, i = 3, m = 0, knots) +\n  1.4 * b_spline(x, i = 4, m = 0, knots)\n}\n\nplot_custom_spline(my_spline_0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/my-spline-0-1.png){width=672}\n:::\n:::\n\n\n\n\nI mean, I guess this isn't technically a splines at all since it isn't continuous, but whatever. You get the basic idea: when building a function from a linear combination of 0-degree B-splines defined with respect to a set of knots, you can create an arbitrary step function with breakpoints located at those knots. But you can *only* create step functions, nothing else.\n\n### Linear splines \n\nSo that makes sense. Let's now see what the 1-degree B-splines look like, again using my somewhat-hacky `plot_b_splines()` function to do the work:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_b_splines(degree = 1, knots)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/b-splines-1-1.png){width=672}\n:::\n:::\n\n\n\n\nHm. Okay, so our basis splines here are always triangular in shape. It took me a little bit of thinking to understand the implications of this, but there are three:\n\n- when we add these together we will end up with piecewise-linear functions\n- by design they will connect at the knots, so we \"gain\" one degree of continuity\n- all of our B-splines now span two subintervals, so they always have one internal knot, and we've gained one extra B-spline\n\nThat last point might not be obvious because it kind of *looks* like some of our 1-degree B-splines don't have any internal knots, but looks are deceiving: when creating knots for higher degree B-splines, we have to \"tie\" it with several knots all located at the ends of the interval. So, for instance, the pink asymmetric triangle at the bottom right hand side of the plot above actually does have an internal knot, it just happens to be located at the exact same place as the right-hand knot.^[Well, aaaaactually, there's an argument to be made that in the statistical context it's not ideal to clamp the spline down by placing lots of additional knots at the ends. An alternative approach is to simply extend the range: keep all the knots equally spaced, but go far enough outside the range of the data that you don't need any of the B-splines near the edges. That way, you end up with basis splines that have the same shape. This is discussed by [Eilers, Marx and Durbán (2016)](https://www.researchgate.net/publication/290086196_Twenty_years_of_P-splines) in the P-spline context, but it's waaaaay beyond the scope of what I wanted to accomplish with this post. So let's move on, shall we?] \n\nAaaaaaannnnnnyway. It's not like any of this is terribly interesting, but to convince ourselves that that a linear combination of 1-degree B-splines will produce another 1-degree (piecewise linear) spline, let's make one and plot it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_spline_1 <- function(x) {\n  0.4 * b_spline(x, i = -1, m = 1, knots) + \n  0.4 * b_spline(x, i =  0, m = 1, knots) + \n  2.5 * b_spline(x, i =  1, m = 1, knots) + \n  3.1 * b_spline(x, i =  2, m = 1, knots) +\n  1.4 * b_spline(x, i =  3, m = 1, knots) +\n  1.4 * b_spline(x, i =  4, m = 1, knots)\n}\n\nplot_custom_spline(my_spline_1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/my-spline-1-1.png){width=672}\n:::\n:::\n\n\n\n\nYup. As expected. \n\n### Quadratic splines \n\nNext we turn to quadratic splines. First let's have a look at our basis splines. Again, because we've increased the order of the B-splines we have gained one more spline, and the quadratic splines we create from these will gain an additional degree of continuity (i.e., the first derivatives will be continuous at the knots). Here they are:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_b_splines(degree = 2, knots)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/b-splines-2-1.png){width=672}\n:::\n:::\n\n\n\n\nOnce again, I'll create a quadratic spline as a linear combination of the 2-degree B-splines. Notice that I'm not changing the weights assigned to the B-splines when I do so...\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_spline_2 <- function(x) {\n  0.4 * b_spline(x, i = -2, m = 2, knots) + \n  0.4 * b_spline(x, i = -1, m = 2, knots) + \n  0.4 * b_spline(x, i =  0, m = 2, knots) + \n  2.5 * b_spline(x, i =  1, m = 2, knots) + \n  3.1 * b_spline(x, i =  2, m = 2, knots) +\n  1.4 * b_spline(x, i =  3, m = 2, knots) +\n  1.4 * b_spline(x, i =  4, m = 2, knots)\n}\n\nplot_custom_spline(my_spline_2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/my-spline-2-1.png){width=672}\n:::\n:::\n\n\n\n\n...and the result is a piecewise-quadratic function that looks rather similar to the piecewise-linear function I built in the previous section, just a little smoother.\n\n### Cubic splines \n\nAt this point it's probably obvious that I could keep playing this game as long as I wanted to, but I'm getting bored already so let's do one last round and take a look at 3-degree B-splines. Visually they don't look much different to the 2-degree ones, but they aren't quite the same:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_b_splines(degree = 3, knots)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/b-splines-3-1.png){width=672}\n:::\n:::\n\n\n\n\nAs before, we can create a cubic spline by taking a linear combination of these 3-degree B-splines:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_spline_3 <- function(x) {\n  0.4 * b_spline(x, i = -3, m = 3, knots) + \n  0.4 * b_spline(x, i = -2, m = 3, knots) + \n  0.4 * b_spline(x, i = -1, m = 3, knots) + \n  0.4 * b_spline(x, i =  0, m = 3, knots) + \n  2.5 * b_spline(x, i =  1, m = 3, knots) + \n  3.1 * b_spline(x, i =  2, m = 3, knots) +\n  1.4 * b_spline(x, i =  3, m = 3, knots) +\n  1.4 * b_spline(x, i =  4, m = 3, knots)\n}\n\nplot_custom_spline(my_spline_3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/my-spline-3-1.png){width=672}\n:::\n:::\n\n\n\n\nIt looks very similar to the quadratic version, but they aren't quite the same. We could keep going and look at quartic and quintic splines if we wanted to but at this point it's starting to seem a little silly. Besides, in practice we don't usually go above cubic splines in real life data analysis, from what I can tell. \n\n## Least squares estimation\n\nWe are making progress, I think? At this point I'm starting to get a decent intuitive feel for B-splines. That's good. That being said, I can't help but notice that it is 11pm on a Sunday night and I am aaaaaaawfully keen to finish this post and the [GAMLSS post](/posts/2025-09-07_gamlss/) that I am wrapping up in parallel with this one. So let's move things along yeah?\n\nUp to this point I've built a very simple framework for working with B-splines, and to define arbitrary splines using B-splines. What I don't have yet is any way to *estimate* a spline using data. Now, in the real world I don't actually need to do this myself, because there are many tools in R that already do so, and said tools are implemented soooo much better than any hacky code I could write for myself in a weekend. But that is beside the point. My goal here is to build something that helps *me* understand how it works, so let's do something hacky. Here's the entire \"framwork\", in all its horrible, terrible, no good, very bad glory:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# returns a function used to specify knots\neven_knots <- function(n_internal, k0 = 0, kn = 1) {\n  k <- function(i) {\n    if (i < 0) return(k0)\n    if (i > (n_internal+1)) return(kn)\n    return(k0 + (kn - k0) * ceiling(i)/(n_internal+1))\n  }\n  knot_vals <- (k0 + (kn - k0) * 0:(n_internal+1))/(n_internal+1)\n  attr(k, \"n_internal\") <- n_internal\n  attr(k, \"knots\") <- knot_vals\n  return(k)\n}\n\n# function implementing B-splines \nb_spline <- function(x, i, m, k) {\n  if(m == 0) {\n    y <- rep(0, length(x))\n    y[x >= k(i) & x < k(i+1)] <- 1  \n    return(y)\n  } \n\n  n <- length(x)\n  if (k(i+m) == k(i)) w1 <- rep(0, n)\n  if (k(i+m) != k(i)) w1 <- (x - k(i)) / (k(i+m) - k(i))\n  if (k(i+m+1) == k(i+1)) w2 <- rep(0, n)\n  if (k(i+m+1) != k(i+1)) w2 <- (k(i+m+1) - x) / (k(i+m+1) - k(i+1))\n\n  y1 <- b_spline(x, i, m-1, k)\n  y2 <- b_spline(x, i+1, m-1, k)\n  y <- (w1 * y1) + (w2 * y2)\n\n  return(y)\n}\n\n# given a set of knots (k) and their weights (a), predict the \n# value of corresponding cubic spline at a set of points (x)\ncubic_spline <- function(x, a, k) {\n  n_k <- attr(k, \"n_internal\")\n  n_s <- length(a)\n  if (n_s != 2*n_k) stop(\"argh...\", call. = FALSE)\n  y <- rep(0, length(x))\n  for (i in seq_along(a)) {\n    k_i <- -n_k + i \n    y <- y + a[i] * b_spline(x, i = k_i, m = 3, k)\n  }\n  return(y)\n}\n\n# least squares loss function for parameters (a), observed\n# predictors (x), outcomes (y), and knots (k)\ncs_loss <- function(a, x, y, k) {\n  y_hat <- cubic_spline(x, a, k)\n  loss <- sum((y - y_hat)^2)\n}\n\n# use the optim() function to estimate the parameters\n# using least squares method; it doesn't work terribly\n# well in general but it will do for now\ncs_pars <- function(x, y, k, ..., loss = cs_loss) {\n  n <- attr(k, \"n_internal\")\n  fit <- optim(\n    par = rep(mean(y), 2*n),\n    fn = loss,\n    x = x,\n    y = y,\n    k = k,\n    ...\n  )\n  return(fit$par)\n}\n```\n:::\n\n\n\n\nTo convince myself that it \"works\", at least in the sense that it seems to produce fairly reasonable smoothing in a very simple example, I'll use the `mpg` data from the **ggplot2** package. In keeping with tradition, I will use `displ` (engine displacement) as the predictor, and `hwy` (mileage for highway driving) as the outcome. Here goes...\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the predictor is going to be the displ\n# column in mpg, so we'll make sure the \n# knots have a wider range thant the data\nknots_displ <- even_knots(\n  n = 10, \n  k0 = 0, # min(mpg$displ) = 1.6 \n  kn = 10 # max(mpg$displ) = 7\n)\n\n# estimate the parameters\npars_mpg <- cs_pars(\n  x = mpg$displ, \n  y = mpg$hwy, \n  k = knots_displ\n)\n\n# calculate the estimated spline across the \n# full range of the data \npred <- tibble(\n  displ = seq(\n    from = min(mpg$displ), \n    to = max(mpg$displ), \n    length.out = 100L\n  ),\n  hwy = cubic_spline(\n    x = displ, \n    a = pars_mpg, \n    k = knots_displ\n  )\n)\n\n# draw a pretty picture\nggplot(mapping = aes(displ, hwy)) + \n  geom_point(data = mpg) + \n  geom_path(data = pred, color = \"tomato\", linewidth = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mpg-fit-1.png){width=672}\n:::\n:::\n\n\n\n\n...okay, yeah, good enough. Moving on. \n\n## P-splines\n\nAt long last I get to P-splines, and thankfully there's not much I really need to say about them. Originally indroduced by [Eilers & Marx, 1996](https://www.jstor.org/stable/2246049), there's now a very extensive literature on penalised spline, and I will be brutally honest and admit I've read almost none of it. Happily, the overview paper by [Eilers, Marx & Durbán 2016](https://www.researchgate.net/publication/290086196_Twenty_years_of_P-splines) is pretty helpful, and I found it a decent enough place to start. The basic idea is fairly simple: instead of minimising least squares, introduce a penalty function $P(\\mathbf{a})$ on the B-spline weights, to enforce smoothness. \n\n$$\n\\hat{\\mathbf{a}} = \\arg \\min_{\\mathbf{a}} \\left(\\sum_i (f(x_i, \\mathbf{a}) - y_i) \\right) + \\lambda P(\\mathbf{a}) \n$$\n\nNow, in the real world one should take care in defining a penalty function, and the literature on P-splines quite clearly goes into a lot of detail on this. However, it is now midnight, and I want to go to bed. With that in mind, I'll do something very simple. \n\n$$\nP(\\mathbf{a}) = \\sum_i (a_i - a_{i+1})^2\n$$\n\nHere's what the implementation of this looks like:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# penalised loss function based on differences between\n# the weights assigned to adjacent B-splines\ncs_penalised_loss <- function(a, x, y, k, l) {\n  n <- length(a)\n  diffs <- a[-1] - a[-n]\n  y_hat <- cubic_spline(x, a, k)\n  ols <- sum((y - y_hat)^2)\n  pen <- sum(diffs^2)\n  return(ols + l*pen)\n}\n\n# estimate parameters for hwy ~ cs(displ)\npars_mpg_p <- cs_pars(\n  x = mpg$displ, \n  y = mpg$hwy, \n  k = knots_displ,\n  l = 20,\n  loss = cs_penalised_loss\n)\n\n# calculate predictions of the penalised\n# spline estimated above\npred_p <- tibble(\n  displ = seq(\n    from = min(mpg$displ), \n    to = max(mpg$displ), \n    length.out = 100L\n  ),\n  hwy = cubic_spline(\n    x = displ, \n    a = pars_mpg_p, \n    k = knots_displ\n  )\n)\n\n# draw a pretty picture: tomato red line is the original\n# fit; sea green line is the fit with penalty added\nggplot(mapping = aes(displ, hwy)) + \n  geom_point(data = mpg) + \n  geom_path(data = pred, color = \"tomato\", linewidth = 1) +\n  geom_path(data = pred_p, color = \"seagreen\", linewidth = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mpg-fit-penalised-1.png){width=672}\n:::\n:::\n\n\n\n\nOkay, yes that does seem to have smoothed the spline somewhat. The green line is less wiggly than the reddish one, which I suppose was the point of the exercise.\n\nAnd with that, I am done. This post is haunted and I want nothing more to do with it.\n\n![](haunted.jpg)\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}