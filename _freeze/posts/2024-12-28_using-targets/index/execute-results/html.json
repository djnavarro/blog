{
  "hash": "ced9a1d1c54f611efb0931d93848b168",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using targets\"\ndescription: \"Less painful than makefiles\"\ndate: \"2024-12-28\"\n--- \n\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nUseful links:\n\n- [targets package website](https://docs.ropensci.org/targets/)\n- [targets user manual](https://books.ropensci.org/targets/)\n\nUnhelpful links:\n\n- [balrogs and makefiles](/posts/2023-06-30_makefiles/)\n- [my shitty repo](https://github.com/djnavarro/tartoys)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\n```\n:::\n\n\n\n## Project 1: D&D spells\n\nThe nice thing about a targets workflow is that you can (sometimes) see the entire structure of the project just by looking at the `_targets.R` script:\n\n\n\n::: {.cell filename='_targets.R'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\n# packages used in the pipeline -------------------------------------------\n\nlibrary(targets)\n\ntar_option_set(\n  packages = c(\n    \"rprojroot\", \"fs\", \"tibble\", \"readr\",\n    \"ggplot2\", \"dplyr\", \"stringr\",\n    \"tidyr\", \"forcats\", \"ggrepel\",\n    \"legendry\"\n  )\n)\n\n# define functions for the pipeline ---------------------------------------\n\ntar_source(files = c(\"dice.R\", \"scholastic.R\"))\n\nset_output_dir <- function() {\n  root <- find_root(has_file(\"_targets.R\"))\n  output <- path(root, \"output\")\n  dir_create(output)\n  return(output)\n}\n\n# define the targets ------------------------------------------------------\n\nlist(\n  # preprocessing targets\n  tar_target(input, \"spells.csv\", format = \"file\"),\n  tar_target(output, set_output_dir()),\n  tar_target(spells, read_csv(input, show_col_types = FALSE)),\n\n  # dice plot targets\n  tar_target(dice_dat, dice_data(spells)),\n  tar_target(dice_pic, dice_plot(dice_dat, output)),\n\n  # scholastic plot targets\n  tar_target(scholastic_dat, scholastic_data(spells)),\n  tar_target(scholastic_clus, scholastic_clusters(scholastic_dat)),\n  tar_target(\n    scholastic_pic,\n    scholastic_plot(scholastic_dat, scholastic_clus, output)\n  )\n)\n```\n:::\n\n\n\nThere are three clear sections:\n\n- packages needed for the workflow\n- functions used to execute the workflow\n- the list of targets \n\nblah blah blah. \n\nAs it happens, I have a copy of the project in the `spells` directory within this blog post. However, the project is designed to be a standalone, not part of a blog post, so I'm going to temporarily have knitr execute code from within the `spells` subdirectory\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_knit$set(\n  root.dir = here::here(\n    \"posts\", \n    \"2024-12-28_using-targets\",  \n    \"spells\"\n  )\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_make()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✔ skipped target input\n✔ skipped target output\n✔ skipped target spells\n✔ skipped target scholastic_dat\n✔ skipped target dice_dat\n✔ skipped target scholastic_clus\n✔ skipped target dice_pic\n✔ skipped target scholastic_pic\n✔ skipped pipeline [0.091 seconds]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nHere's the code for `dice.R`:\n\n\n\n::: {.cell filename='dice.R'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\ndice_data <- function(spells) {\n  dice_dat <- spells |>\n    select(name, level, description) |>\n    mutate(\n      dice_txt = str_extract_all(description, \"\\\\b\\\\d+d\\\\d+\\\\b\"),\n      dice_txt = purrr::map(dice_txt, unique)\n    ) |>\n    unnest_longer(\n      col = \"dice_txt\",\n      values_to = \"dice_txt\",\n      indices_to = \"position\"\n    ) |>\n    mutate(\n      dice_num = dice_txt |> str_extract(\"\\\\d+(?=d)\") |> as.numeric(),\n      dice_die = dice_txt |> str_extract(\"(?<=d)\\\\d+\") |> as.numeric(),\n      dice_val = dice_num * (dice_die + 1)/2,\n      dice_txt = factor(dice_txt) |> fct_reorder(dice_val)\n    )\n  return(dice_dat)\n}\n\ndice_plot <- function(dice_dat, output) {\n\n  palette <- hcl.colors(n = 10, palette = \"PuOr\")\n\n  labs <- dice_dat |>\n    summarise(\n      dice_txt = first(dice_txt),\n      count = n(),\n      .by = dice_txt\n    )\n\n  pic <- ggplot(\n    data = dice_dat,\n    mapping = aes(\n      x = dice_txt,\n      fill = factor(level)\n    )\n  ) +\n    geom_bar(color = \"#222\") +\n    geom_label_repel(\n      data = labs,\n      mapping = aes(\n        x = dice_txt,\n        y = count,\n        label = dice_txt\n      ),\n      size = 3,\n      direction = \"y\",\n      seed = 1,\n      nudge_y = 4,\n      color = \"#ccc\",\n      fill = \"#222\",\n      arrow = NULL,\n      inherit.aes = FALSE\n    ) +\n    scale_fill_manual(\n      name = \"Spell level\",\n      values = palette\n    ) +\n    scale_x_discrete(\n      name = \"Increasing average outcome \\u27a1\",\n      breaks = NULL,\n      expand = expansion(.05)\n    ) +\n    scale_y_continuous(name = NULL) +\n    labs(\n      title = \"Frequency of dice rolls described in D&D spell descriptions, by spell level\",\n      subtitle = \"Or whatever\",\n      caption = \"Source: https://github.com/rfordatascience/tidytuesday/tree/main/data/2024/2024-12-17\"\n    ) +\n    theme_void() +\n    theme(\n      plot.background = element_rect(fill = \"#222\"),\n      text = element_text(color = \"#ccc\"),\n      axis.text = element_text(color = \"#ccc\"),\n      axis.title = element_text(color = \"#ccc\"),\n      plot.margin = unit(c(1, 1, 1, 1), units = \"cm\"),\n      legend.position = \"inside\",\n      legend.position.inside = c(.3, .825),\n      legend.direction = \"horizontal\",\n      legend.title.position = \"top\",\n      legend.byrow = TRUE\n    )\n\n  out <- path(output, \"dice_pic.png\")\n\n  ggsave(\n    filename = out,\n    plot = pic,\n    width = 2000,\n    height = 1000,\n    units = \"px\",\n    dpi = 150\n  )\n\n  return(out)\n}\n```\n:::\n\n\n\nHere's the code for `scholastic.R`:\n\n\n\n::: {.cell filename='scholastic.R'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\n# constructs the data frame used by geom_tile() later\nscholastic_data <- function(spells) {\n  spells |>\n    select(name, school, bard:wizard) |>\n    pivot_longer(\n      cols = bard:wizard,\n      names_to = \"class\",\n      values_to = \"castable\"\n    ) |>\n    summarise(\n      count = sum(castable),\n      .by = c(\"school\", \"class\")\n    ) |>\n    mutate(\n      school = str_to_title(school),\n      class  = str_to_title(class)\n    )\n}\n\n# hierarchical clustering for the schools and classes\nscholastic_clusters <- function(dat) {\n\n  # matrix of counts for each school/class combination\n  mat <- dat |>\n    pivot_wider(\n      names_from = \"school\",\n      values_from = \"count\"\n    ) |>\n    as.data.frame()\n  rownames(mat) <- mat$class\n  mat$class <- NULL\n  as.matrix(mat)\n\n  # each school is a distribution over classes,\n  # each class is a distribution over schools\n  class_distribution  <- mat / replicate(ncol(mat), rowSums(mat))\n  school_distribution <- t(mat) / (replicate(nrow(mat), colSums(mat)))\n\n  # pairwise distances\n  class_dissimilarity  <- dist(class_distribution)\n  school_dissimilarity <- dist(school_distribution)\n\n  # hierarchical clustering\n  clusters <- list(\n    class = hclust(class_dissimilarity, method = \"average\"),\n    school = hclust(school_dissimilarity, method = \"average\")\n  )\n\n  return(clusters)\n}\n\nscholastic_plot <- function(dat, clusters, output) {\n\n  pic <- ggplot(dat, aes(school, class, fill = count)) +\n    geom_tile() +\n    scale_x_dendro(\n      clust = clusters$school,\n      guide = guide_axis_dendro(n.dodge = 2),\n      expand = expansion(0, 0),\n      position = \"top\"\n    ) +\n    scale_y_dendro(\n      clust = clusters$class,\n      expand = expansion(0, 0)\n    ) +\n    scale_fill_distiller(palette = \"RdPu\") +\n    labs(\n      x = \"The Schools of Magic\",\n      y = \"The Classes of Character\",\n      fill = \"Number of Learnable Spells\"\n    ) +\n    coord_equal() +\n    theme(\n      plot.background = element_rect(fill = \"#222\", color = \"#222\"),\n      plot.margin = unit(c(2, 2, 2, 2), units = \"cm\"),\n      text = element_text(color = \"#ccc\"),\n      axis.text = element_text(color = \"#ccc\"),\n      axis.title = element_text(color = \"#ccc\"),\n      axis.ticks = element_line(color = \"#ccc\"),\n      legend.position = \"bottom\",\n      legend.background = element_rect(fill = \"#222\", color = \"#222\")\n    )\n\n  out <- path(output, \"scholastic_pic.png\")\n\n  ggsave(\n    filename = out,\n    plot = pic,\n    width = 1000,\n    height = 1000,\n    units = \"px\",\n    dpi = 150\n  )\n\n  return(out)\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}