{
  "hash": "5d902f8a0ca7690f20726dd51dd8d7a3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"regex-backreferences\"\ndescription: \"This is a subtitle\"\ndate: \"2024-11-26\"\n--- \n\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nRegular expressions are the bane of my existence. They are everything I hate about programming. They are the very apotheosis of \"taking a concept that makes sense and making it utterly incomprehensible to save a few keystrokes\". They are the *worst*.\n\nNo, I do not want to hear your argument for why they're actually great.\n\n## The regex\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nconvo <- c(\n  \"5551 5678, call me maybe?\",\n  \"oh wait i forgot the area code it's (02) 5551 5678\",\n  \"cool im 03 7010 1111 babe\", \n  \"interstate? do you have a mobile?\",\n  \"yup, its 411 111 1111\",\n  \"liaaaaar\"\n)\n```\n:::\n\n\n\nMatch a specific sequence of characters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(convo, \"555\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"555\" \"555\" NA    NA    NA    NA   \n```\n\n\n:::\n:::\n\n\n\nThree consecutive numbers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(convo, \"[0-9]{3}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"555\" \"555\" \"701\" NA    \"411\" NA   \n```\n\n\n:::\n:::\n\n\n\nHm. Wait, that's not really what I meant. I don't want two numbers in a row, I want two copies of the *same* number in a row. For that I need to use capture groups and backreferences, and every time this happens my brain melts, I google it and end up on [this page](https://www.regular-expressions.info/refcapture.html) or something similar. This works:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(convo, \"([0-9])\\\\1{2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"555\" \"555\" \"111\" NA    \"111\" NA   \n```\n\n\n:::\n:::\n\n\n\n## Extract\n\nHow to mimic `str_extract()` in base?\n\nThis isn't quite what we want:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrep(\"([0-9])\\\\1{2}\", convo, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"5551 5678, call me maybe?\"                         \n[2] \"oh wait i forgot the area code it's (02) 5551 5678\"\n[3] \"cool im 03 7010 1111 babe\"                         \n[4] \"yup, its 411 111 1111\"                             \n```\n\n\n:::\n:::\n\n\n\nCloser, but not quite:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregmatches(convo, regexpr(\"([0-9])\\\\1{2}\", convo))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"555\" \"555\" \"111\" \"111\"\n```\n\n\n:::\n:::\n\n\n\nTo return a match or `NA`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_extract <- function(string, pattern) {\n  m <- regexpr(pattern, string)\n  v <- regmatches(string, m)\n  out <- rep(NA_character_, length(string))\n  out[which(m > 0)] <- v\n  out\n}\nbase_extract(convo, \"([0-9])\\\\1{2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"555\" \"555\" \"111\" NA    \"111\" NA   \n```\n\n\n:::\n:::\n\n\n\n## Replace\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace(convo, \"([0-9])\\\\1{2}\", \"***\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"***1 5678, call me maybe?\"                         \n[2] \"oh wait i forgot the area code it's (02) ***1 5678\"\n[3] \"cool im 03 7010 ***1 babe\"                         \n[4] \"interstate? do you have a mobile?\"                 \n[5] \"yup, its 411 *** 1111\"                             \n[6] \"liaaaaar\"                                          \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngsub(\"([0-9])\\\\1{2}\", \"***\", convo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"***1 5678, call me maybe?\"                         \n[2] \"oh wait i forgot the area code it's (02) ***1 5678\"\n[3] \"cool im 03 7010 ***1 babe\"                         \n[4] \"interstate? do you have a mobile?\"                 \n[5] \"yup, its 411 *** ***1\"                             \n[6] \"liaaaaar\"                                          \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}