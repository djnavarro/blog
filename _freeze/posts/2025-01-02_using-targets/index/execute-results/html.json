{
  "hash": "6c001c16f324044f00b0e6493c248380",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using targets\"\ndescription: \"A build automation tool that works really well for R projects\"\ndate: \"2025-01-02\"\ncategories: [\"R\", \"Reproducibility\"]\n--- \n\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nAbout 18 months ago I wrote a post about [balrogs and makefiles](/posts/2023-06-30_makefiles/). The post was long, strange, but also cathartic. It had bothered me for years that I didn't really understand [make](https://www.gnu.org/software/make/) as well as I wanted to, and it was really helpful to write up some notes about it as a way of teaching myself how to use it more effectively than I had done in the past.^[In all fairness, this is the *primary* purpose of this blog. Yes, it makes me very happy that other people find my posts useful and/or enjoyable, but that is actually a secondary goal. I write these posts for myself, because the act of writing is also an act of learning for me.] Buried at the very end of the post, somewhat sheepishly, is a reference to the [targets](https://docs.ropensci.org/targets/) R package by Will Landau. Even then I knew that I was going to need to learn how to use targets, but... life gets in the way. I have been preoccupied by other tasks, sadly, and it has taken me until now to (a) sit down and read through the [targets user manual](https://books.ropensci.org/targets/), and (b) come up with some [fun side projects](https://github.com/djnavarro/tartoys) that would give me the opportunity to try it out. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\n```\n:::\n\n\n\n## Preliminaries\n\nOne key thing about targets is that it's a project oriented workflow, and not surprisingly it's easiest to use from *within* the project. By default, code in a quarto blog post like this one executes with the working directory set to the folder containing the qmd file, but to make my life easier I'll sometimes change that directory so that when I'm discussing a specific targets project, the code will execute from the root directory of that project. However, using `setwd()` to do this is not ideal: the proper way to do this within any knitr-based tool (quarto, rmarkdown, etc) is to set the `root.dir` knitr option. To that end, I'll define a little convenience function to take care of this whenever I need to switch to a new project:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost_dir <- here::here(\"posts\", \"2025-01-02_using-targets\")\nset_knitr_dir <- function(dir, base = post_dir) {\n  knitr::opts_knit$set(root.dir = fs::path(base, dir))\n}\n```\n:::\n\n\n\nRight then. Time to play around with targets...\n\n## Project 1: D&D spells\n\n\nThe first project is the fun [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday/tree/main/data/2024/2024-12-17) project that I described in my [last post](/posts/2025-01-01_schools-of-magic/). In that post, I talked about two data visualisation I made using data about D&D spells. When I wrote that post, I didn't talk about targets at all, and none of the code presented in that blog post is written in a \"targets-friendly\" way. However, all though that form of the code was the simplest way to write it up, it's not how I originally wrote it. The actual code was written for targets (it's included as the `spells` folder in [this github repo](https://github.com/djnavarro/tartoys)). \n\nAs it happens, I have a slightly-modified copy of the project in the `spells` directory within this blog post, so that I play with this project within this post, and see how targets operates. With that in mind, the very first thing I'll do is navigate into that project folder:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_knitr_dir(\"spells\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nNext, let's take a look at the structure of this project. At the moment this is a clean project (i.e., no code has been run yet), so it contains only the source files. There are only three:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\n├── _targets.R\n├── analysis.R\n└── spells.csv\n```\n\n\n:::\n:::\n\n\n\nHere's what each file does:\n\n- The `spells.csv` file is the data set I wish to analyse\n- The `analysis.R` script defines a collection of functions which, when called, will perform the required analyses and generate the outputs\n- The `_targets.R` script is (unsurprisingly) the build script. It's the targets analog of a makefile, more or less\n\nLet's unpack this a little further. If you read the [schools of magic](/posts/2025-01-01_schools-of-magic/) post, you've already seen the code underpinning the analysis. The only difference between the version in that post and the version I've used here is that the `analysis.R` script wraps each step of the analysis into a function. For example, the pipeline that constructs the \"spell dice\" plot uses these three functions:\n\n- `set_output_dir()` returns the path to the output folder to which the images will be written, creating that output folder if it doesn't already exist\n- `dice_data()` takes the spells data as input, and performs all the data wrangling steps required to construct a tidied version of the data that is suitable for visualisation\n- `dice_plot()` takes the tidied dice data as input, specifies the \"spell dice\" plot, and writes it to an output file\n\nTo produce the \"schools of magic\" plot I also need these three functions:\n\n- `scholastic_data()` takes the spells data as input, and performs the data wrangling steps required to create tidy data suitable for constructing the heatmap\n- `scholastic_clusters()` takes this tidy data as input, and the performs additional steps required to construct the hierarchical clustering used to draw dendrograms alongside the heatmap\n- `scholastic_plot()` takes the data set and the clustering as input, and uses them to build the \"schools of magic\" plot that is written to an output file\n\nThe actual code for these functions isn't very important, but for what it's worth the code is included below the fold here:\n\n\n\n::: {.cell filename='analysis.R'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Click to show/hide the analysis.R code\" code-line-numbers=\"true\"}\n# helper ------------------------------------------------------------------\n\nset_output_dir <- function() {\n  root <- find_root(has_file(\"_targets.R\"))\n  output <- path(root, \"output\")\n  dir_create(output)\n  return(output)\n}\n\n# spell dice plot ---------------------------------------------------------\n\ndice_data <- function(spells) {\n  dice_dat <- spells |>\n    select(name, level, description) |>\n    mutate(\n      dice_txt = str_extract_all(description, \"\\\\b\\\\d+d\\\\d+\\\\b\"),\n      dice_txt = purrr::map(dice_txt, unique)\n    ) |>\n    unnest_longer(\n      col = \"dice_txt\",\n      values_to = \"dice_txt\",\n      indices_to = \"position\"\n    ) |>\n    mutate(\n      dice_num = dice_txt |> str_extract(\"\\\\d+(?=d)\") |> as.numeric(),\n      dice_die = dice_txt |> str_extract(\"(?<=d)\\\\d+\") |> as.numeric(),\n      dice_val = dice_num * (dice_die + 1)/2,\n      dice_txt = factor(dice_txt) |> fct_reorder(dice_val)\n    )\n  return(dice_dat)\n}\n\ndice_plot <- function(dice_dat, output) {\n  \n  palette <- hcl.colors(n = 10, palette = \"PuOr\")\n  \n  labs <- dice_dat |>\n    summarise(\n      dice_txt = first(dice_txt),\n      count = n(),\n      .by = dice_txt\n    )\n  \n  pic <- ggplot(\n    data = dice_dat,\n    mapping = aes(\n      x = dice_txt,\n      fill = factor(level)\n    )\n  ) +\n    geom_bar(color = \"#222\") +\n    geom_label_repel(\n      data = labs,\n      mapping = aes(\n        x = dice_txt,\n        y = count,\n        label = dice_txt\n      ),\n      size = 3,\n      direction = \"y\",\n      seed = 1,\n      nudge_y = 4,\n      color = \"#ccc\",\n      fill = \"#222\",\n      arrow = NULL,\n      inherit.aes = FALSE\n    ) +\n    scale_fill_manual(\n      name = \"Spell level\",\n      values = palette\n    ) +\n    scale_x_discrete(\n      name = \"Increasing average outcome \\u27a1\",\n      breaks = NULL,\n      expand = expansion(.05)\n    ) +\n    scale_y_continuous(name = NULL) +\n    labs(title = \"Dice rolls described in D&D spell descriptions\") +\n    theme_void() +\n    theme(\n      plot.background = element_rect(fill = \"#222\"),\n      text = element_text(color = \"#ccc\"),\n      axis.text = element_text(color = \"#ccc\"),\n      axis.title = element_text(color = \"#ccc\"),\n      plot.margin = unit(c(1, 1, 1, 1), units = \"cm\"),\n      legend.position = \"inside\",\n      legend.position.inside = c(.3, .825),\n      legend.direction = \"horizontal\",\n      legend.title.position = \"top\",\n      legend.byrow = TRUE\n    )\n  \n  out <- path(output, \"dice_pic.png\")\n  \n  ggsave(\n    filename = out,\n    plot = pic,\n    width = 2000,\n    height = 1000,\n    units = \"px\",\n    dpi = 150\n  )\n  \n  return(out)\n}\n\n\n# schools of magic plot ---------------------------------------------------\n\n# constructs the data frame used by geom_tile() later\nscholastic_data <- function(spells) {\n  spells |>\n    select(name, school, bard:wizard) |>\n    pivot_longer(\n      cols = bard:wizard,\n      names_to = \"class\",\n      values_to = \"castable\"\n    ) |>\n    summarise(\n      count = sum(castable),\n      .by = c(\"school\", \"class\")\n    ) |>\n    mutate(\n      school = str_to_title(school),\n      class  = str_to_title(class)\n    )\n}\n\n# hierarchical clustering for the schools and classes\nscholastic_clusters <- function(dat) {\n  \n  # matrix of counts for each school/class combination\n  mat <- dat |>\n    pivot_wider(\n      names_from = \"school\",\n      values_from = \"count\"\n    ) |>\n    as.data.frame()\n  rownames(mat) <- mat$class\n  mat$class <- NULL\n  as.matrix(mat)\n  \n  # each school is a distribution over classes,\n  # each class is a distribution over schools\n  class_distribution  <- mat / replicate(ncol(mat), rowSums(mat))\n  school_distribution <- t(mat) / (replicate(nrow(mat), colSums(mat)))\n  \n  # pairwise distances\n  class_dissimilarity  <- dist(class_distribution)\n  school_dissimilarity <- dist(school_distribution)\n  \n  # hierarchical clustering\n  clusters <- list(\n    class = hclust(class_dissimilarity, method = \"average\"),\n    school = hclust(school_dissimilarity, method = \"average\")\n  )\n  \n  return(clusters)\n}\n\nscholastic_plot <- function(dat, clusters, output) {\n  \n  pic <- ggplot(dat, aes(school, class, fill = count)) +\n    geom_tile() +\n    scale_x_dendro(\n      clust = clusters$school,\n      guide = guide_axis_dendro(n.dodge = 2),\n      expand = expansion(0, 0),\n      position = \"top\"\n    ) +\n    scale_y_dendro(\n      clust = clusters$class,\n      expand = expansion(0, 0)\n    ) +\n    scale_fill_distiller(palette = \"RdPu\") +\n    labs(\n      x = \"The Schools of Magic\",\n      y = \"The Classes of Character\",\n      fill = \"Number of Learnable Spells\"\n    ) +\n    coord_equal() +\n    theme(\n      plot.background = element_rect(fill = \"#222\", color = \"#222\"),\n      plot.margin = unit(c(2, 2, 2, 2), units = \"cm\"),\n      text = element_text(color = \"#ccc\"),\n      axis.text = element_text(color = \"#ccc\"),\n      axis.title = element_text(color = \"#ccc\"),\n      axis.ticks = element_line(color = \"#ccc\"),\n      legend.position = \"bottom\",\n      legend.background = element_rect(fill = \"#222\", color = \"#222\")\n    )\n  \n  out <- path(output, \"scholastic_pic.png\")\n  \n  ggsave(\n    filename = out,\n    plot = pic,\n    width = 1000,\n    height = 1000,\n    units = \"px\",\n    dpi = 150\n  )\n  \n  return(out)\n}\n```\n:::\n\n\n\n### Defining the pipeline\n\nNow that you've read the verbal description of what each function does, it's intuitively pretty clear how the analysis pipeline is supposed to work. Roughly speaking, you'd expect the analysis to be executed using a script like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# setup\ninput  <- \"spells.csv\"\noutput <- set_output_dir()\nspells <- readr::read_csv(input)\n\n# make the spell dice plot & write to output\ndice_dat <- dice_data(spells)\ndice_pic <- dice_plot(dice_dat, output)\n\n# make the schools of magic plot & write to output\nscholastic_dat  <- scholastic_data(spells)\nscholastic_clus <- scholastic_clusters(scholastic_dat)\nscholastic_pic  <- scholastic_plot(scholastic_dat, scholastic_clus, output)\n```\n:::\n\n\n\nSo, how does it work with targets? Well, if we take a look at the `_targets.R` script, we can see it looks suspiciously similar to the code above:\n\n\n\n::: {.cell filename='_targets.R'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nlibrary(targets)\n\ntar_option_set(packages = c(\n  \"rprojroot\", \"fs\", \"tibble\", \"readr\", \"ggplot2\", \"dplyr\",\n  \"stringr\", \"tidyr\", \"forcats\", \"ggrepel\", \"legendry\"\n))\n\ntar_source(\"analysis.R\")\n\nlist(\n  # preprocessing targets\n  tar_target(input, \"spells.csv\", format = \"file\"),\n  tar_target(output, set_output_dir()),\n  tar_target(spells, read_csv(input, show_col_types = FALSE)),\n  \n  # dice plot targets\n  tar_target(dice_dat, dice_data(spells)),\n  tar_target(dice_pic, dice_plot(dice_dat, output)),\n  \n  # scholastic plot targets\n  tar_target(scholastic_dat, scholastic_data(spells)),\n  tar_target(scholastic_clus, scholastic_clusters(scholastic_dat)),\n  tar_target(\n    scholastic_pic,\n    scholastic_plot(scholastic_dat, scholastic_clus, output)\n  )\n)\n```\n:::\n\n\n\n\n### Inspecting the pipeline\n\nThe `tar_visnetwork()` function provides a handy way of visualising the structure of a pipeline as a little HTML widget. By default it will show the dependencies between all functions and all targets, which is often totally fine, but I'm going to simplify it here by setting `targets_only = TRUE` (i.e., don't show the user-defined functions), and also set `exclude = c(\"input\", \"output\")` to ignore the two really boring pre-processing targets! \n\nAnyway, here it is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_visnetwork()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-06484ed42468d86de4a4\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-06484ed42468d86de4a4\">{\"x\":{\"nodes\":{\"name\":[\"dice_dat\",\"dice_pic\",\"input\",\"output\",\"scholastic_clus\",\"scholastic_dat\",\"scholastic_pic\",\"spells\",\"scholastic_data\",\"scholastic_plot\",\"dice_data\",\"scholastic_clusters\",\"set_output_dir\",\"dice_plot\"],\"type\":[\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"function\",\"function\",\"function\",\"function\",\"function\",\"function\"],\"description\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"status\":[\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\"],\"seconds\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"bytes\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"branches\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"label\":[\"dice_dat\",\"dice_pic\",\"input\",\"output\",\"scholastic_clus\",\"scholastic_dat\",\"scholastic_pic\",\"spells\",\"scholastic_data\",\"scholastic_plot\",\"dice_data\",\"scholastic_clusters\",\"set_output_dir\",\"dice_plot\"],\"color\":[\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\"],\"id\":[\"dice_dat\",\"dice_pic\",\"input\",\"output\",\"scholastic_clus\",\"scholastic_dat\",\"scholastic_pic\",\"spells\",\"scholastic_data\",\"scholastic_plot\",\"dice_data\",\"scholastic_clusters\",\"set_output_dir\",\"dice_plot\"],\"level\":[3,4,1,2,4,3,5,2,1,1,1,1,1,1],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"triangle\",\"triangle\",\"triangle\",\"triangle\",\"triangle\",\"triangle\"]},\"edges\":{\"from\":[\"scholastic_clusters\",\"scholastic_dat\",\"scholastic_data\",\"spells\",\"input\",\"output\",\"scholastic_clus\",\"scholastic_dat\",\"scholastic_plot\",\"set_output_dir\",\"dice_dat\",\"dice_plot\",\"output\",\"dice_data\",\"spells\"],\"to\":[\"scholastic_clus\",\"scholastic_clus\",\"scholastic_dat\",\"scholastic_dat\",\"spells\",\"scholastic_pic\",\"scholastic_pic\",\"scholastic_pic\",\"scholastic_pic\",\"output\",\"dice_pic\",\"dice_pic\",\"dice_pic\",\"dice_dat\",\"dice_dat\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Outdated\",\"Stem\",\"Function\"],\"color\":[\"#78B7C5\",\"#899DA4\",\"#899DA4\"],\"shape\":[\"dot\",\"dot\",\"triangle\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nThis makes the structure of the project clear:\n\n- The `dice_pic` image depends only on the `dice_dat` data set, and the `dice_dat` data set is derived from the `spells` data frame\n- The `scholastic_pic` is a little more complicated because it depends on two data sets: there's the `scholastic_dat` data set that is derived directly from `spells`, but there's also the `scholastic_clus` object that is constructed from the `scholastic_dat` data set. \n\nIf you want a little more detail, you can use `tar_manifest()` to get a summary of all the targets and the command with which they are associated:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_manifest()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  name            command                                                   \n  <chr>           <chr>                                                     \n1 input           \"\\\"spells.csv\\\"\"                                          \n2 output          \"set_output_dir()\"                                        \n3 spells          \"read_csv(input, show_col_types = FALSE)\"                 \n4 scholastic_dat  \"scholastic_data(spells)\"                                 \n5 dice_dat        \"dice_data(spells)\"                                       \n6 scholastic_clus \"scholastic_clusters(scholastic_dat)\"                     \n7 dice_pic        \"dice_plot(dice_dat, output)\"                             \n8 scholastic_pic  \"scholastic_plot(scholastic_dat, scholastic_clus, output)\"\n```\n\n\n:::\n:::\n\n\n\nThe output isn't as pretty as the HTML widget, but you can use it to see exactly what the target objects are, as well as the the command used to construct them. \n\n### Executing the pipeline\n\nIn the HTML widget above, all the targets are coloured in blue, indicating that these are \"outdated\". You can get a listing of all outdated targets like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_outdated()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"scholastic_clus\" \"scholastic_dat\"  \"spells\"          \"scholastic_pic\" \n[5] \"output\"          \"dice_pic\"        \"input\"           \"dice_dat\"       \n```\n\n\n:::\n:::\n\n\n\nThese are the targets that need to be (re)run. We can do this by calling `tar_make()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_make()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n▶ dispatched target input\n● completed target input [0.322 seconds, 302.514 kilobytes]\n▶ dispatched target output\n● completed target output [0.002 seconds, 165 bytes]\n▶ dispatched target spells\n● completed target spells [0.094 seconds, 73.966 kilobytes]\n▶ dispatched target scholastic_dat\n● completed target scholastic_dat [0.014 seconds, 401 bytes]\n▶ dispatched target dice_dat\n● completed target dice_dat [0.024 seconds, 33.486 kilobytes]\n▶ dispatched target scholastic_clus\n● completed target scholastic_clus [0.014 seconds, 634 bytes]\n▶ dispatched target dice_pic\n● completed target dice_pic [0.937 seconds, 174 bytes]\n▶ dispatched target scholastic_pic\n● completed target scholastic_pic [0.224 seconds, 177 bytes]\n▶ ended pipeline [1.745 seconds]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\n├── _targets\n│   ├── meta\n│   │   ├── meta\n│   │   ├── process\n│   │   └── progress\n│   ├── objects\n│   │   ├── dice_dat\n│   │   ├── dice_pic\n│   │   ├── output\n│   │   ├── scholastic_clus\n│   │   ├── scholastic_dat\n│   │   ├── scholastic_pic\n│   │   └── spells\n│   └── user\n├── _targets.R\n├── analysis.R\n├── output\n│   ├── dice_pic.png\n│   └── scholastic_pic.png\n└── spells.csv\n```\n\n\n:::\n:::\n\n\n\n## Project 2: A toy blog\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_knitr_dir(\"liteblog\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\n├── _liteblog-footer.html\n├── _liteblog-header.html\n├── _liteblog.R\n├── _liteblog.css\n├── _targets.R\n└── source\n    ├── 404.rmd\n    ├── _001_hello-cruel-world.rmd\n    ├── _002_blog-object.rmd\n    └── index.rmd\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_visnetwork()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-21697d58abce2053a245\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-21697d58abce2053a245\">{\"x\":{\"nodes\":{\"name\":[\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"blog_rds\",\"post_files\",\"post_fuse\",\"post_paths\",\"static_copy\",\"static_files\",\"static_paths\",\"Liteblog\"],\"type\":[\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"pattern\",\"pattern\",\"stem\",\"pattern\",\"pattern\",\"stem\",\"object\"],\"description\":[null,null,null,null,null,null,null,null,null,null,null,null],\"status\":[\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\"],\"seconds\":[null,null,null,null,null,null,null,null,null,null,null,null],\"bytes\":[null,null,null,null,null,null,null,null,null,null,null,null],\"branches\":[null,null,null,null,null,null,null,null,null,null,null,null],\"label\":[\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"blog_rds\",\"post_files\",\"post_fuse\",\"post_paths\",\"static_copy\",\"static_files\",\"static_paths\",\"Liteblog\"],\"color\":[\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\"],\"id\":[\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"blog_rds\",\"post_files\",\"post_fuse\",\"post_paths\",\"static_copy\",\"static_files\",\"static_paths\",\"Liteblog\"],\"level\":[2,1,1,1,3,4,5,3,5,4,3,1],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"square\",\"square\",\"dot\",\"square\",\"square\",\"dot\",\"triangleDown\"]},\"edges\":{\"from\":[\"blog\",\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"post_files\",\"post_paths\",\"static_paths\",\"post_paths\",\"blog\",\"static_files\",\"blog\",\"Liteblog\",\"blog\"],\"to\":[\"static_paths\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"static_files\",\"post_files\",\"static_copy\",\"static_copy\",\"blog_rds\",\"blog\",\"post_paths\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Outdated\",\"Stem\",\"Pattern\",\"Object\"],\"color\":[\"#78B7C5\",\"#899DA4\",\"#899DA4\",\"#899DA4\"],\"shape\":[\"dot\",\"dot\",\"square\",\"triangleDown\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_make()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n▶ dispatched target blog\n● completed target blog [0.003 seconds, 9.739 kilobytes]\n▶ dispatched target blog_css\n● completed target blog_css [0 seconds, 3.759 kilobytes]\n▶ dispatched target blog_ftr\n● completed target blog_ftr [0 seconds, 115 bytes]\n▶ dispatched target blog_hdr\n● completed target blog_hdr [0 seconds, 271 bytes]\n▶ dispatched target static_paths\n● completed target static_paths [0.033 seconds, 139 bytes]\n▶ dispatched target post_paths\n● completed target post_paths [0.001 seconds, 185 bytes]\n▶ dispatched target blog_rds\n● completed target blog_rds [0.002 seconds, 0 bytes]\n▶ dispatched branch static_files_1b8fcc933438b737\n● completed branch static_files_1b8fcc933438b737 [0 seconds, 0 bytes]\n● completed pattern static_files \n▶ dispatched branch post_files_bfe2f528519c0ff0\n● completed branch post_files_bfe2f528519c0ff0 [0 seconds, 320 bytes]\n▶ dispatched branch post_files_0d76c076472d293c\n● completed branch post_files_0d76c076472d293c [0 seconds, 4.667 kilobytes]\n▶ dispatched branch post_files_64b628c4152d280c\n● completed branch post_files_64b628c4152d280c [0 seconds, 2.451 kilobytes]\n▶ dispatched branch post_files_31d6f026c8bea126\n● completed branch post_files_31d6f026c8bea126 [0 seconds, 1.777 kilobytes]\n● completed pattern post_files \n▶ dispatched branch static_copy_8782d3d7b7b28f55\n● completed branch static_copy_8782d3d7b7b28f55 [0.013 seconds, 173 bytes]\n● completed pattern static_copy \n▶ dispatched branch post_fuse_76c67863243e7a55\n● completed branch post_fuse_76c67863243e7a55 [0.602 seconds, 170 bytes]\n▶ dispatched branch post_fuse_9597bb36619812f6\n● completed branch post_fuse_9597bb36619812f6 [0.357 seconds, 186 bytes]\n▶ dispatched branch post_fuse_95cfcfc8e4bf98af\n● completed branch post_fuse_95cfcfc8e4bf98af [0.095 seconds, 182 bytes]\n▶ dispatched branch post_fuse_84cb9cd7cf957481\n● completed branch post_fuse_84cb9cd7cf957481 [0.051 seconds, 173 bytes]\n● completed pattern post_fuse \n▶ ended pipeline [1.362 seconds]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_visnetwork()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-4929a56e939b13f92b78\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-4929a56e939b13f92b78\">{\"x\":{\"nodes\":{\"name\":[\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"blog_rds\",\"post_files\",\"post_fuse\",\"post_paths\",\"static_copy\",\"static_files\",\"static_paths\",\"Liteblog\"],\"type\":[\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"pattern\",\"pattern\",\"stem\",\"pattern\",\"pattern\",\"stem\",\"object\"],\"description\":[null,null,null,null,null,null,null,null,null,null,null,null],\"status\":[\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"uptodate\"],\"seconds\":[0.003,0,0,0,0.002,0,1.105,0.001,0.013,0,0.033,null],\"bytes\":[9739,3759,115,271,0,9215,711,185,173,0,139,null],\"branches\":[null,null,null,null,null,4,4,null,1,1,null,null],\"label\":[\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"blog_rds\",\"post_files\",\"post_fuse\",\"post_paths\",\"static_copy\",\"static_files\",\"static_paths\",\"Liteblog\"],\"color\":[\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#354823\"],\"id\":[\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"blog_rds\",\"post_files\",\"post_fuse\",\"post_paths\",\"static_copy\",\"static_files\",\"static_paths\",\"Liteblog\"],\"level\":[2,1,1,1,3,4,5,3,5,4,3,1],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"square\",\"square\",\"dot\",\"square\",\"square\",\"dot\",\"triangleDown\"]},\"edges\":{\"from\":[\"blog\",\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"post_files\",\"post_paths\",\"static_paths\",\"post_paths\",\"blog\",\"static_files\",\"blog\",\"Liteblog\",\"blog\"],\"to\":[\"static_paths\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"static_files\",\"post_files\",\"static_copy\",\"static_copy\",\"blog_rds\",\"blog\",\"post_paths\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Up to date\",\"Outdated\",\"Stem\",\"Pattern\",\"Object\"],\"color\":[\"#354823\",\"#78B7C5\",\"#899DA4\",\"#899DA4\",\"#899DA4\"],\"shape\":[\"dot\",\"dot\",\"dot\",\"square\",\"triangleDown\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nWhy are some targets still showing as outdated? Because that's how I set them up with `tar_cue()`. By design, every time we rebuild, the blog will check the file paths to see if there are any new static files to be copied or new posts to be fused. Consequently, those two targets and everything downstream of those show up as outdated. But notice that when we call `tar_make()` again...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_make()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✔ skipped target blog\n✔ skipped target blog_css\n✔ skipped target blog_ftr\n✔ skipped target blog_hdr\n▶ dispatched target static_paths\n● completed target static_paths [0.034 seconds, 139 bytes]\n▶ dispatched target post_paths\n● completed target post_paths [0 seconds, 185 bytes]\n✔ skipped target blog_rds\n✔ skipped branch static_files_1b8fcc933438b737\n✔ skipped pattern static_files\n✔ skipped branch post_files_bfe2f528519c0ff0\n✔ skipped branch post_files_0d76c076472d293c\n✔ skipped branch post_files_64b628c4152d280c\n✔ skipped branch post_files_31d6f026c8bea126\n✔ skipped pattern post_files\n✔ skipped branch static_copy_8782d3d7b7b28f55\n✔ skipped pattern static_copy\n✔ skipped branch post_fuse_76c67863243e7a55\n✔ skipped branch post_fuse_9597bb36619812f6\n✔ skipped branch post_fuse_95cfcfc8e4bf98af\n✔ skipped branch post_fuse_84cb9cd7cf957481\n✔ skipped pattern post_fuse\n▶ ended pipeline [0.122 seconds]\n```\n\n\n:::\n:::\n\n\n\n...only the `static_paths` and `post_paths` targets are rerun: nothing has actually changed in the `source` folder, so the fuse and copy targets are skipped.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\n├── _liteblog-footer.html\n├── _liteblog-header.html\n├── _liteblog.R\n├── _liteblog.css\n├── _liteblog.rds\n├── _targets\n│   ├── meta\n│   │   ├── meta\n│   │   ├── process\n│   │   └── progress\n│   ├── objects\n│   │   ├── blog\n│   │   ├── post_fuse_76c67863243e7a55\n│   │   ├── post_fuse_84cb9cd7cf957481\n│   │   ├── post_fuse_9597bb36619812f6\n│   │   ├── post_fuse_95cfcfc8e4bf98af\n│   │   ├── post_paths\n│   │   ├── static_copy_8782d3d7b7b28f55\n│   │   └── static_paths\n│   └── user\n├── _targets.R\n├── site\n│   ├── 001\n│   │   └── hello-cruel-world\n│   │       └── index.html\n│   ├── 002\n│   │   └── blog-object\n│   │       └── index.html\n│   ├── 404.html\n│   └── index.html\n└── source\n    ├── 404.rmd\n    ├── _001_hello-cruel-world.rmd\n    ├── _002_blog-object.rmd\n    └── index.rmd\n```\n\n\n:::\n:::\n\n\n\nNow suppose I were to add two new posts into the the `source` folder:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nsource\n├── 404.rmd\n├── _001_hello-cruel-world.rmd\n├── _002_blog-object.rmd\n├── _003_schools-of-magic.rmd\n├── _004_spell-dice.rmd\n├── data\n│   └── spells.csv\n└── index.rmd\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_visnetwork()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-56457827ab1876f7c579\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-56457827ab1876f7c579\">{\"x\":{\"nodes\":{\"name\":[\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"blog_rds\",\"post_files\",\"post_fuse\",\"post_paths\",\"static_copy\",\"static_files\",\"static_paths\",\"Liteblog\"],\"type\":[\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"pattern\",\"pattern\",\"stem\",\"pattern\",\"pattern\",\"stem\",\"object\"],\"description\":[null,null,null,null,null,null,null,null,null,null,null,null],\"status\":[\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"uptodate\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"uptodate\"],\"seconds\":[0.003,0,0,0,0.002,0,1.105,0,0.013,0,0.034,null],\"bytes\":[9739,3759,115,271,0,9215,711,185,173,0,139,null],\"branches\":[null,null,null,null,null,4,4,null,1,1,null,null],\"label\":[\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"blog_rds\",\"post_files\",\"post_fuse\",\"post_paths\",\"static_copy\",\"static_files\",\"static_paths\",\"Liteblog\"],\"color\":[\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#354823\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#354823\"],\"id\":[\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"blog_rds\",\"post_files\",\"post_fuse\",\"post_paths\",\"static_copy\",\"static_files\",\"static_paths\",\"Liteblog\"],\"level\":[2,1,1,1,3,4,5,3,5,4,3,1],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"square\",\"square\",\"dot\",\"square\",\"square\",\"dot\",\"triangleDown\"]},\"edges\":{\"from\":[\"blog\",\"blog\",\"blog_css\",\"blog_ftr\",\"blog_hdr\",\"post_files\",\"post_paths\",\"static_paths\",\"post_paths\",\"blog\",\"static_files\",\"blog\",\"Liteblog\",\"blog\"],\"to\":[\"static_paths\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"post_fuse\",\"static_files\",\"post_files\",\"static_copy\",\"static_copy\",\"blog_rds\",\"blog\",\"post_paths\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Up to date\",\"Outdated\",\"Stem\",\"Pattern\",\"Object\"],\"color\":[\"#354823\",\"#78B7C5\",\"#899DA4\",\"#899DA4\",\"#899DA4\"],\"shape\":[\"dot\",\"dot\",\"dot\",\"square\",\"triangleDown\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nLooks the same. But this time when we call `tar_make()`, there will actually be some changes to the `source` folder, so the downstream targets run:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_make()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n✔ skipped target blog\n✔ skipped target blog_css\n✔ skipped target blog_ftr\n✔ skipped target blog_hdr\n▶ dispatched target static_paths\n● completed target static_paths [0.032 seconds, 159 bytes]\n▶ dispatched target post_paths\n● completed target post_paths [0 seconds, 218 bytes]\n✔ skipped target blog_rds\n✔ skipped branch static_files_1b8fcc933438b737\n▶ dispatched branch static_files_790cd5756211053f\n● completed branch static_files_790cd5756211053f [0 seconds, 302.514 kilobytes]\n● completed pattern static_files \n✔ skipped branch post_files_bfe2f528519c0ff0\n✔ skipped branch post_files_0d76c076472d293c\n✔ skipped branch post_files_64b628c4152d280c\n▶ dispatched branch post_files_8e7e3b0090f4b0d4\n● completed branch post_files_8e7e3b0090f4b0d4 [0 seconds, 11.136 kilobytes]\n▶ dispatched branch post_files_4f6c7b9ae1c233a4\n● completed branch post_files_4f6c7b9ae1c233a4 [0 seconds, 3.631 kilobytes]\n✔ skipped branch post_files_31d6f026c8bea126\n● completed pattern post_files \n✔ skipped branch static_copy_8782d3d7b7b28f55\n▶ dispatched branch static_copy_71bb77eeb0169883\n● completed branch static_copy_71bb77eeb0169883 [0.015 seconds, 173 bytes]\n● completed pattern static_copy \n▶ dispatched branch post_fuse_76c67863243e7a55\n● completed branch post_fuse_76c67863243e7a55 [0.212 seconds, 170 bytes]\n▶ dispatched branch post_fuse_9597bb36619812f6\n● completed branch post_fuse_9597bb36619812f6 [0.377 seconds, 186 bytes]\n▶ dispatched branch post_fuse_95cfcfc8e4bf98af\n● completed branch post_fuse_95cfcfc8e4bf98af [0.167 seconds, 182 bytes]\n▶ dispatched branch post_fuse_08c37253a0821d70\n● completed branch post_fuse_08c37253a0821d70 [0.676 seconds, 185 bytes]\n▶ dispatched branch post_fuse_f9dff6bed3af7eb2\n● completed branch post_fuse_f9dff6bed3af7eb2 [1.065 seconds, 183 bytes]\n▶ dispatched branch post_fuse_84cb9cd7cf957481\n● completed branch post_fuse_84cb9cd7cf957481 [0.049 seconds, 173 bytes]\n● completed pattern post_fuse \n▶ ended pipeline [2.715 seconds]\n```\n\n\n:::\n:::\n\n\n\nThis is clearly an inefficient design: whenever the source folder changes, all of the posts get rendered again. In an ideal world we wouldn't do this, and only those posts (or static files) that have been modified would get run again. However, it would take a little more effort than I'm willing to expend on this side-project to make this work properly: in order for it to behave the way we want it to, the build targets need to be able to inspect the internal contents of each blog post to determine which static files (or other posts!) are hidden dependencies. Discovering those dependencies reliably seems like hard work, so for the purposes of this toy project it just renders everything again.\n\n\nYou can browse the built website [here](./site/index.html)\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Project 3: Parallel computing\n\nFor my third foray into targets, I wanted to take a look at how a targets pipeline can be distributed across multiple parallel threads. Happily, parallel computing is supported out of the box in targets, using the [crew](https://wlandau.github.io/crew/) package to distribute the targets across multiple workers. \n\n### Minimal version\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_knitr_dir(\"threading1\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nAs a very minimal implementation, consider this pipeline:\n\n\n\n::: {.cell filename='_targets.R'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nlibrary(targets)\nlibrary(crew)\n\ntar_option_set(controller = crew_controller_local(workers = 3))\n\nlist(\n  tar_target(wait1, Sys.sleep(1)),\n  tar_target(wait2, Sys.sleep(2)),\n  tar_target(wait3, Sys.sleep(3)),\n  tar_target(wait4, Sys.sleep(4))\n)\n```\n:::\n\n\n\nThere are four targets here, and all they do is pause execution. If these were run serially, you would expect this to take about 10 seconds to complete. But that's not what happens because I'm using `crew_controller_local()` to define a controller that will split the processing across three parallel workers. Here's what actually happens:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_make()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n▶ dispatched target wait1\n▶ dispatched target wait2\n▶ dispatched target wait3\n● completed target wait1 [1.01 seconds, 44 bytes]\n▶ dispatched target wait4\n● completed target wait2 [2.01 seconds, 44 bytes]\n● completed target wait3 [3.012 seconds, 44 bytes]\n● completed target wait4 [4.004 seconds, 44 bytes]\n▶ ended pipeline [6.967 seconds]\n```\n\n\n:::\n:::\n\n\n\nUpon starting the job, the first three targets (`wait1`, `wait2`, and `wait3`) are dispatched to the three workers and they all start running concurrently. The fourth job (`wait4`) is placed on hold, and doesn't start until the first of the three jobs finishes (`wait1`). Only then does the fourth job start. As the remaining jobs complete, the user is notified, and once they are all finalised targets reports that the pipeline is complete.\n\n### Slightly less minimal version\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_knitr_dir(\"threading2\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell filename='_targets.R'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nlibrary(targets)\nlibrary(crew)\n\ntar_option_set(controller = crew_controller_local(workers = 3))\n\nsleeper <- function(duration, pipeline_start, name) {\n  sleep_start <- Sys.time()\n  Sys.sleep(duration)\n  sleep_stop <- Sys.time()\n  tibble::tibble(\n    name           = name,\n    pipeline_start = pipeline_start,\n    worker_pid     = Sys.getpid(),\n    begins_at      = difftime(sleep_start, pipeline_start),\n    finishes_at    = difftime(sleep_stop, pipeline_start)\n  )\n}\n\nstartup <- function() {\n  tibble::tibble(\n    name = \"start\",\n    pipeline_start = Sys.time(),\n    worker_pid     = Sys.getpid(),\n    begins_at      = as.difftime(0, units = \"secs\"),\n    finishes_at    = difftime(Sys.time(), pipeline_start)\n  )\n}\n\ncollate <- function(...) {\n  start <- Sys.time()\n  na_difftime <- as.difftime(NA_real_, units = \"secs\")\n  out <- rbind(...)\n  pipeline_start <- out$pipeline_start[1]\n  out$pipeline_start <- NULL\n  out <- rbind(\n    out,\n    tibble::tibble(\n      name         = \"trace\",\n      worker_pid   = Sys.getpid(),\n      begins_at    = difftime(start, pipeline_start),\n      finishes_at  = difftime(Sys.time(), pipeline_start)\n    )\n  )\n  out$duration    <- out$finishes_at - out$begins_at\n  out$begins_at   <- round(as.numeric(out$begins_at), digits = 3)\n  out$finishes_at <- round(as.numeric(out$finishes_at), digits = 3)\n  out$duration    <- round(as.numeric(out$duration), digits = 3)\n  out\n}\n\nlist(\n  tar_target(start, startup(), cue = tar_cue(\"always\")),\n  tar_target(wait1, sleeper(1, start$pipeline_start, \"wait1\")),\n  tar_target(wait2, sleeper(2, start$pipeline_start, \"wait2\")),\n  tar_target(wait3, sleeper(3, start$pipeline_start, \"wait3\")),\n  tar_target(wait4, sleeper(4, start$pipeline_start, \"wait4\")),\n  tar_target(trace, collate(start, wait1, wait2, wait3, wait4))\n)\n```\n:::\n\n\n\nEssentially the same as the last project, but with some better tracking. Here's the network:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_visnetwork(targets_only = TRUE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-26b22985179f0d812c91\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-26b22985179f0d812c91\">{\"x\":{\"nodes\":{\"name\":[\"start\",\"trace\",\"wait1\",\"wait2\",\"wait3\",\"wait4\"],\"type\":[\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\"],\"description\":[null,null,null,null,null,null],\"status\":[\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\",\"outdated\"],\"seconds\":[null,null,null,null,null,null],\"bytes\":[null,null,null,null,null,null],\"branches\":[null,null,null,null,null,null],\"label\":[\"start\",\"trace\",\"wait1\",\"wait2\",\"wait3\",\"wait4\"],\"color\":[\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\",\"#78B7C5\"],\"id\":[\"start\",\"trace\",\"wait1\",\"wait2\",\"wait3\",\"wait4\"],\"level\":[1,3,2,2,2,2],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\"]},\"edges\":{\"from\":[\"start\",\"start\",\"start\",\"start\",\"start\",\"wait1\",\"wait2\",\"wait3\",\"wait4\"],\"to\":[\"wait1\",\"wait2\",\"wait3\",\"wait4\",\"trace\",\"trace\",\"trace\",\"trace\",\"trace\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Outdated\",\"Stem\"],\"color\":[\"#78B7C5\",\"#899DA4\"],\"shape\":[\"dot\",\"dot\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nBuild:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntar_make()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n▶ dispatched target start\n● completed target start [0.013 seconds, 274 bytes]\n▶ dispatched target wait1\n▶ dispatched target wait2\n▶ dispatched target wait3\n● completed target wait1 [1.004 seconds, 281 bytes]\n▶ dispatched target wait4\n● completed target wait2 [2.015 seconds, 283 bytes]\n● completed target wait3 [3.005 seconds, 283 bytes]\n● completed target wait4 [4.018 seconds, 284 bytes]\n▶ dispatched target trace\n● completed target trace [0.019 seconds, 342 bytes]\n▶ ended pipeline [7.158 seconds]\n```\n\n\n:::\n:::\n\n\n\nDetails:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrace <- tar_read(trace)\ntrace\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  name  worker_pid begins_at finishes_at duration\n  <chr>      <int>     <dbl>       <dbl>    <dbl>\n1 start     523089     0            0       0    \n2 wait1     523089     0.042        1.04    1.00 \n3 wait2     523153     1.27         3.27    2.00 \n4 wait3     523089     1.05         4.05    3.00 \n5 wait4     523146     1.26         5.26    4.00 \n6 trace     523089     5.30         5.30    0.004\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncrew  <- tar_crew()\ncrew\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  controller               worker seconds targets\n  <chr>                    <chr>    <dbl>   <int>\n1 7b30bb6a89ba3199dc6f6b5e 1         4.13       4\n2 7b30bb6a89ba3199dc6f6b5e 2         4.10       1\n3 7b30bb6a89ba3199dc6f6b5e 3         2.10       1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrace_sum <- trace |> \n  dplyr::select(worker_pid, duration) |> \n  dplyr::summarise(\n    seconds = sum(duration), \n    targets = dplyr::n(), \n    .by = worker_pid\n  )\ntrace_sum\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  worker_pid seconds targets\n       <int>   <dbl>   <int>\n1     523089    4.01       4\n2     523153    2.00       1\n3     523146    4.00       1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nworker_lookup <- crew |> \n  dplyr::left_join(\n    trace_sum, \n    by = dplyr::join_by(\n      targets, \n      dplyr::closest(x$seconds > y$seconds)\n    )\n  ) |> \n  dplyr::select(worker, worker_pid)\nworker_lookup\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  worker worker_pid\n  <chr>       <int>\n1 1          523089\n2 2          523146\n3 3          523153\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrace |> dplyr::left_join(worker_lookup, by = \"worker_pid\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  name  worker_pid begins_at finishes_at duration worker\n  <chr>      <int>     <dbl>       <dbl>    <dbl> <chr> \n1 start     523089     0            0       0     1     \n2 wait1     523089     0.042        1.04    1.00  1     \n3 wait2     523153     1.27         3.27    2.00  3     \n4 wait3     523089     1.05         4.05    3.00  1     \n5 wait4     523146     1.26         5.26    4.00  2     \n6 trace     523089     5.30         5.30    0.004 1     \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/vis-9.1.0/vis-network.min.js\"></script>\n<script src=\"../../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}