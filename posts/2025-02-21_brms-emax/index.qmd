---
title: "Bayesian Emax regression using brms"
description: "This is a draft post, please do not cite or share yet"
date: "2025-02-21"
draft: true
draft-mode: unlinked
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
```

<!--------------- post begins here ----------------->

```{r}
#| label: packages
#| message: false
library(brms)
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(tidybayes)
```

## Continuous response

Letting $\phi_i$ denote^[Using $\phi_i$ here is not standard notation, and insofar as exposure is treated as a predictor for the response (as it is in the logistic regression context) you can think of it statistically in the same way you would a covariate. That would suggest that $x_i$ would be a sensible notation choice, but it is a little misleading. From a scientific perspective exposure-response modelling treats exposure as a qualitatively different entity to the covariates, and within the Emax regression framework in particular exposure is structurally different to other covariates. As such it seems sensible to use a distinct symbol.] the observed exposure for the $i$-th subject, and letting $y_i$ denote the observed response, the Emax model for a continuous response is written as follows:

$$
y_i = E_0 + E_{max} \frac{\phi_i^\gamma}{EC_{50}^\gamma + \phi_i^\gamma} + \epsilon_i 
$$

where $\epsilon_i \sim \mbox{Normal}(0, \sigma^2)$ is the measurement model. The model has five parameters:

- $E_0$ is represents the baseline response when drug exposure is zero
- $E_{max}$ defines the maximum change from baseline as the drug exposure increases
- $EC_{50}$ defines the exposure at which the change from baseline is 50% of the maximum
- $\gamma$ is the Hill coefficient, and describes the steepness of the response curve. It is not uncommon to fix $\gamma = 1$ in Emax modelling, and I'll start by doing that
- $\sigma^2$ is the residual variance that describes the amount of measurement error in the data

### Simulated data

Simulating semi-plausible data sets for exposure-response analysis isn't easy when you don't have a fully specified pharmacokinetic (PK) model under the hood, but with a few simplifying assumptions it's not too difficult. I talked about this in [an earlier blog post about Emax regression](/posts/2024-11-11_emax-parameters/), so I won't repeat myself here. Instead, I'll wrap everything in a `make_continuous_data()` function here:

::: {.callout-caution collapse="true" appearance="minimal" title="Click to see the code"}

```{r}
#| label: continuous-data
emax_fn <- function(exposure, emax, ec50, e0, gamma = 1, ...) {
  e0 + emax * (exposure ^ gamma) / (ec50 ^ gamma + exposure ^ gamma)
}

make_continuous_data <- function(seed = 123) {
  
  set.seed(seed)
  
  # exposures are assumed to be slightly-truncated log-normal distributed
  # variates, and scale linearly with dose
  generate_exposure <- function(dose, n, meanlog = 4, sdlog = 0.5) {
    dose * qlnorm(
      p = runif(n, min = .01, max = .99), 
      meanlog = meanlog,
      sdlog = sdlog
    )
  }
  
  # for simplicity, continuous covariates presumed to be 
  generate_covariate <- function(n) {
    rbeta(n, 2, 2) * 10
  }
  
  make_data <- function(dose, n, par) {
    tibble(
      
      # exposure depends on dose, of course
      dose = dose, 
      exposure = generate_exposure(max(dose, .01), n = n), 
      
      # covariates
      cov_a = generate_covariate(n = n),
      cov_b = generate_covariate(n = n),
      cov_c = generate_covariate(n = n),
      
      # response is an emax function of exposure plus covariate model
      response = emax_fn(
        exposure,
        emax = par$emax, 
        ec50 = par$ec50, 
        e0 = par$e0, 
        gamma = par$gamma
      ) + 
        par$coef_a * cov_a + 
        par$coef_b * cov_b + 
        par$coef_c * cov_c + 
        rnorm(n, 0, par$sigma)
    )
  }
  
  # parameters governing the whole thing
  par <- list(
    emax   = 10, 
    ec50   = 4000, 
    e0     = 5,
    gamma  = 1,
    sigma  = .6,
    coef_a = .3,
    coef_b = .2,
    coef_c = 0
  )
  
  # simulate a simple experiment with three dose groups
  dat <- bind_rows(
    make_data(dose = 100, n = 100, par = par),  
    make_data(dose = 200, n = 100, par = par),
    make_data(dose = 300, n = 100, par = par)
  ) 
  
  return(dat)
}
```

:::

Using this function we can simulate a data set suitable for Emax regression with a continuous response. In addition to the continuous `exposure` and `response` variables, the data set contains three three continuous covariates that could potentially be related to the response:

```{r}
dat <- make_continuous_data()
dat
```

The easiest way to see what's going on in this data set is to plot `response` as a function of `exposure`, as well as the three covariates `cov_a`, `cov_b`, and `cov_c`:

```{r}
#| fig-height: 8
#| fig-width: 8
dat |> 
  pivot_longer(
    cols = c(exposure, cov_a, cov_b, cov_c), 
    names_to = "variable",
    values_to = "value"
  ) |> 
  ggplot(aes(value, response)) + 
  geom_point() + 
  geom_smooth(formula = y ~ x, method = "loess") + 
  facet_wrap(~ variable, scales = "free_x") + 
  theme_bw()
```

At a quick glance it's clear that `exposure` is related to `response` (as one would hope), but it also seems clear that the response is related to `cov_a` and possibly also `cov_b`. Some modelling will be required to disentangle these effects.

### Simple Emax regression

Specify the model. The first step is describing the nonlinear predictor function using `brmsformula()`, or just `bf()` if we want to use the shorthand:

```{r}
#| label: simple-continuous-emax-model
base_model <- brmsformula(
  response ~ e0 + emax * exposure / (ec50 + exposure),
  e0 ~ 1,
  emax ~ 1,
  ec50 ~ 1,
  nl = TRUE
) 
```

There are a few important things to note here. 

- First, notice that we've set `nl = TRUE`. This is important because the syntax for a nonlinear model formula is qualitatively different to the syntax for a linear model formula. For linear models, we use the compact syntax where the model parameters (i.e., the regression coefficients) are *implicit*, like `y ~ x1 + x2` corresponds to the regression model $y_i = b_0 + b_1 x_1 + b_2 x_2$. For nonlinear models, this approach won't work because brms has no way to know the form of the model. So we have to be *explicit* and include the parameters (in this case `e0`, `emax`, and `ec50`) in the model formula.

- Second, note that I explicitly included formulas `e0 ~ 1`, `emax ~ 1`, and `ec50 ~ 1` in the model specification. This serves two purposes. First, it tells brms that `e0`, `emax` and `ec50` should be interpreted as model parameters (and brms will expect a prior for these parameters), whereas `exposure` should be treated as a predictor (brms will look for it in the data set).

- Third, be aware that the formula notation like `e0 ~ 1` is not arbitrary. In this particular model, `e0` will be treated like an "intercept" parameter: it's a single parameter and doesn't have a covariate model or any random effects attached to it. I'll come back to this later, but for now let's just be aware of this because you'll see this pop up in the output later.

Okay, let's get back on track. 

The second step is specifying the error model and link function. In an Emax regression with continuous response variables, we typically adopt the same approach we would do in an ordinary linear regression, and assume that measurement errors are normally distributed with an identity link:

```{r}
#| label: gaussian-error-model
measurement_model <- brmsfamily(
  family = "gaussian", 
  link = "identity"
)
```

Finally we need to specify priors. By default brms uses an improper flat prior for regression terms, but that's not usually the best approach and (at least in my experience) can misbehave when you have a nonlinear model such as Emax. In addition, since the `e0` and `emax` variables are interpreted on the same scale as `response`, and `ec50` is interpreted on the same scale as `exposure`, it's usually possible to set informed priors that make sense for the experimental design (e.g., if you've already built a PK model you have a good sense of the range of possible exposures, and that in turn tells you something about the plausible range for your EC50 parameter). Anyway, here's a prior that is pretty conservative but not unreasonable for this design (e.g., I'm allowing for an exposure-response relationship but not specifying the direction in advance), but rules out nonsense parameters (e.g., you really shouldn't have negative EC50 values):^[Okay yes, I have not manually specified the prior for the error variance $\sigma^2$. Feel free to inspect the Stan code to see how brms handles that.]

```{r}
base_prior <- c(
  prior(normal(0, 5), nlpar = "e0"),
  prior(normal(0, 5), nlpar = "emax"),
  prior(normal(2000, 500), nlpar = "ec50", lb = 0)
)
```

Now that we have all three components we are ready to go. It's possible to use `make_stancode()` to inspect the Stan code that brms generates, and you can take a look at it here if you want to get a sense of what the "brms to stan" translation does, but I'll admit it's not always very pretty:

::: {.callout-caution collapse="true" appearance="minimal" title="Click to see the Stan code"}

```{r}
#| label: stancode-continuous-emax-model
make_stancode(
  formula = base_model, 
  family = measurement_model, 
  data = dat, 
  prior = base_prior
)
```

:::

More important for our current purposes we can fit the model by calling `brm()`:

```{r}
#| label: run-continuous-emax-model
#| cache: true
#| message: false
#| results: hide
base_fit <- brm(
  formula = base_model, 
  family = measurement_model, 
  data = dat, 
  prior = base_prior
) 
```

Print the output:

```{r}
base_fit
```

Extract model predictions:

```{r}
base_epred <- base_fit |> 
  epred_draws(newdata = tibble(exposure = seq(0, 50000, 1000))) |> 
  ungroup() |> 
  summarize(response = mean(.epred), .by = exposure)

base_epred
```

Plot:

```{r}
ggplot(mapping = aes(exposure, response)) + 
  geom_path(data = base_epred) + 
  geom_point(data = dat) + 
  theme_bw()
```

### Adding covariates

We can adapt the exposure-response curve in the last example to illustrate why the simple emax regression model `base_model` is inadequate. If we shade the data points by the value of `cov_a` it is clear that the effect of this covariate has not been properly accounted for in the model:

```{r}
ggplot(mapping = aes(exposure, response)) + 
  geom_path(data = base_epred) + 
  geom_point(mapping = aes(color = cov_a), data = dat) + 
  scale_color_distiller(palette = "PuOr", limits = c(0, 10)) + 
  theme_bw()
```

Clearly we need an extended model, one that includes the effect of covariates $\mathbf{X} = [x_{ik}]$. In the usual case covariates are included as additional linear terms, which gives us this model:

$$
y_i = E_0 + E_{max} \frac{\phi_i^\gamma}{EC_{50}^\gamma + \phi_i^\gamma} + \sum_k b_k x_{ik} + \epsilon_i 
$$

If we were to translate this formula literally in the call to `brmsformula()` the model specification would look like this:

```{r}
full_model <- brmsformula(
  response ~ e0 + emax * exposure / (ec50 + exposure) + 
    a * cov_a + b * cov_b + c * cov_c,
  e0 ~ 1,
  emax ~ 1,
  ec50 ~ 1,
  a ~ 1, 
  b ~ 1,
  c ~ 1,
  nl = TRUE
)
```

A model written this way would work just fine but it is a little inelegant, and we can do better than this. Earlier in the post I mentioned that the recommended way to think about nonlinear "parameters" in brms is to think of them as "placeholders". This is the point at which that becomes relevant. We can write a more general formulation of Emax regression with covariates like this:

$$
y_i = f_1(X_i) + f_2(X_i) \frac{\phi_i^{f_4(X)}}{f_3(X_i) ^ {f_4(X_i)} + \phi_i ^ {f_4(X_i)}} + \epsilon_i
$$
where each of the functions $f_1$, $f_2$, $f_3$ and $f_4$ describe a linear predictor, $X_i$ denotes the covariate vector for the $i$-th subject, and for simplicity the dependence on regression coefficients is suppressed in the notation. When we specify an emax model without covariates all four of these functions correspond to "intercept-only" models and are constant with respect to $X_i$:

$$
\begin{array}{rcl}
f_1(X_i) &=& E_0 \\
f_2(X_i) &=& E_{max} \\
f_3(X_i) &=& EC_{50} \\
f_4(X_i) &=& \gamma
\end{array}
$$

If we fix $\gamma = 1$ we can drop $f_4$ entirely:

$$
y_i = f_1(X_i) + f_2(X_i) \frac{\phi_i}{f_3(X_i) + \phi_i} + \epsilon_i
$$

In principle we could specify a covariate model for any of these functions, but in the typical case we would do so only for $f_1$. Letting $b_k$ denote the regression coefficient for the $k$-th covariate:

$$
\begin{array}{rcl}
f_1(X_i) &=& E_0 + \sum_k b_k x_{ik} \\
f_2(X_i) &=& E_{max} \\
f_3(X_i) &=& EC_{50}
\end{array}
$$
Or, if we wrote this in the "classical" R formula style where, it would look something like this:

```r
e0 ~ 1 + x1 + x2 + ...
emax ~ 1
ec50 ~ 1
gamma ~ 1
```

Oh hey, that's how it works in brms. The first line in the model formula defines Emax as a structural model, and subsequent lines specify covariate models for each of the Emax components:

```{r}
full_model <- brmsformula(
  response ~ e0 + emax * exposure / (ec50 + exposure), # structural model
  e0   ~ 1 + cov_a + cov_b + cov_c, # covariate model for baseline
  emax ~ 1,                         # covariate model for max response
  ec50 ~ 1,                         # covariate model for EC50
  nl = TRUE
)
```

Having done so, the prior specification looks like this:

```{r}
full_prior <- c(
  prior(normal(0, 5), nlpar = "e0"),
  prior(normal(0, 5), nlpar = "emax"),
  prior(normal(2000, 500), nlpar = "ec50", lb = 0)
)
```

Although the specification of `full_prior` is identical to the `base_prior` I wrote down earlier, it's worth noting that brms interprets them slightly differently in the context of the two models. In `base_model` there is only one `e0` parameter (the intercept) over which the normal prior is specified. In contrast, `full_model` has four parameters (intercept plus three coefficients), and each of those four terms is supplied with its own normal prior. You can see this if you look closely at the Stan code, which is tucked below the fold here, but it's not the most thrilling read so let's move on, shall we?

::: {.callout-caution collapse="true" appearance="minimal" title="Click to see the Stan code"}

```{r}
#| label: stancode-continuous-emax-model-with-covariates
make_stancode(
  formula = full_model, 
  family = measurement_model, 
  data = dat, 
  prior = full_prior
)
```

:::

Now that the model is full specified we can call `brm()` and estimate model parameters:

```{r}
#| label: run-continuous-emax-model-with-covariates
#| cache: true
#| message: false
#| results: hide
full_fit <- brm(
  formula = full_model, 
  family = measurement_model, 
  data = dat, 
  prior = full_prior
) 
```

Here they are:

```{r}
full_fit
```

### Model comparison

```{r}
loo(full_fit, base_fit)
```

## Binary response

The emax regression framework also supports binary response data (e.g., adverse events in an exposure-safety analysis). Letting $p_i = Pr(y_i = 1)$ be the probability of an event,

$$
\mbox{logit}(p_i) = E_0 + E_{max} \frac{\phi_i^\gamma}{EC_{50}^\gamma + \phi_i^\gamma} 
$$

where 

$$
\mbox{logit}(p_i) = \ln \left(\frac{p_i}{1-p_i} \right)
$$

### Simulated data

Generating binary-outcome ER data sets isn't any more interesting than generating their continuous equivalents, so once again I'll wrap the code in a `make_binary_data()` function that you can browse if you really feel like it:

::: {.callout-caution collapse="true" appearance="minimal" title="Click to see the code"}

```{r}
#| label: binary-data
make_binary_data <- function(seed = 123) {
  
  set.seed(seed)
  
  # exposures are assumed to be slightly-truncated log-normal distributed
  # variates, and scale linearly with dose
  generate_exposure <- function(dose, n, meanlog = 4, sdlog = 0.5) {
    dose * qlnorm(
      p = runif(n, min = .01, max = .99), 
      meanlog = meanlog,
      sdlog = sdlog
    )
  }
  
  # for simplicity, continuous covariates presumed to be 
  generate_covariate <- function(n) {
    rbeta(n, 2, 2) * 10
  }
  
  make_data <- function(dose, n, par) {
    tibble(
      
      # exposure depends on dose, of course
      dose = dose, 
      exposure = generate_exposure(max(dose, .01), n = n), 
      
      # covariates
      cov_a = generate_covariate(n = n),
      cov_b = generate_covariate(n = n),
      cov_c = generate_covariate(n = n),
      
      # linear predictor is an emax function of exposure plus covariate model
      pred = emax_fn(
        exposure,
        emax = par$emax, 
        ec50 = par$ec50, 
        e0 = par$e0, 
        gamma = par$gamma
      ) + 
        par$coef_a * cov_a + 
        par$coef_b * cov_b + 
        par$coef_c * cov_c,
      
      # probability of outcome is a standard logistic function of pred
      prob = 1 / (1 + exp(-pred)),
      
      # response is bernoulli(prob)
      response = as.numeric(runif(n) < prob)
      
    ) #|> select(-pred, -prob)
  }
  
  # parameters governing the whole thing
  par <- list(
    emax   = 5, 
    ec50   = 8000, 
    e0     = -3,
    gamma  = 1,
    coef_a = .2,
    coef_b = 0,
    coef_c = 0
  )
  
  # simulate a simple experiment with three dose groups
  dat <- bind_rows(
    make_data(dose = 100, n = 100, par = par),  
    make_data(dose = 200, n = 100, par = par),
    make_data(dose = 300, n = 100, par = par)
  ) 
  
  return(dat)
}
```

:::

Here's a data set we can use for Emax regression with a binary response variable, and three continuous covariates:

```{r}
dat <- make_binary_data()
dat
```

To see what's going on in this data set I'll show violin plots for `exposure`, `cov_a`, `cov_b`, and `cov_c` stratified by whether the `response` variable is 0 or 1:

```{r}
#| fig-height: 8
#| fig-width: 8
dat |> 
  pivot_longer(
    cols = c(exposure, cov_a, cov_b, cov_c), 
    names_to = "variable",
    values_to = "value"
  ) |> 
  mutate(response = factor(response)) |> 
  ggplot(aes(response, value)) + 
  geom_violin(draw_quantiles = .5) + 
  facet_wrap(~ variable, scales = "free_y") + 
  theme_bw()
```

### Simple Emax regression

The model formula is identical to the one we specified last time...

```{r}
#| label: simple-binary-emax-model
base_model <- brmsformula(
  response ~ e0 + emax * exposure / (ec50 + exposure),
  e0 ~ 1,
  emax ~ 1,
  ec50 ~ 1,
  nl = TRUE
) 
```

There's no reason to modify the prior either...

```{r}
base_prior <- c(
  prior(normal(0, 5), nlpar = "e0"),
  prior(normal(0, 5), nlpar = "emax"),
  prior(normal(2000, 500), nlpar = "ec50", lb = 0)
)
```

The only thing we need to change is the measurement model:

```{r}
#| label: bernoulli-error-model
measurement_model <- brmsfamily(
  family = "bernoulli", 
  link = "logit"
)
```

Run the model:

```{r}
#| label: run-binary-emax-model
#| cache: true
#| message: false
#| results: hide
base_fit <- brm(
  formula = base_model, 
  family = measurement_model, 
  data = dat, 
  prior = base_prior
) 
```

```{r}
base_fit
```

Extract model predictions:

```{r}
base_epred <- base_fit |> 
  epred_draws(newdata = tibble(exposure = seq(0, 50000, 1000))) |> 
  ungroup() |> 
  summarize(response = mean(.epred), .by = exposure)

base_epred
```

Plot:

```{r}
ggplot(mapping = aes(exposure, response)) + 
  geom_path(data = base_epred) + 
  geom_jitter(data = dat, width = 0, height = .05) + 
  theme_bw()
```

### Adding covariates

At this point you're hardly going to be shocked to discover that the model formula for the full model is unchanged from the one we used in the continuous case, so we can just reuse the `full_model` formula we wrote down before. Same goes for the prior, we can reuse `full_prior`. We've already rejigged the `measurement_model`, so...

```{r}
#| label: run-binary-emax-model-with-covariates
#| cache: true
#| message: false
#| results: hide
full_fit <- brm(
  formula = full_model, 
  family = measurement_model, 
  data = dat, 
  prior = full_prior
) 
```

```{r}
full_fit
```

### Model comparison

```{r}
loo(full_fit, base_fit)
```

