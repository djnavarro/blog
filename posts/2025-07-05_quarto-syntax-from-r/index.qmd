---
title: "Generating quarto syntax within R"
description: "To quote Cassian Andor, \"It's harder than it looks\""
date: "2025-07-05"
categories: ["Quarto", "Literate Programming", "R"]
image: diego.jpg
image-alt: "Diego Luna. Because he is very pretty"
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
ggplot2::theme_set(ggplot2::theme_bw())
```

<!--------------- post begins here ----------------->

```{r}
#| label: packages
#| message: false
library(dplyr)
library(purrr)
library(ggplot2)
library(quartose)
library(babynames)
```

It is Saturday morning in my quiet neighbourhood in Sydney's inner west, and for no particular reason I'm thinking about the strange human convention of assigning names and labels to one another. I'm quite fond of this tradition. So much so that I have collected a surprising number of names in my half century on the planet. At different moments in my life I have been Dan, Dani, Danni, Danny, Daniel, Danielle, and Daniela. All variations on a theme, perhaps, but each one has its own flavour and connotation. In my experience of how people use the words, a "Danielle" is a different person to a "Daniela", and both are a very different person to a "Daniel". I wonder at the strangeness of people who go through life with only the one name, unaware perhaps of the possibilities that surround them. Ah well.

## The topic at hand

In any case, none of these musings are particularly relevant to the blog post. They are merely a pretext for me to introduce the following tiny data analysis. Using data from the [babynames](https://hadley.github.io/babynames/) R package, I can do something like this:

```{r}
bbs <- paste0("Dan", c("", "i", "ni", "ny", "iel", "ielle", "iela"))
dat <- map(bbs, \(bb) filter(babynames, name == bb))
pic <- map(dat, \(dd) ggplot(dd, aes(year, prop, fill = sex)) + geom_col())
```

The simple elegance of this code appeals to me. In three lines of code I took a vector of names (`bbs`), used `map()` to construct a list of data frames (`dat`) that describe the popularity of each of these names, and how that popularity has changed over time, and then repeated the exercise to produce a list of data visualisation objects (`pic`). 

Unfortunately, the elegance of my data visualisation code has created a problem. If you're the kind of data analyst who loves the prettiness of the previous code, you're almost certainly the kind of data analyst who adores literate programming, and would like a similarly clean tool for inserting the plots directly into this very document. Intuitively it seems like there should be some functionality that would allow you to place each element of the `pic` list into its own tab and assign each tab the corresponding label from `bbs`. It *ought* to be possible to do this from R, using a function like `quarto_tabset()` or the like, and it *ought* to do something like this:

```{r}
#| label: tabs-and-headers-1
#| results: asis
quarto_tabset(content = pic, names = bbs, level = 3)
```

Huh. Yes that is rather nice. But does it have to be restricted to plots? It doesn't seem like it should be -- if anything, it seems like it should be even easier for a function like `quarto_tabset()` to wrap a list of data frames and print each of those within a tab. Wouldn't it be nice if we could that to the...


```{r}
#| label: tabs-and-headers-2
#| results: asis
quarto_tabset(content = dat, names = bbs, level = 3)
```

...data? Ahhhhhh yes. Quite lovely.

Although... if we are going to go down this path, why would we stop at tabsets? Why not have functions like `quarto_div()` and `quarto_span()` that would insert HTML divs and spans into the document, assigning them to whatever CSS classes happen to strike our fancy? That shouldn't be too hard really: the quarto syntax for a tabset is essentially identical to the syntax for any other HTML div, so that should be pretty straightforward. Armed with this functionality, it would be fairly easy to write an R command to generate margin text, callouts, paragraphs with fancy formatting, and a great deal more besides...

```{r}
#| label: div-1
#| results: asis
quarto_div(
  content = "This is some margin text.", 
  class = "column-margin"
)
```

```{r}
#| label: div-2
#| results: asis
quarto_div(
  content = c(
    "Using character vectors is fine.",
    "This is also just one margin text block.", 
    "All the strings get pasted together,",
    "with a separator."
  ),
  class = "column-margin",
  sep = " /// "
)
```


```{r}
#| label: div-3
#| results: asis
quarto_div(
  content = list(
    "You can pass a list as the div content.", 
    "That allows you to mix content,",
    1:3,
    c("of different types", "and lengths."),
    "But pay attention to where separators appear,",
    "and remember that **markdown parsing still applies**"
  ),
  class = "column-margin",
  sep = " /// "
)
```


```{r}
#| label: div-5
#| results: asis
quarto_div(
  content = c(
    "You can supply multiple classes.",
    "This creates a callout box in the margin"
  ),
  class = c("column-margin", "callout-tip"),
  sep = " "
)
```

```{r}
#| label: span-2
#| results: asis
quarto_div(
  content = list(
    quarto_span(content = "You can wrap multiple spans in a div so that"),
    quarto_span(content = "some text is highlighted", class = "mark"),
    quarto_span(content = "and some is underlined", class = "underline")
  ),
  class = "column-margin",
  sep = " "
)
```

Why yes, Danielle, Daniela, or whatever name you're using these days, that does seem rather handy. Are you planning to explain what you're doing here babe, or are you just being annoying?

## Unpacking it a bit

All the work here is being done by a little convenience package I wrote for myself called [quartose](https://quartose.djnavarro.net/). It's not especially fancy, but it solves a problem I often encounter in real life data analysis. As I wrote in the package README:

> When analysing data sets in R, it is often convenient to wrap the analysis within a quarto document for reporting purposes: containing all the analysis components within a single easy-to-navigate HTML document is generally a kindness for the reader. One consequence of this, however, is that sometimes you find yourself wanting to write code within an R code chunk that will generate parts of the quarto document for you. For instance, when iterating over many analyses within a single R chunk, you might want to have that chunk generate the quarto section headers, tabsets and so on. This is possible because the knitr engine (which evaluates the R code chunks) allows you to generate “asis” output that will later be captured by the quarto parser; if such output is formatted to look like correct quarto syntax, it will be captured and translated to the appropriate HTML.

In principle this isn't very hard. Here's the output of a call to `quarto_div()` when I *don't* supply the `results: asis` code chunk option:

```{r}
quarto_div(
  content = "This is some margin text.", 
  class = "column-margin"
)
```

Any quarto user would immediately recognise the syntax here. All that `quarto_div()` actually does is construct syntax for the quarto parser to capture and render. It truly isn't fancy. The `quarto_tabset()` output isn't much more complicated either:

```{r}
quarto_tabset(
  content = list( 
    tab1 = 1:5,
    tab2 = "hello"
  ),
  level = 3
)
```

The function goes a little overboard when inserting whitespace around the quarto commands (each component imposes its own "bubble" of whitespace), and there's probably a better way of producing the "output formatting" than directly supplying HTML pre tags, but whatever, it does the job. Things get messier when inserting the syntax for plots, because when that happens you're juggling ggplot2, knitr, and quarto in a kind of strange way. At the moment, the way this is handled in quartose is to delay the rendering of the plot object until the last possible moment so that knitr doesn't get trigger happy and insert it into the wrong place in the document (there were some quite hilarious early versions where plots would show up in pretty weird places like it was a word document or something). Plus, at the moment I haven't even attempted to capture base graphics correctly: at present, the trick only works for ggplot2 objects. 

## Is this even useful?

Anyway, this isn't really intended to be a long blog post or a deep dive. Right now I'm at the stage of wondering if this is even a useful thing to do. I know why the functionality is useful for me, but I'm not sure if anyone else has the same needs that I do. I have no problems with writing personal packages that are intended only for a single user, but there's something odd about this one: the only context in which I really *need* this functionality is at work, but if I'm going to use it at work I do need to make sure it is developed to a sufficiently high standard that it can be called within code that needs to be executed by regulatory agencies, set time aside for maintenance, etc. That's more software development work than I typically want to expend on one of my silly side projects.

So yeah, I don't know. Given all this context I find myself pondering two questions; (a) is this functionality even useful? (b) is there a better way do it? I'm not sure about either one. 