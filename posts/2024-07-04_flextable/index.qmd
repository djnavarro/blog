---
title: "Use of flextable"
description: "This is a subtitle"
date: "2024-07-04"
image: "img/swatch.png"
image-alt: "A table of four horizontal textured bands in pastel shades"
categories: ["R", "Data Wrangling"]
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
```

<!--------------- post begins here ----------------->

```{r}
#| message: false
library(flextable)
library(ftExtra)
library(tibble)
library(stringr)
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
```

- [flextable package](https://davidgohel.github.io/flextable/)
- [flextable book](https://ardata-fr.github.io/flextable-book/)

## Basic use

To get started I'll need a data set to display as a table. 

```{r}
novels <- read_csv("culture.csv", show_col_types = FALSE)
novels
```

Passing to `flextable()`

```{r}
novels %>%
  select(title:isbn) %>% 
  flextable()
```

Using `autofit()` to produce nice column spacing:

```{r}
novels %>%
  select(title:isbn) %>% 
  flextable() %>% 
  autofit()
```

Use `set_header_labels()` to format the column labels:

```{r}
novels %>%
  select(title:isbn) %>% 
  flextable() %>% 
  set_header_labels(
    title = "Book Title",
    publication_date = "Published",
    setting_date = "Story Date", 
    isbn = "ISBN"
  ) %>% 
  autofit()
```

## Switching themes

Theme functions are simpler than ggplot2. It's a function that takes a flextable as input and returns a flextable as ouput. Default is `theme_booktabs()` but there are several that come bundled with the package:

```{r}
novels %>%
  select(title:isbn) %>% 
  flextable() %>% 
  autofit() %>% 
  theme_box()
```

```{r}
novels %>%
  select(title:isbn) %>% 
  flextable() %>% 
  autofit() %>% 
  theme_alafoli()
```

```{r}
novels %>%
  select(title:isbn) %>% 
  flextable() %>% 
  autofit() %>% 
  theme_tron()
```

## Tinkering

```{r}
novels %>%
  select(title:isbn) %>% 
  flextable() %>% 
  autofit() %>% 
  bg(part = "header", bg = "grey50") %>% 
  color(part = "header", color = "ghostwhite") %>% 
  italic(j = "title", part = "all") %>% 
  vline(j = "title") %>% 
  border_outer(
    border = fp_border_default(
      color = "black", 
      width = 2
    )
  )
```

## Setting defaults

```{r}
get_flextable_defaults()
```

Setting the defaults:

```{r}
set_flextable_defaults(
  font.color = "purple",
  background.color = "ghostwhite",
  table.layout = "autofit"
)

novels %>%
  select(title:isbn) %>% 
  flextable() 
```

These defaults are applied to any new table, which I don't want. So I'll restore defaults with `init_flextable_defaults()`

```{r}
init_flextable_defaults()

novels %>%
  select(title:isbn) %>% 
  flextable() 
```

## Cell contents

Use `compose()` or `mk_par()` (the latter is an alias to make life easier in case of conficts between `purrr::compose()` and `flextable::compose()` to build cell contents from constituent parts:

```{r}
novels %>%
  select(title:isbn) %>% 
  flextable() %>% 
  set_header_labels(
    title = "Book Title",
    publication_date = "Published",
    setting_date = "Story Date", 
    isbn = "ISBN"
  ) %>% 
  compose(
    j = "publication_date",
    value = as_paragraph(as.character(publication_date), " CE")
  ) %>% 
  autofit()
```

Fancier formatting to a specific chunk using `as_chunk()` and `fp_text_default()`. Notice that `color()` here is just a convenience function. I could do the same thing using `compose()`, `as_paragraph()`, `as_chunk()`, and `fp_text_default()`:


```{r}
novels %>%
  select(title:isbn) %>% 
  flextable() %>% 
  set_header_labels(
    title = "Book Title",
    publication_date = "Published",
    setting_date = "Story Date", 
    isbn = "ISBN"
  ) %>% 
  compose(
    j = "publication_date",
    value = as_paragraph(as.character(publication_date), " CE")
  ) %>% 
  compose(
    i = ~ title == "Use of Weapons",
    j = "title",
    value = as_paragraph(as_chunk(
      title, 
      props = fp_text_default(color = "blue")
    ))
  ) %>% 
  color(
    i = ~ title == "Surface Detail",
    j = "title",
    color = "red" 
  ) %>% 
  autofit()
```

## Merging cells

Data for the table:

```{r}
ships <- read_csv("ship-list.csv", show_col_types = FALSE)

ship_count <- ships %>% 
  mutate(Civilisation = case_when(
    str_detect(Civilisation, "^Culture ") ~ "Culture",
    str_detect(Civilisation, "^Non-aligned ") ~ "Non-aligned",
    TRUE ~ Civilisation
  )) %>% 
  group_by(Novel, Civilisation) %>%
  count(name = "Ships") %>% 
  ungroup() %>% 
  arrange(Novel, desc(Ships))

ship_count
```

```{r}
ship_count %>% 
  flextable() %>% 
  autofit() %>% 
  theme_box()
```

```{r}
ship_count %>% 
  flextable() %>% 
  autofit() %>% 
  merge_v(j = "Novel") %>% 
  theme_box()
```

```{r}
ship_count %>% 
  as_grouped_data(groups = "Novel") %>% 
  flextable() %>% 
  autofit()
```

## Markdown columns

Flextable doesn't natively support markdown syntax in data columns, but the [ftExtra](https://ftextra.atusy.net/) package provides this.

```{r}
novels %>% 
  mutate(title = paste0("[", title, "](", url, ")")) %>% 
  select(title, description) %>% 
  flextable(col_keys = c("title", "description")) %>% 
  set_header_labels(
    title = "Book Title",
    description = "Description"
  ) %>% 
  colformat_md(j = "title") %>% 
  autofit()
```


This can be handy for equations:

```{r}
tbl <- tribble(
  ~expression,                  ~text,
  "x^2^ + y^2^ = 1",            "Formula for the unit circle",
  "**x** = (x~1~, ..., x~n~)" , "A vector of length n"
)
tbl
```

```{r}
tbl %>% 
  flextable() %>% 
  colformat_md(j = "expression") %>% 
  autofit()
```

Math support:

```{r}
tbl <- tribble(
  ~expression,                       ~text,
  "$x^2 + y^2 = 1$",                 "Formula for the unit circle",
  "$\\bm{x} = (x_1, \\ldots, x_n)$", "A vector of length $n$",
  "$\\mathcal{R}^n$",                 "$n$-dimensional real space",
  "$e^{i\\pi} + 1 = 0$",             "Euler's identity^[A special case of Euler's formula]"
)
tbl
```

```{r}
tbl %>% 
  flextable() %>% 
  colformat_md() %>% 
  autofit()
```

## Inserting images

```{r}
novels %>% 
  mutate(title = paste0("[", title, "](", url, ")")) %>% 
  select(title, image, description) %>% 
  flextable(col_keys = c("title", "image", "description")) %>% 
  set_header_labels(
    title = "Book Title",
    description = "Description",
    image = "Cover"
  ) %>% 
  colformat_md(j = "title") %>% 
  colformat_image(j = "image", width = .75, height = 1.2) %>% 
  autofit()
```

## Inserting plots

```{r}
swatch <- function(seed, n = 2000) {
  set.seed(seed)
  ggplot(
    data = tibble(
      x = runif(n, -4, 3), 
      y = runif(n),
      len = runif(n), 
      shade = runif(n)
    ), 
    mapping = aes(
      x = x, 
      y = y, 
      xend = x + len,
      yend = y,
      color = shade
    )
  ) + 
    geom_segment(show.legend = FALSE, alpha = .5, linetype = "dotted") + 
    coord_cartesian(xlim = c(-3, 3)) + 
    scale_color_gradientn(colors = sample(colors(), size = 3)) + 
    theme_void()
}

df <- tibble(
  seed = 100:108,
  plot = lapply(seed, swatch)
)

df
```

```{r}
flextable(df) %>% 
  set_header_labels(seed = "Seed", plot = "Swatch") %>% 
  compose(
    j = "plot", 
    value = as_paragraph(
      gg_chunk(value = plot, width = 4, height = .8)
    )
  ) %>% 
  autofit()
```
