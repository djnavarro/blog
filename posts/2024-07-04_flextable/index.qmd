---
title: "flextable"
description: "This is a subtitle"
date: "2024-07-04"
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
```

<!--------------- post begins here ----------------->

```{r}
#| message: false
library(flextable)
library(ftExtra)
library(tibble)
library(stringr)
library(dplyr)
library(tidyr)
library(readr)
```


- [flextable package](https://davidgohel.github.io/flextable/)
- [flextable book](https://ardata-fr.github.io/flextable-book/)

Data for the table:

```{r}
sw <- starwars %>% 
  select(name, height, mass, hair_color, eye_color, gender) %>% 
  slice_head(n = 10)

sw
```

## Basic use

Passing to `flextable()`

```{r}
sw %>% 
  flextable()
```

Using `autofit()` to produce nice column spacing:

```{r}
sw %>% 
  flextable() %>% 
  autofit()
```

Combine with dplyr to tidy up printed values:

```{e}
sw %>% 
  mutate(across(hair_color:gender, str_to_title)) %>% 
  flextable() %>% 
  autofit()
```

Use `set_header_labels()` to format the column labels:

```{r}
sw %>% 
  mutate(across(hair_color:gender, str_to_title)) %>% 
  flextable() %>% 
  autofit() %>% 
  set_header_labels(
    name = "Character Name",
    height = "Height (cm)",
    mass = "Mass (kg)", 
    hair_color = "Hair Color",
    eye_color = "Eye Color", 
    sex = "Sex",
    gender = "Gender",
    starships = "Starships"
  )
```

## Cell contents

Use `compose()` or `mk_par()` (the latter is an alias to make life easier in case of conficts between `purrr::compose()` and `flextable::compose()` to build cell contents from constituent parts:

```{r}
sw %>% 
  mutate(across(hair_color:gender, str_to_title)) %>% 
  flextable() %>% 
  autofit() %>% 
  set_header_labels(
    name = "Character Name",
    height = "Height",
    mass = "Mass", 
    hair_color = "Hair Color",
    eye_color = "Eye Color", 
    sex = "Sex",
    gender = "Gender",
    starships = "Starships"
  ) %>% 
  compose(
    j = "height", 
    value = as_paragraph(height, "cm")
  ) %>% 
  compose(
    j = "mass",
    value = as_paragraph(mass, "kg")
  )
```

Fancier formatting to a specific chunk using `as_chunk()` and `fp_text_default()`:

```{r}
sw %>% 
  mutate(across(hair_color:gender, str_to_title)) %>% 
  flextable() %>% 
  autofit() %>% 
  set_header_labels(
    name = "Character Name",
    height = "Height",
    mass = "Mass", 
    hair_color = "Hair Color",
    eye_color = "Eye Color", 
    sex = "Sex",
    gender = "Gender",
    starships = "Starships"
  ) %>% 
  compose(
    j = "height", 
    value = as_paragraph(
      height, 
      as_chunk("cm", props = fp_text_default(color = "grey50"))
    )
  ) %>% 
  compose(
    j = "mass",
    value = as_paragraph(
      mass, 
      as_chunk("kg", props = fp_text_default(color = "grey50"))
    )
  )
```

Using fancier row selectors to get contextual formatting:

```{r}
sw %>% 
  mutate(across(hair_color:gender, str_to_title)) %>% 
  flextable() %>% 
  autofit() %>% 
  set_header_labels(
    name = "Character Name",
    height = "Height",
    mass = "Mass", 
    hair_color = "Hair Color",
    eye_color = "Eye Color", 
    sex = "Sex",
    gender = "Gender",
    starships = "Starships"
  ) %>% 
  compose(
    j = "height", 
    value = as_paragraph(
      height, 
      as_chunk("cm", props = fp_text_default(color = "grey50"))
    )
  ) %>% 
  compose(
    j = "mass",
    value = as_paragraph(
      mass, 
      as_chunk("kg", props = fp_text_default(color = "grey50"))
    )
  ) %>% 
  color(
    i = ~ eye_color == "Red",
    j = "eye_color",
    color = "red" 
  )
```

Notice that `color()` here is just a convenience function. I could do the same thing using `compose()`, `as_paragraph()`, `as_chunk()`, and `fp_text_default()`:

```{r}
sw %>% 
  mutate(across(hair_color:gender, str_to_title)) %>% 
  flextable() %>% 
  autofit() %>% 
  set_header_labels(
    name = "Character Name",
    height = "Height",
    mass = "Mass", 
    hair_color = "Hair Color",
    eye_color = "Eye Color", 
    sex = "Sex",
    gender = "Gender",
    starships = "Starships"
  ) %>% 
  compose(
    j = "height", 
    value = as_paragraph(
      height, 
      as_chunk("cm", props = fp_text_default(color = "grey50"))
    )
  ) %>% 
  compose(
    j = "mass",
    value = as_paragraph(
      mass, 
      as_chunk("kg", props = fp_text_default(color = "grey50"))
    )
  ) %>% 
  compose(
    i = ~ eye_color == "Blue",
    j = "eye_color",
    value = as_paragraph(as_chunk(
      eye_color, 
      props = fp_text_default(color = "blue")
    )
  )) %>% 
  color(
    i = ~ eye_color == "Red",
    j = "eye_color",
    color = "red" 
  )
```

## Merging cells

Data for the table:

```{r}
sw <- starwars %>% 
  select(name, starships) %>% 
  slice_head(n = 10) %>% 
  unnest(cols = c(starships))

sw
```

```{r}
sw %>% 
  flextable() %>% 
  set_header_labels(name = "Name", starships = "Starships") %>% 
  autofit() %>% 
  theme_box()
```

```{r}
sw %>% 
  flextable() %>% 
  set_header_labels(name = "Name", starships = "Starships") %>% 
  autofit() %>% 
  merge_v(j = "name") %>% 
  theme_box()
```

```{r}
sw %>% 
  as_grouped_data(groups = "name") %>% 
  flextable() %>% 
  set_header_labels(name = "Name", starships = "Starships") %>% 
  autofit() %>% 
  theme_box()
```

## Markdown columns

Flextable doesn't natively support markdown syntax in data columns, but the [ftExtra](https://ftextra.atusy.net/) package provides this:

```{r}
tbl <- tribble(
  ~expression,                  ~text,
  "x^2^ + y^2^ = 1",            "Formula for the unit circle",
  "**x** = (x~1~, ..., x~n~)" , "A vector of length n"
)
tbl
```

```{r}
tbl %>% 
  flextable() %>% 
  colformat_md(j = "expression") %>% 
  autofit()
```

Math support:

```{r}
tbl <- tribble(
  ~expression,                       ~text,
  "$x^2 + y^2 = 1$",                 "Formula for the unit circle",
  "$\\bm{x} = (x_1, \\ldots, x_n)$", "A vector of length $n$",
  "$\\mathcal{R}^n$",                 "$n$-dimensional real space",
  "$e^{i\\pi} + 1 = 0$",             "Euler's identity^[A special case of Euler's formula]"
)
tbl
```

```{r}
tbl %>% 
  flextable() %>% 
  colformat_md() %>% 
  autofit()
```


## Inserting images

```{r}
galleries <- read_csv("galleries.csv", show_col_types = FALSE)
galleries
```

```{r}
galleries %>% 
  flextable() %>% 
  set_header_labels(
    name = "Series Name", 
    image = "Image", 
    repo = "GitHub Repository"
  ) %>% 
  colformat_image(j = "image", width = 1, height = 1) %>% 
  autofit()
```

```{r}
galleries %>% 
  mutate(repo = paste0("[", basename(repo), "](", repo, ")")) %>% 
  flextable() %>% 
  set_header_labels(
    name = "Series Name", 
    image = "Image", 
    repo = "GitHub Repository"
  ) %>% 
  colformat_image(j = "image", width = 1, height = 1) %>% 
  colformat_md(j = "repo") %>% 
  autofit()
```

