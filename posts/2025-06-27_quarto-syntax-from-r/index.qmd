---
title: "quarto-syntax-from-r"
description: "This is a subtitle"
date: "2025-06-27"
categories: ["Quarto", "Literate Programming", "R"]
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
ggplot2::theme_set(ggplot2::theme_bw())
```

<!--------------- post begins here ----------------->

```{r}
#| label: packages
#| message: false
library(knitr)
library(dplyr)
library(purrr)
library(tibble)
library(stringr)
library(ggplot2)
library(quartose)
library(babynames)
library(janeaustenr)
```

A spectre is haunting my data analyses. Consider this:

```{r}
bbs <- paste0("Dan", c("", "i", "ni", "ny", "iel", "ielle", "iela"))
dat <- map(bbs, \(bb) filter(babynames, name == bb))
pic <- map(dat, \(dd) ggplot(dd, aes(year, prop, fill = sex)) + geom_col())
```

The simple elegance of this code appeals to me. In three lines of code I took a vector of names (`bbs`), used `map()` to construct a list of data frames (`dat`) that describe the popularity of each of these names, and how that popularity has changed over time, and then repeated the exercise to produce a list of data visualisation objects (`pic`). 

Unfortunately, the elegance of my data visualisation code has created a problem. If you're the kind of data analyst who loves the prettiness of the previous code, you're almost certainly the kind of data analyst who adores literate programming, and would like a similarly clean tool for inserting the plots directly into this very document. Perhaps something like this?

```{r}
#| label: tabs-and-headers-1
#| results: asis
quarto_tabset(content = pic, names = bbs, level = 3)
```

So lovely, so sexy. Now could we do that to the...


```{r}
#| label: tabs-and-headers-2
#| results: asis
quarto_tabset(content = dat, names = bbs, level = 3)
```

...data? 

Ahhhhhh yes. Lovely. 

## Divs and spans

```{r}
#| label: div-1
#| results: asis
quarto_div(
  content = "This is some margin text.", 
  class = "column-margin"
)
```


```{r}
#| label: div-2
#| results: asis
quarto_div(
  content = c(
    "Using character vectors is fine.",
    "This is also just one margin text block.", 
    "All the strings get pasted together,",
    "with a separator."
  ),
  class = "column-margin",
  sep = " /// "
)
```


```{r}
#| label: div-3
#| results: asis
quarto_div(
  content = list(
    "You can pass a list as the div content.", 
    "That allows you to mix content,",
    1:3,
    c("of different types", "and lengths."),
    "But pay attention to where separators appear,",
    "and remember that **markdown parsing still applies**"
  ),
  class = "column-margin",
  sep = " /// "
)
```


```{r}
#| label: div-4
#| results: asis
quarto_div(
  content = "This is a callout note.",
  class = "callout-note"
)

```


```{r}
#| label: div-5
#| results: asis
quarto_div(
  content = "You can supply multiple classes",
  class = c("column-margin", "callout-tip")
)
```


```{r}
#| label: span-1
#| results: asis
quarto_span(content = "this is highlighted", class = "mark")
```

```{r}
#| label: span-2
#| results: asis
quarto_div(
  content = list(
    quarto_span(content = "this is plain text"),
    quarto_span(content = "this is highlighted", class = "mark"),
    quarto_span(content = "this is underlined", class = "underline")
  ),
  sep = ", "
)
```

## Raw markdown

```{r}
#| label: raw-1
#| results: asis
quarto_markdown(
  content = c(
    "- this ends up being",
    "- a markdown list", 
    "- with **formatting**"
  ),
  sep = "\n"
)
```

```{r}
#| label: raw-2
#| results: asis
quarto_markdown(c(">", prideprejudice[8:16]), sep = " ")
```


