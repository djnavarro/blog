---
title: "Baby got back(references)"
description: "Now I have \\\\2 problems"
date: "2024-11-26"
image: "feather2.jpg"
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
```

```{r}
#| include: false
highlight <- function(x) {
  stringr::str_replace_all(
    string = x,
    pattern = "\\<([^<>]+)\\>", 
    #replacement = "\\1", 
    #replacement = "\n\n:::{style='color:blue'} \\1 \n:::" 
    replacement = "<span style='color:#008080'>&lt;\\1&gt;</span>"
  )
}

knitr::knit_hooks$set(
  output = function(x, options) {
    if (options$highlight == TRUE) {
      return(c("<pre>", highlight(x), "</pre>"))
    } 
    c("<pre>", x, "</pre>")
  }
)

knitr::opts_chunk$set(highlight = TRUE)

#base_hook <- knitr::knit_hooks$get("output")
```

```{css, echo=FALSE}
@import url('https://fonts.googleapis.com/css2?family=Tangerine:wght@400;700&display=swap');

.tangerine-regular {
  font-family: "Tangerine", cursive;
  font-weight: 400;
  font-style: normal;
}

.tangerine-bold {
  font-family: "Tangerine", cursive;
  font-weight: 700;
  font-style: normal;
}
```

<!--------------- post begins here ----------------->

> Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems. <br>
> &nbsp;&nbsp; -- [Ancient lore](https://regex.info/blog/2006-09-15/247)

I don't love regular expressions. Yes, they're a surprisingly powerful tool for pattern matching and text processing, built with syntax so compact that you can encode complex string manipulation tasks using a few keystrokes, but... no, I don't love them. At least once a week I have this moment when a yawning pit of black despair opens at my feet, and the barbed tentacles of despair wrap around my legs, poison injects chill into my veins, the icy claws of anxiety rip through my viscera, and a withered voice of pure evil slithers into my brain and speaks to me in the seductive language of Mordor:

<span class="tangerine-bold" style="font-size: 28pt">You can write a regular expression for this</span>

I try to resist. I'm a good girl, I tell him. I write *readable* code. I write *maintainable* code. I would never. Not on a first date. But oh, it's so cold outside and honestly Sauron is kinda hot. Have you not watched Rings of Power? Sometimes a girl has needs, and sometimes a Dark Lord has the goods.

Um.

Anyway.

Where was I?

Oh right... regular expressions. Yeah. 

<br>

## Oh, not another take (on regular expressions)

So let's be very clear on what this post is not. It is not a tutorial on regular expressions. The world doesn't need another one of those. It is not an opinion piece on regular expressions. The world *definitely* doesn't need another one of those. It's something far more important than either. It is a thinly-veiled excuse for me to post Sabrina Carpenter lyrics.

Speaking of which... 

```{r}
feather <- brio::read_lines("feather.txt")
cat(feather[1:10], sep = "\n")
```

<br> 

::: {layout-ncol=2}

![When I try to write a regular expression](feather1.jpg)

![When the regular expression encounters a string](feather2.jpg)

:::

```{r}
library(stringr)
```

## I'm so sorry for my loss

As I was saying, I don't love regular expressions. I'm not good at writing them, and I'm even worse at reading them. My typical process for writing a regular expression goes something like this...

Okay, that bit at the start of Feather where she sings "do-do-do" over and over, maybe I'll try to find all the passages in the song where that happens, why not? Seems easy enough, I'll look for every line that contains `"do"`:

```{r}
str_view(feather, "do")
```

Ah yeah that isn't quite right. The English language has this wacky thing called capitalisation. Been around for a while girl, you should probably have thought of that. Okay, so what I need is a regular expression that matches `"do"` and also `"Do"`. Well that's easy, I can use square brackets: the notation `[Dd]` means `"D"` or `"d"`. So I guess I'll use `[Dd]o"` then?

```{r}
str_view(feather, "[Dd]o")
```

Ah well... that's better I guess but actually it's still wrong because when Sabrina tells us she's "done" we probably don't want to confuse that with her singing "do-do", right? Okay well what we should probably acknowledge then is that we're looking specifically for multiple "do" strings connected with a hyphen (ignoring capitalisation)? Something like this `"[Dd]o-[Dd]o"` then?

```{r}
str_view(feather, "[Dd]o-[Dd]o")
```

But wait, now we catch "do-do" but not "do-do-do"? Yeah that doesn't work. Oh, I know, I'll define `"([Dd]o)"` as a capture group, and then use a [backreference](https://www.regular-expressions.info/refcapture.html) to look for one or more additional copies of the group separated by hyphens. I'm so clever, I totally know how to use backreferences:

```{r}
str_view(feather, "([Dd]o)(-\\1)+")
```

Ah fuck. Right, even though `"Do"` and `"do"` both match the *pattern* that defines the capture group (i.e., `[Dd]o`), they aren't identical strings. The backreference has to match the exact string that matched the group in the first instance. That is `([Dd]o)(-\\1)+` will match against `"do-do"`, `"do-do-do"`, and `"Do-Do-Do"`, but it won't match to `"Do-do"`. Sigh. 

Stop trying to be clever girl. You can just do this:

```{r}
str_view(feather, "([Dd]o)(-[Dd]o)+")
```

Is it perfect? Probably not. Is it good enough? Probably. Am I bored already? Oh my yes. It should not have taken me 20 minutes to figure out how to insert a few emojis into some song lyrics, but such is life.

```{r}
feather |> 
  str_replace_all("([Dd]o)(-[Dd]o)+", "🎶") |> 
  str_replace_all("feather", "🪶") |> 
  str_replace_all("wine", "🍷") |> 
  str_replace_all("\\(Ah\\)", "(😌)") |> 
  str_replace_all("\\[([^\\[\\]]+)\\]", "<\\1>") |> 
  cat(sep = "\n")
```

As for where the teal coloring comes from, eh, turns out you can do a lot with [knitr hooks](/posts/2023-12-30_knitr-hooks/) if you're bored.
